{"_index":"threat-hunting-queries","_id":"6DYGX5YBrgDVrAfHnIIG","_score":1,"_source":{"author":"Elastic","description":"This analytic flags multiple instances of LLM refusals to respond to sensitive prompts, helping to maintain ethical guidelines and compliance standards.","integration":["aws_bedrock.invocation"],"uuid":"11e33a8f-805b-4394-bee0-08ae8d78b025","name":"AWS Bedrock LLM Sensitive Content Refusals","language":["ES|QL"],"license":"Elastic License v2","notes":["Examine flagged interactions for patterns or anomalies in user requests that may indicate malicious intent or probing of model boundaries.","Regularly review and update the phrases that trigger refusals to adapt to new ethical guidelines and compliance requirements.","Ensure that data logs contain enough detail to provide context around the refusal, which will aid in subsequent investigations by security teams."],"mitre":["AML.T0051"],"references":["https://www.elastic.co/security-labs/elastic-advances-llm-security","https://owasp.org/www-project-top-10-for-large-language-model-applications/"],"queries":[{"query":"from logs-aws_bedrock.invocation-*\n | WHERE @timestamp > NOW() - 1 DAY\n   AND (\n     gen_ai.completion LIKE \"*I cannot provide any information about*\"\n     AND gen_ai.completion LIKE \"*end_turn*\"\n   )\n | STATS user_request_count = count() BY gen_ai.user.id\n | WHERE user_request_count >= 3\n","indices":["logs-aws_bedrock.invocation-*"],"cleaned_query":"from logs-aws_bedrock.invocation-*\n | WHERE @timestamp > NOW() - 1 DAY\n   AND (\n     gen_ai.completion LIKE \"*I cannot provide any information about*\"\n     AND gen_ai.completion LIKE \"*end_turn*\"\n   )\n | STATS user_request_count = count() BY gen_ai.user.id\n | WHERE user_request_count >= 3"}],"category":"llm","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"6TYGX5YBrgDVrAfHnIIG","_score":1,"_source":{"author":"Elastic","description":"This hunting query identifies unusual spikes in token usage that may indicate malicious attempts to disrupt services. High token usage can strain system resources and degrade performance, aligning with tactics observed in DoS attacks.\n","integration":["aws_bedrock.invocation"],"uuid":"00023411-192e-4472-90aa-da7562bc3f2a","name":"AWS Bedrock LLM Denial-of-Service or Resource Exhaustion","language":["ES|QL"],"license":"Elastic License v2","notes":["Consider reviewing the context of high token requests to differentiate between legitimate heavy usage and potential abuse. Monitor the source of requests and patterns over time for better assessment.","Ensure logging and monitoring are correctly configured to capture detailed metrics on token usage. This will facilitate accurate detection and allow for a quick response to potential threats.","Collect evidence from logs that detail the timestamp, user ID, session information, and token counts for incidents flagged by this analytic. This information will be crucial for forensic analysis in the event of a security incident."],"mitre":["AML.T0034"],"references":["https://www.elastic.co/security-labs/elastic-advances-llm-security","https://owasp.org/www-project-top-10-for-large-language-model-applications/"],"queries":[{"query":"from logs-aws_bedrock.invocation-*\n | WHERE @timestamp > NOW() - 1 DAY\n   AND (\n     gen_ai.usage.prompt_tokens > 8000 OR\n     gen_ai.usage.completion_tokens > 8000 or\n     gen_ai.performance.request_size > 8000\n   )\n | STATS max_prompt_tokens = max(gen_ai.usage.prompt_tokens),\n         max_request_tokens = max(gen_ai.performance.request_size),\n         max_completion_tokens = max(gen_ai.usage.completion_tokens),\n         request_count = count() BY cloud.account.id\n | WHERE request_count > 1\n | SORT max_prompt_tokens, max_request_tokens, max_completion_tokens DESC\n","indices":["logs-aws_bedrock.invocation-*"],"cleaned_query":"from logs-aws_bedrock.invocation-*\n | WHERE @timestamp > NOW() - 1 DAY\n   AND (\n     gen_ai.usage.prompt_tokens > 8000 OR\n     gen_ai.usage.completion_tokens > 8000 or\n     gen_ai.performance.request_size > 8000\n   )\n | STATS max_prompt_tokens = max(gen_ai.usage.prompt_tokens),\n         max_request_tokens = max(gen_ai.performance.request_size),\n         max_completion_tokens = max(gen_ai.usage.completion_tokens),\n         request_count = count() BY cloud.account.id\n | WHERE request_count > 1\n | SORT max_prompt_tokens, max_request_tokens, max_completion_tokens DESC"}],"category":"llm","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"6jYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This analytic flags multiple instances where large language models (LLMs) are vulnerable to malicious user interactions designed to bypass previous prompts. This can lead to the generation of inappropriate or harmful content, resulting in direct LLM prompt injection.","integration":["aws_bedrock.invocation"],"uuid":"131e5887-463a-46a1-a44e-b96361bc6cbc","name":"AWS Bedrock LLM Ignore Previous Prompt Detection","language":["ES|QL"],"license":"Elastic License v2","notes":["Examine flagged interactions for patterns or anomalies in user requests that may indicate malicious intent to expose LLM vulnerabilities","Regularly review and update the phrases that trigger ignore previous prompt attacks to adapt to new ethical guidelines and compliance requirements.","Ensure that data logs contain enough detail to provide context around the refusal, which will aid in subsequent investigations by security teams."],"mitre":["AML.T0051.000"],"references":["https://www.elastic.co/security-labs/elastic-advances-llm-security","https://github.com/agencyenterprise/PromptInject?tab=readme-ov-file"],"queries":[{"query":"from logs-aws_bedrock.invocation-*\n |EVAL lowercase_prompt = TO_LOWER(gen_ai.prompt) \n |WHERE @timestamp > NOW() - 1 HOUR\n AND( \n    (\n      lowercase_prompt LIKE \"*ignore the above instructions*\" OR \n      lowercase_prompt LIKE \"*ignore instructions*\" OR\n      lowercase_prompt LIKE \"*ignore and print*\" OR\n      lowercase_prompt LIKE \"*ignore and say*\" OR \n      lowercase_prompt LIKE \"*nevermind ignore what i asked*\"\n    )\n     AND to_lower(gen_ai.completion) LIKE \"*end_turn*\"\n   )\n | STATS user_request_count = count(*) BY gen_ai.user.id\n | WHERE user_request_count >= 2\n","indices":["logs-aws_bedrock.invocation-*"],"cleaned_query":"from logs-aws_bedrock.invocation-*\n |EVAL lowercase_prompt = TO_LOWER(gen_ai.prompt) \n |WHERE @timestamp > NOW() - 1 HOUR\n AND( \n    (\n      lowercase_prompt LIKE \"*ignore the above instructions*\" OR \n      lowercase_prompt LIKE \"*ignore instructions*\" OR\n      lowercase_prompt LIKE \"*ignore and print*\" OR\n      lowercase_prompt LIKE \"*ignore and say*\" OR \n      lowercase_prompt LIKE \"*nevermind ignore what i asked*\"\n    )\n     AND to_lower(gen_ai.completion) LIKE \"*end_turn*\"\n   )\n | STATS user_request_count = count(*) BY gen_ai.user.id\n | WHERE user_request_count >= 2"}],"category":"llm","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"6zYGX5YBrgDVrAfHnIIG","_score":1,"_source":{"author":"Elastic","description":"This analytic helps identify delays in LLM responses that are outside expected performance parameters, possibly due to malicious disruptions like DDoS attacks or from operational inefficiencies.\n","integration":["aws_bedrock.invocation"],"uuid":"991b55c3-6327-4af6-8e0c-5d4870748369","name":"AWS Bedrock LLM Latency Anomalies","language":["ES|QL"],"license":"Elastic License v2","notes":["Review the incidents flagged by this analytic to understand the context and potential sources of latency. This can include network configurations, resource allocation, or external network pressures.","Effective logging and monitoring setup are essential to capture relevant latency metrics accurately. Ensure system clocks and time syncing are properly configured to avoid false positives.","Gather comprehensive logs that detail the request and response timestamps, user IDs, and session details for thorough investigation and evidence collection in case of security incidents."],"mitre":["AML.T0029"],"references":["https://www.elastic.co/security-labs/elastic-advances-llm-security","https://owasp.org/www-project-top-10-for-large-language-model-applications/"],"queries":[{"query":"from logs-aws_bedrock.invocation-*\n  | WHERE @timestamp > NOW() - 1 DAY\n  | EVAL response_delay_seconds = gen_ai.performance.start_response_time / 1000\n  | WHERE response_delay_seconds > 5\n  | STATS max_response_delay = max(response_delay_seconds),\n          request_count = count() BY gen_ai.user.id\n  | WHERE request_count > 3\n  | SORT max_response_delay DESC\n","indices":["logs-aws_bedrock.invocation-*"],"cleaned_query":"from logs-aws_bedrock.invocation-*\n  | WHERE @timestamp > NOW() - 1 DAY\n  | EVAL response_delay_seconds = gen_ai.performance.start_response_time / 1000\n  | WHERE response_delay_seconds > 5\n  | STATS max_response_delay = max(response_delay_seconds),\n          request_count = count() BY gen_ai.user.id\n  | WHERE request_count > 3\n  | SORT max_response_delay DESC"}],"category":"llm","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"7DYGX5YBrgDVrAfHnIIG","_score":1,"_source":{"author":"Elastic","description":"This hunt aggregates by process ID and destination IP by the number of connections per hour over a period of time greater than a defined threshold. This may indicate suspicious network connections by unsigned Mach-O binaries.\n","integration":["endpoint"],"uuid":"dc04d70a-80aa-4c3f-ad02-2b18d54af6d4","name":"Suspicious Network Connections by Unsigned Mach-O","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt returns a list of processes by entity_id and name that have a high number of connections per hour over a period of time greater than a defined threshold.","Pivoting by `process.entity_id` will allow further investigation (parent process, hash, child processes, other network events etc.)."],"mitre":["T1071"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"macos\" and event.category == \"network\" and\n  (process.code_signature.exists == false or process.code_signature.trusted != true) and\n  /* excluding private IP ranges */\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp\n /* calc total duration, total MB out, and the number of connections per hour */\n| stats total_bytes_out = sum(source.bytes), count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), MB_out=TO_DOUBLE(total_bytes_out) / (1024*1024), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.entity_id, process.name, duration_hours, destination.address, MB_out, count_connections, number_of_con_per_hour\n/* threshold is set to 120 connections per minute, you can adjust it to your env/FP rate */\n| where duration_hours >= 8 and number_of_con_per_hour >= 120\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"macos\" and event.category == \"network\" and\n  (process.code_signature.exists == false or process.code_signature.trusted != true) and\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp\n| stats total_bytes_out = sum(source.bytes), count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), MB_out=TO_DOUBLE(total_bytes_out) / (1024*1024), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.entity_id, process.name, duration_hours, destination.address, MB_out, count_connections, number_of_con_per_hour\n| where duration_hours >= 8 and number_of_con_per_hour >= 120"}],"category":"macos","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"7TYGX5YBrgDVrAfHnIIG","_score":1,"_source":{"author":"Elastic","description":"This hunt looks for persistence via Launch agent or daemon where the distribution is limited to one unique host.\n","integration":["endpoint"],"uuid":"69fc4f40-8fb1-4652-99b7-52755cd370fe","name":"Low Occurrence of Suspicious Launch Agent or Launch Daemon","language":["ES|QL"],"license":"Elastic License v2","notes":["Further investigation can done pivoting by `Persistence.name` and `args`."],"mitre":["T1547","T1547.011","T1543","T1543.001","T1543.004"],"references":[],"queries":[{"query":"from logs-endpoint.events.file-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"macos\" and event.category == \"file\" and event.action == \"launch_daemon\" and\n  (Persistence.runatload == true or Persistence.keepalive == true) and process.executable is not null\n| eval args = MV_CONCAT(Persistence.args, \",\")\n /* normalizing users home profile */\n| eval args = replace(args, \"\"\"/Users/[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+/\"\"\", \"/Users/user/\")\n| stats agents = count_distinct(host.id), total = count(*) by process.name, Persistence.name, args\n| where starts_with(args, \"/\") and agents == 1 and total == 1\n","indices":["logs-endpoint.events.file-*"],"cleaned_query":"from logs-endpoint.events.file-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"macos\" and event.category == \"file\" and event.action == \"launch_daemon\" and\n  (Persistence.runatload == true or Persistence.keepalive == true) and process.executable is not null\n| eval args = MV_CONCAT(Persistence.args, \",\")\n| eval args = replace(args, \"\"\"/Users/[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+/\"\"\", \"/Users/user/\")\n| stats agents = count_distinct(host.id), total = count(*) by process.name, Persistence.name, args\n| where starts_with(args, \"/\") and agents == 1 and total == 1"}],"category":"macos","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"7jYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers evidence of Azure Entra authentication attempts from hosting service providers that are often abused by adversaries. By identifying authentication attempts from these sources, security teams can detect potential unauthorized access or malicious activities within their Azure environment.\n","integration":["azure"],"uuid":"d27f1da8-eec6-11ef-983a-f661ea17fbce","name":"Azure Entra Authentication Attempts from Abused Hosting Service Providers","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `azure.signinlogs.properties.authentication_protocol` to determine the authentication method used.","Device Code Flow authentication is particularly suspicious for non-kiosk, non-IoT devices.","Analyze `source.as.organization.name` to identify if the authentication originated from a known hosting provider, VPN, or anonymization service you are not expecting","Investigate `source.address` to determine if the IP address has been previously flagged for suspicious activity.","Pivot on `azure.signinlogs.properties.user_principal_name` to check for additional authentication attempts from different IPs, ASNs, or unusual geolocations.","Correlate findings with `azure.signinlogs.properties.authentication_processing_details` to check if legacy protocols, token replay, or bypass mechanisms were involved.","Look for associated Conditional Access policy decisions in `azure.signinlogs.properties.applied_conditional_access_policies` to determine if the authentication attempt was blocked or allowed.","Check `azure.signinlogs.properties.device_detail.browser` to see if the user agent is consistent with expected authentication patterns.","If authentication was successful, investigate any subsequent suspicious activity linked to the same user session."],"mitre":["T1078.004"],"references":["https://www.volexity.com/blog/2025/02/13/multiple-russian-threat-actors-targeting-microsoft-device-code-authentication/","https://www.blackhillsinfosec.com/dynamic-device-code-phishing/"],"queries":[{"query":"FROM logs-azure.signinlogs-*\n\n// query Azure Entra Sign-in logs\n| WHERE @timestamp > now() - 14 day\n| WHERE\n    event.dataset in (\"azure.signinlogs\") and\n\n    // filter for authentication events\n    event.category == \"authentication\" and\n\n    // filter for specific ASN organizations that are often abused\n    source.as.organization.name in (\n        \"DigitalOcean\", \"Linode\", \"Vultr\", \"Hetzner\", \"OVH\",\n        \"Contabo\", \"Leaseweb\", \"G-Core Labs\", \"Scaleway\", \"Kamatera\",\n        \"Shinjiru\", \"M247\", \"Packet Host\", \"InterServer\", \"DataPacket\",\n        \"Choopa\", \"Path Network\", \"DediPath\", \"Maxided\", \"Quasi Networks\",\n        \"FlokiNET\", \"Njalla\", \"AbeloHost\", \"Inferno Solutions\", \"Hostinger\",\n        \"Hostwinds\", \"1&1 IONOS\", \"DreamHost\", \"A2 Hosting\", \"Bluehost\",\n        \"Namecheap Hosting\", \"FastComet\", \"InMotion Hosting\", \"SiteGround\", \"GreenGeeks\",\n        \"Liquid Web\", \"Hurricane Electric\", \"Ubiquity Hosting\", \"Snel.com\", \"Coresite\",\n        \"Eonix\", \"WebNX\", \"SharkTech\", \"Hivelocity\", \"Zenlayer\",\n        \"RapidSeedbox\", \"SeFlow\", \"Nexeon Technologies\", \"NextArray\", \"Zare\",\n        \"Clouvider\", \"TimeWeb\", \"YISP\", \"StackPath\", \"LuxVPS\",\n        \"Terrahost\", \"IP Volume\", \"RackNerd\", \"ServerMania\", \"HostEurope\",\n        \"HostHatch\", \"HostUS\", \"Cloudsigma\", \"QuadraNet\", \"CIV Host\",\n        \"Swiftway\", \"King Servers\", \"BeeHost\", \"Webzilla\", \"Flokinet\",\n        \"Alexhost\", \"DDoS-Guard\", \"StormWall\", \"Yokohama Networks\", \"DataGroup\",\n        \"GSL Networks\", \"MyLoc\", \"Hostlife\", \"Reprise Hosting\", \"GTT Communications\",\n        \"Telia\", \"Cogent Communications\", \"NForce\", \"Ecatel\", \"Novogara\",\n        \"CyberBunker\", \"DarkFiber\", \"Exoscale\", \"QHoster\", \"ServDiscount\",\n        \"Krypt\", \"Wowrack\", \"XLHost\", \"OVHCloud\", \"Privex\",\n        \"GreencloudVPS\", \"RamNode\", \"BuyVM\", \"LiteServer\", \"Host1Plus\",\n        \"EdgeUno\", \"CloudSouth\", \"IOFlood\", \"Hostry\", \"MivoCloud\",\n        \"CloudCone\", \"SwiftNode\", \"Flaunt7\", \"Infinitie Networks\", \"ServerHub\",\n        \"Verpex Hosting\", \"W3Space\", \"HostPapa\", \"Storm Internet\", \"WP Engine\",\n        \"Kinsta\", \"Fly.io\", \"Edgecast\", \"RocketNode\", \"CloudAtCost\",\n        \"Gullo's Hosting\", \"Serverion\", \"XHostFire\", \"Interserver\", \"DediServe\",\n        \"HostRound\", \"VPSServer\", \"HostMantis\", \"RapidSwitch\", \"Tiggee LLC\",\n        \"LogicWeb\", \"VPSCheap\", \"Versaweb\", \"SecureDragon\", \"ServerAstra\",\n        \"HostNeverDie\", \"CloudSigma\", \"IONOS Cloud\", \"StackClash\", \"ProtonVPN\",\n        \"NordVPN\", \"Mullvad VPN\", \"ExpressVPN\", \"Surfshark\", \"Private Internet Access\",\n        \"TorGuard\", \"VyprVPN\", \"Windscribe VPN\", \"iVPN\", \"Perfect Privacy\",\n        \"Astrill VPN\", \"TunnelBear\", \"CyberGhost VPN\", \"PureVPN\", \"Hotspot Shield\",\n        \"StrongVPN\", \"F-Secure VPN\", \"IVPN\", \"ZoogVPN\", \"SwitchVPN\",\n        \"AirVPN\", \"Buffered VPN\", \"SecureVPN\", \"RiseupVPN\", \"Betternet\",\n        \"Trust.Zone VPN\", \"OneVPN\", \"VeePN\", \"Speedify VPN\", \"VPN Unlimited\",\n        \"Anonine VPN\", \"X-VPN\", \"Hidemyass VPN\", \"ProXPN\", \"VPNArea\",\n        \"AceVPN\", \"IPVanish\", \"Bitmask VPN\", \"BolehVPN\", \"AnonVPN\",\n        \"Librem One VPN\", \"BlackVPN\", \"Cloudflare Warp VPN\", \"Torguard VPN\", \"VPN.ht\"\n    )\n\n// aggregate authentication attempts by tenant, user principal name, authentication protocol, category, ASN organization name, and source address\n| STATS asn_count = count(*) by\n    azure.tenant_id,\n    azure.signinlogs.properties.user_principal_name,\n    azure.signinlogs.properties.authentication_protocol,\n    azure.signinlogs.category,\n    source.as.organization.name,\n    source.address\n","indices":["logs-azure.signinlogs-*"],"cleaned_query":"FROM logs-azure.signinlogs-*\n| WHERE @timestamp > now() - 14 day\n| WHERE\n    event.dataset in (\"azure.signinlogs\") and\n    event.category == \"authentication\" and\n    source.as.organization.name in (\n        \"DigitalOcean\", \"Linode\", \"Vultr\", \"Hetzner\", \"OVH\",\n        \"Contabo\", \"Leaseweb\", \"G-Core Labs\", \"Scaleway\", \"Kamatera\",\n        \"Shinjiru\", \"M247\", \"Packet Host\", \"InterServer\", \"DataPacket\",\n        \"Choopa\", \"Path Network\", \"DediPath\", \"Maxided\", \"Quasi Networks\",\n        \"FlokiNET\", \"Njalla\", \"AbeloHost\", \"Inferno Solutions\", \"Hostinger\",\n        \"Hostwinds\", \"1&1 IONOS\", \"DreamHost\", \"A2 Hosting\", \"Bluehost\",\n        \"Namecheap Hosting\", \"FastComet\", \"InMotion Hosting\", \"SiteGround\", \"GreenGeeks\",\n        \"Liquid Web\", \"Hurricane Electric\", \"Ubiquity Hosting\", \"Snel.com\", \"Coresite\",\n        \"Eonix\", \"WebNX\", \"SharkTech\", \"Hivelocity\", \"Zenlayer\",\n        \"RapidSeedbox\", \"SeFlow\", \"Nexeon Technologies\", \"NextArray\", \"Zare\",\n        \"Clouvider\", \"TimeWeb\", \"YISP\", \"StackPath\", \"LuxVPS\",\n        \"Terrahost\", \"IP Volume\", \"RackNerd\", \"ServerMania\", \"HostEurope\",\n        \"HostHatch\", \"HostUS\", \"Cloudsigma\", \"QuadraNet\", \"CIV Host\",\n        \"Swiftway\", \"King Servers\", \"BeeHost\", \"Webzilla\", \"Flokinet\",\n        \"Alexhost\", \"DDoS-Guard\", \"StormWall\", \"Yokohama Networks\", \"DataGroup\",\n        \"GSL Networks\", \"MyLoc\", \"Hostlife\", \"Reprise Hosting\", \"GTT Communications\",\n        \"Telia\", \"Cogent Communications\", \"NForce\", \"Ecatel\", \"Novogara\",\n        \"CyberBunker\", \"DarkFiber\", \"Exoscale\", \"QHoster\", \"ServDiscount\",\n        \"Krypt\", \"Wowrack\", \"XLHost\", \"OVHCloud\", \"Privex\",\n        \"GreencloudVPS\", \"RamNode\", \"BuyVM\", \"LiteServer\", \"Host1Plus\",\n        \"EdgeUno\", \"CloudSouth\", \"IOFlood\", \"Hostry\", \"MivoCloud\",\n        \"CloudCone\", \"SwiftNode\", \"Flaunt7\", \"Infinitie Networks\", \"ServerHub\",\n        \"Verpex Hosting\", \"W3Space\", \"HostPapa\", \"Storm Internet\", \"WP Engine\",\n        \"Kinsta\", \"Fly.io\", \"Edgecast\", \"RocketNode\", \"CloudAtCost\",\n        \"Gullo's Hosting\", \"Serverion\", \"XHostFire\", \"Interserver\", \"DediServe\",\n        \"HostRound\", \"VPSServer\", \"HostMantis\", \"RapidSwitch\", \"Tiggee LLC\",\n        \"LogicWeb\", \"VPSCheap\", \"Versaweb\", \"SecureDragon\", \"ServerAstra\",\n        \"HostNeverDie\", \"CloudSigma\", \"IONOS Cloud\", \"StackClash\", \"ProtonVPN\",\n        \"NordVPN\", \"Mullvad VPN\", \"ExpressVPN\", \"Surfshark\", \"Private Internet Access\",\n        \"TorGuard\", \"VyprVPN\", \"Windscribe VPN\", \"iVPN\", \"Perfect Privacy\",\n        \"Astrill VPN\", \"TunnelBear\", \"CyberGhost VPN\", \"PureVPN\", \"Hotspot Shield\",\n        \"StrongVPN\", \"F-Secure VPN\", \"IVPN\", \"ZoogVPN\", \"SwitchVPN\",\n        \"AirVPN\", \"Buffered VPN\", \"SecureVPN\", \"RiseupVPN\", \"Betternet\",\n        \"Trust.Zone VPN\", \"OneVPN\", \"VeePN\", \"Speedify VPN\", \"VPN Unlimited\",\n        \"Anonine VPN\", \"X-VPN\", \"Hidemyass VPN\", \"ProXPN\", \"VPNArea\",\n        \"AceVPN\", \"IPVanish\", \"Bitmask VPN\", \"BolehVPN\", \"AnonVPN\",\n        \"Librem One VPN\", \"BlackVPN\", \"Cloudflare Warp VPN\", \"Torguard VPN\", \"VPN.ht\"\n    )\n| STATS asn_count = count(*) by\n    azure.tenant_id,\n    azure.signinlogs.properties.user_principal_name,\n    azure.signinlogs.properties.authentication_protocol,\n    azure.signinlogs.category,\n    source.as.organization.name,\n    source.address"}],"category":"azure","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"7zYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword","notes.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers evidence of failed authentication attempts in Azure Entra ID where unusual user agents are used. Adversaries may use tools like FastHTTP to conduct brute force attacks against Azure Entra ID user accounts. FastHTTP is a high-performance HTTP client optimized for speed and efficiency, making it a popular choice for password spraying attacks. By identifying failed authentication attempts behind rare user agents, security teams can detect and respond to unauthorized access attempts in Azure Entra ID.\n","integration":["azure"],"uuid":"3f26f262-fe14-11ef-9ee5-f661ea17fbcd","name":"Azure Entra Unusual Failed Authentication Attempts Behind Rare User Agents","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `azure.signinlogs.properties.authentication_protocol` to verify the authentication method used. Non-interactive SFA is typically reserved for automated processes or legacy authentication methods.","Review `azure.signinlogs.properties.error_code` to identify the specific error codes associated with the failed authentication attempts. Common error codes include `50053` for account lockouts, `50126` for invalid credentials, and `50055` for expired passwords.","Investigate `azure.signinlogs.properties.user_principal_name` to determine whether the user typically authenticates using SFA. Unusual use by regular accounts may indicate compromise.","Analyze `source.as.organization.name` to determine if the request originated from a known hosting provider, VPN, or anonymization service that is unexpected in your environment.","Examine `source.address` to check if the IP address is associated with previous suspicious activity, high-risk geolocations, or known threat infrastructure.","Pivot on `azure.signinlogs.properties.user_principal_name` to identify any other high-risk activities within the same session.","Correlate findings with `azure.signinlogs.properties.authentication_processing_details` to identify possible legacy protocol usage, token replay, permission scopes or bypass mechanisms.","Review `user_agent.original` to identify the user agent used in the authentication request. Determine if this user agent is expected in your environment or if it is associated with known malicious activity."],"mitre":["T1078.004","T1110.003"],"references":["https://securityscorecard.com/wp-content/uploads/2025/02/MassiveBotnet-Report_022125_03.pdf"],"queries":[{"query":"from logs-azure.signinlogs*\n| where @timestamp > now() - 14 day\n| keep\n    @timestamp,\n    event.dataset,\n    event.category,\n    azure.signinlogs.properties.authentication_requirement,\n    azure.signinlogs.properties.status.error_code,\n    azure.signinlogs.properties.app_id,\n    source.as.organization.name,\n    user_agent.original,\n    azure.signinlogs.category,\n    event.outcome,\n    azure.signinlogs.properties.user_principal_name,\n    source.ip\n| WHERE\n    event.dataset == \"azure.signinlogs\"\n    and event.category == \"authentication\"\n    and source.as.organization.name != \"MICROSOFT-CORP-MSN-AS-BLOCK\"\n    and event.outcome != \"success\"\n    and azure.signinlogs.properties.status.error_code in (50053, 50126, 50055, 50056, 50064, 50144)\n    and (\n        to_lower(user_agent.original) LIKE \"%go-http-client/1.1%\" or\n        to_lower(user_agent.original) LIKE \"%fasthttp%\" or\n        to_lower(user_agent.original) LIKE \"%python%\" or\n        to_lower(user_agent.original) LIKE \"%curl%\" or\n        to_lower(user_agent.original) LIKE \"%wget%\" or\n        to_lower(user_agent.original) LIKE \"%httpclient%\" or\n        to_lower(user_agent.original) LIKE \"%postmanruntime%\" or\n        to_lower(user_agent.original) LIKE \"%headlesschrome%\" or\n        to_lower(user_agent.original) LIKE \"%phantomjs%\" or\n        to_lower(user_agent.original) LIKE \"%selenium%\" or\n        to_lower(user_agent.original) LIKE \"%okhttp%\" or\n        to_lower(user_agent.original) LIKE \"%scrapy%\" or\n        to_lower(user_agent.original) LIKE \"%hydra%\" or\n        to_lower(user_agent.original) LIKE \"%patator%\" or\n        to_lower(user_agent.original) LIKE \"%metasploit%\" or\n        to_lower(user_agent.original) LIKE \"%curio%\" or\n        to_lower(user_agent.original) LIKE \"%hyper%\" or\n        to_lower(user_agent.original) LIKE \"%kali%\" or\n        to_lower(user_agent.original) LIKE \"%hydra%\" or\n    )\n// count the number of unique user login attempts\n| stats\n    unique_user_app_login_count = count(*) by\n        azure.signinlogs.properties.user_principal_name,\n        azure.signinlogs.properties.authentication_requirement,\n        azure.signinlogs.properties.app_id\n| sort unique_user_app_login_count asc\n","indices":["logs-azure.signinlogs*"],"cleaned_query":"from logs-azure.signinlogs*\n| where @timestamp > now() - 14 day\n| keep\n    @timestamp,\n    event.dataset,\n    event.category,\n    azure.signinlogs.properties.authentication_requirement,\n    azure.signinlogs.properties.status.error_code,\n    azure.signinlogs.properties.app_id,\n    source.as.organization.name,\n    user_agent.original,\n    azure.signinlogs.category,\n    event.outcome,\n    azure.signinlogs.properties.user_principal_name,\n    source.ip\n| WHERE\n    event.dataset == \"azure.signinlogs\"\n    and event.category == \"authentication\"\n    and source.as.organization.name != \"MICROSOFT-CORP-MSN-AS-BLOCK\"\n    and event.outcome != \"success\"\n    and azure.signinlogs.properties.status.error_code in (50053, 50126, 50055, 50056, 50064, 50144)\n    and (\n        to_lower(user_agent.original) LIKE \"%go-http-client/1.1%\" or\n        to_lower(user_agent.original) LIKE \"%fasthttp%\" or\n        to_lower(user_agent.original) LIKE \"%python%\" or\n        to_lower(user_agent.original) LIKE \"%curl%\" or\n        to_lower(user_agent.original) LIKE \"%wget%\" or\n        to_lower(user_agent.original) LIKE \"%httpclient%\" or\n        to_lower(user_agent.original) LIKE \"%postmanruntime%\" or\n        to_lower(user_agent.original) LIKE \"%headlesschrome%\" or\n        to_lower(user_agent.original) LIKE \"%phantomjs%\" or\n        to_lower(user_agent.original) LIKE \"%selenium%\" or\n        to_lower(user_agent.original) LIKE \"%okhttp%\" or\n        to_lower(user_agent.original) LIKE \"%scrapy%\" or\n        to_lower(user_agent.original) LIKE \"%hydra%\" or\n        to_lower(user_agent.original) LIKE \"%patator%\" or\n        to_lower(user_agent.original) LIKE \"%metasploit%\" or\n        to_lower(user_agent.original) LIKE \"%curio%\" or\n        to_lower(user_agent.original) LIKE \"%hyper%\" or\n        to_lower(user_agent.original) LIKE \"%kali%\" or\n        to_lower(user_agent.original) LIKE \"%hydra%\" or\n    )\n| stats\n    unique_user_app_login_count = count(*) by\n        azure.signinlogs.properties.user_principal_name,\n        azure.signinlogs.properties.authentication_requirement,\n        azure.signinlogs.properties.app_id\n| sort unique_user_app_login_count asc"}],"category":"azure","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"8DYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword","notes.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers evidence of Azure Entra sign-in attempts on-behalf-of a user with an unusual client app. During brute-forcing attempts, adversaries may use a custom or Azure-managed app ID to authenticate on-behalf-of a user. This is a rare event and may indicate an attempt to bypass conditional access policies (CAP) and multi-factor authentication (MFA) requirements. The app ID specified may not be commonly used by the user based on their historical sign-in activity.\n","integration":["azure"],"uuid":"ce47ec2c-fe13-11ef-9ee5-f661ea17fbcd","name":"Azure Entra Unusual Client App Authentication Requests on Behalf of Principal Users","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `azure.signinlogs.properties.authentication_protocol` to verify the authentication method used. Non-interactive SFA is typically reserved for automated processes or legacy authentication methods.","Review `azure.signinlogs.properties.error_code` to identify the specific error codes associated with the failed authentication attempts. Common error codes include `50053` for account lockouts, `50126` for invalid credentials, and `50055` for expired passwords.","Investigate `azure.signinlogs.properties.user_principal_name` to determine whether the user typically authenticates using SFA. Unusual use by regular accounts may indicate compromise.","Analyze `source.as.organization.name` to determine if the request originated from a known hosting provider, VPN, or anonymization service that is unexpected in your environment.","Examine `source.address` to check if the IP address is associated with previous suspicious activity, high-risk geolocations, or known threat infrastructure.","Pivot on `azure.signinlogs.properties.user_principal_name` to identify any other high-risk activities within the same session.","Correlate findings with `azure.signinlogs.properties.authentication_processing_details` to identify possible legacy protocol usage, token replay, permission scopes or bypass mechanisms."],"mitre":["T1078.004","T1110.003"],"references":["https://securityscorecard.com/wp-content/uploads/2025/02/MassiveBotnet-Report_022125_03.pdf"],"queries":[{"query":"from logs-azure.signinlogs*\n| where @timestamp > now() - 14 day\n| keep\n    @timestamp,\n    event.dataset,\n    event.category,\n    azure.signinlogs.properties.app_display_name,\n    azure.signinlogs.properties.app_id,\n    azure.signinlogs.properties.user_principal_name,\n    azure.signinlogs.properties.status.error_code,\n    azure.signinlogs.category,\n    source.as.organization.name,\n    event.outcome,\n    source.ip\n| WHERE\n    // filter for failed sign-in logs related to invalid username or password\n    event.dataset == \"azure.signinlogs\"\n    and event.category == \"authentication\"\n    and event.outcome != \"success\"\n    and azure.signinlogs.properties.status.error_code in (50053, 50126, 50055, 50056, 50064, 50144)\n    and source.as.organization.name != \"MICROSOFT-CORP-MSN-AS-BLOCK\"\n// aggregate the number of failed sign-in attempts by user and app ID reported\n| stats\n    auth_via_app_count = count(*) by\n    azure.signinlogs.properties.user_principal_name,\n    azure.signinlogs.properties.app_display_name,\n    azure.signinlogs.properties.app_id\n// filter for users with less than or equal to 3 failed sign-in attempts per app\n| where auth_via_app_count <= 3\n| sort auth_via_app_count asc\n","indices":["logs-azure.signinlogs*"],"cleaned_query":"from logs-azure.signinlogs*\n| where @timestamp > now() - 14 day\n| keep\n    @timestamp,\n    event.dataset,\n    event.category,\n    azure.signinlogs.properties.app_display_name,\n    azure.signinlogs.properties.app_id,\n    azure.signinlogs.properties.user_principal_name,\n    azure.signinlogs.properties.status.error_code,\n    azure.signinlogs.category,\n    source.as.organization.name,\n    event.outcome,\n    source.ip\n| WHERE\n    event.dataset == \"azure.signinlogs\"\n    and event.category == \"authentication\"\n    and event.outcome != \"success\"\n    and azure.signinlogs.properties.status.error_code in (50053, 50126, 50055, 50056, 50064, 50144)\n    and source.as.organization.name != \"MICROSOFT-CORP-MSN-AS-BLOCK\"\n| stats\n    auth_via_app_count = count(*) by\n    azure.signinlogs.properties.user_principal_name,\n    azure.signinlogs.properties.app_display_name,\n    azure.signinlogs.properties.app_id\n| where auth_via_app_count <= 3\n| sort auth_via_app_count asc"}],"category":"azure","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"8TYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies Azure Entra sign-in logs where the authentication method used was Device Code Flow, which is often used for kiosk or IoT devices. If this authentication method is observed from a user or device that does not typically use it, it may indicate a potential compromise. This technique is common by adversaries conducting phishing campaigns with pre-registered device codes sent to targeted users whom are then redirected to Microsoft's device code authentication endpoint to initiation the workflow. The query filters for unusual authentication attempts based on the user principal name and the source address.\n","integration":["azure"],"uuid":"b54528ca-eec8-11ef-b314-f661ea17fbce","name":"Azure Entra Device Code Authentication from Unusual Principal","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `azure.signinlogs.properties.authentication_protocol` to verify the authentication method used. Device Code Flow is typically reserved for IoT, kiosk, or embedded devices.","Investigate `azure.signinlogs.properties.user_principal_name` to determine whether the user typically authenticates using Device Code Flow. Unusual use by regular accounts may indicate compromise.","Analyze `source.as.organization.name` to determine if the request originated from a known hosting provider, VPN, or anonymization service that is unexpected in your environment.","Examine `source.address` to check if the IP address is associated with previous suspicious activity, high-risk geolocations, or known threat infrastructure.","Pivot on `azure.signinlogs.properties.original_transfer_method` to identify if the Device Code Flow was used in combination with refresh tokens, which may indicate session hijacking.","Correlate findings with `azure.signinlogs.properties.authentication_processing_details` to identify possible legacy protocol usage, token replay, or bypass mechanisms.","Review `azure.signinlogs.properties.applied_conditional_access_policies` to determine if Conditional Access rules were applied, bypassed, or enforced during authentication.","Check `azure.signinlogs.properties.device_detail.browser` and `user_agent.original` to verify if the user agent aligns with expected authentication behavior for this user or device type.","If authentication was successful, pivot on `azure.signinlogs.properties.user_principal_name` to check for additional high-risk activities within the same session.","Monitor for multiple authentication attempts within a short period from different IPs or ASNs, which may indicate adversarial testing or phishing-based compromise."],"mitre":["T1078.004","T1528"],"references":[],"queries":[{"query":"FROM logs-azure.signinlogs-*\n\n// query Azure Entra Sign-in logs\n| WHERE @timestamp > now() - 14 day\n| WHERE event.dataset in (\"azure.signinlogs\")\n    and event.category == \"authentication\"\n\n    // filter for device code workflows\n    // original transfer method indicates refresh tokens where device code was originally used\n    and (\n        azure.signinlogs.properties.authentication_protocol == \"deviceCode\" or\n        azure.signinlogs.properties.original_transfer_method == \"Device code flow\"\n    )\n\n// bucket authentication attempts by each day\n| EVAL target_time_window = DATE_TRUNC(1 days, @timestamp)\n\n// aggregate authentication attempts by user principal name, source address, and message\n| STATS\n    auth_count = count(*) by\n        target_time_window,\n        azure.signinlogs.properties.user_principal_name,\n        source.address,\n        message\n\n// filter further for low auth counts by a particular principal name\n// indicating device code auth workflows are unusual for this user\n| WHERE auth_count < 5\n","indices":["logs-azure.signinlogs-*"],"cleaned_query":"FROM logs-azure.signinlogs-*\n| WHERE @timestamp > now() - 14 day\n| WHERE event.dataset in (\"azure.signinlogs\")\n    and event.category == \"authentication\"\n    and (\n        azure.signinlogs.properties.authentication_protocol == \"deviceCode\" or\n        azure.signinlogs.properties.original_transfer_method == \"Device code flow\"\n    )\n| EVAL target_time_window = DATE_TRUNC(1 days, @timestamp)\n| STATS\n    auth_count = count(*) by\n        target_time_window,\n        azure.signinlogs.properties.user_principal_name,\n        source.address,\n        message\n| WHERE auth_count < 5"}],"category":"azure","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"8jYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword","notes.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers evidence of password spraying attempts against Azure Entra ID user accounts by detecting a high number of failed non-interactive single-factor authentication (SFA) login attempts within a 10-minute window. Attackers may attempt to brute force user accounts to gain unauthorized access to Azure Entra ID services or validate compromised credentials. Non-interactive SFA login attempts bypass conditional-access policies (CAP) and multi-factor authentication (MFA) requirements, making them a high-risk vector for unauthorized access. Adversaries may attempt this to identify which accounts are still valid from acquired credentials via phishing, infostealers, or other means.\n","integration":["azure"],"uuid":"a9281116-fde0-11ef-9ee5-f661ea17fbcd","name":"Azure Entra Excessive Single-Factor Non-Interactive Sign-Ins","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `azure.signinlogs.properties.authentication_protocol` to verify the authentication method used. Non-interactive SFA is typically reserved for automated processes or legacy authentication methods.","Review `azure.signinlogs.properties.error_code` to identify the specific error codes associated with the failed authentication attempts. Common error codes include `50053` for account lockouts, `50126` for invalid credentials, and `50055` for expired passwords.","Investigate `azure.signinlogs.properties.user_principal_name` to determine whether the user typically authenticates using SFA. Unusual use by regular accounts may indicate compromise.","Analyze `source.as.organization.name` to determine if the request originated from a known hosting provider, VPN, or anonymization service that is unexpected in your environment.","Examine `source.address` to check if the IP address is associated with previous suspicious activity, high-risk geolocations, or known threat infrastructure.","Pivot on `azure.signinlogs.properties.user_principal_name` to identify any other high-risk activities within the same session.","Correlate findings with `azure.signinlogs.properties.authentication_processing_details` to identify possible legacy protocol usage, token replay, permission scopes or bypass mechanisms."],"mitre":["T1078.004","T1110.003"],"references":["https://securityscorecard.com/wp-content/uploads/2025/02/MassiveBotnet-Report_022125_03.pdf"],"queries":[{"query":"from logs-azure.signinlogs*\n| where @timestamp > now() - 14 day\n| keep\n    @timestamp,\n    event.dataset,\n    event.category,\n    azure.signinlogs.properties.is_interactive,\n    azure.signinlogs.properties.authentication_requirement,\n    azure.signinlogs.properties.resource_display_name,\n    azure.signinlogs.properties.status.error_code,\n    source.as.organization.name,\n    azure.signinlogs.category,\n    event.outcome,\n    azure.signinlogs.properties.user_principal_name,\n    source.ip\n// truncate the timestamp to a 10-minute window\n| eval target_time_window = DATE_TRUNC(10 minutes, @timestamp)\n| WHERE\n  event.dataset == \"azure.signinlogs\"\n  and event.category == \"authentication\"\n  and azure.signinlogs.properties.is_interactive == false\n  and azure.signinlogs.properties.authentication_requirement == \"singleFactorAuthentication\"\n  and source.as.organization.name != \"MICROSOFT-CORP-MSN-AS-BLOCK\"\n  and event.outcome != \"success\"\n  and azure.signinlogs.properties.status.error_code in (50053, 50126, 50055, 50056, 50064, 50144)\n// count the number of unique user login attempts\n| stats\n    unique_user_login_count = count_distinct(azure.signinlogs.properties.user_principal_name) by target_time_window, azure.signinlogs.properties.status.error_code\n// filter for >= 30 failed SFA auth attempts with the same error codes\n| where unique_user_login_count >= 30\n","indices":["logs-azure.signinlogs*"],"cleaned_query":"from logs-azure.signinlogs*\n| where @timestamp > now() - 14 day\n| keep\n    @timestamp,\n    event.dataset,\n    event.category,\n    azure.signinlogs.properties.is_interactive,\n    azure.signinlogs.properties.authentication_requirement,\n    azure.signinlogs.properties.resource_display_name,\n    azure.signinlogs.properties.status.error_code,\n    source.as.organization.name,\n    azure.signinlogs.category,\n    event.outcome,\n    azure.signinlogs.properties.user_principal_name,\n    source.ip\n| eval target_time_window = DATE_TRUNC(10 minutes, @timestamp)\n| WHERE\n  event.dataset == \"azure.signinlogs\"\n  and event.category == \"authentication\"\n  and azure.signinlogs.properties.is_interactive == false\n  and azure.signinlogs.properties.authentication_requirement == \"singleFactorAuthentication\"\n  and source.as.organization.name != \"MICROSOFT-CORP-MSN-AS-BLOCK\"\n  and event.outcome != \"success\"\n  and azure.signinlogs.properties.status.error_code in (50053, 50126, 50055, 50056, 50064, 50144)\n| stats\n    unique_user_login_count = count_distinct(azure.signinlogs.properties.user_principal_name) by target_time_window, azure.signinlogs.properties.status.error_code\n| where unique_user_login_count >= 30"}],"category":"azure","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"8zYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies drivers loaded with low occurrence frequency on Linux systems. It monitors for the loading of kernel modules (drivers) that have only been seen once across a single host within a year. Such activity can indicate the presence of rare or potentially malicious drivers.\n","integration":["endpoint"],"uuid":"e1f59c9a-7a2a-4eb8-a524-97b16a041a4a","name":"Drivers Load with Low Occurrence Frequency","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors for kernel modules loaded with syscall 'init_module' or 'finit_module', indicating driver load events.","Counts the occurrence of each driver across all hosts and identifies those seen only once on a single host within the past year.","Such rare driver loads can indicate potentially malicious activity or the presence of uncommon drivers."],"mitre":["T1547.006","T1069.002"],"references":[],"queries":[{"query":"from logs-auditd_manager.auditd-*, logs-auditd.log-*, auditbeat-*\n| keep @timestamp, host.os.type, event.category, event.action, auditd.data.syscall, auditd.data.name, process.executable, process.name, agent.id\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.category == \"driver\" and event.action == \"loaded-kernel-module\" and auditd.data.syscall in (\"init_module\", \"finit_module\")\n// Process name is different from executable in some cases\n| stats agent_count = count_distinct(agent.id), total_count = count(*) by auditd.data.name, process.executable, process.name\n// Alter this threshold to make sense for your environment\n| where agent_count == 1 and total_count <= 3\n| limit 100\n| sort auditd.data.name asc\n","indices":["logs-auditd_manager.auditd-*","logs-auditd.log-*","auditbeat-*"],"cleaned_query":"from logs-auditd_manager.auditd-*, logs-auditd.log-*, auditbeat-*\n| keep @timestamp, host.os.type, event.category, event.action, auditd.data.syscall, auditd.data.name, process.executable, process.name, agent.id\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.category == \"driver\" and event.action == \"loaded-kernel-module\" and auditd.data.syscall in (\"init_module\", \"finit_module\")\n| stats agent_count = count_distinct(agent.id), total_count = count(*) by auditd.data.name, process.executable, process.name\n| where agent_count == 1 and total_count <= 3\n| limit 100\n| sort auditd.data.name asc"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"9DYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies unusual logon activity by source IP on Linux systems. It monitors authentication events, focusing on failed logon attempts from specific IP addresses. A high number of failed logon attempts combined with a low number of successful logons and multiple distinct usernames can indicate a potential brute force or credential stuffing attack.\n","integration":["endpoint"],"uuid":"95c1467d-d566-4645-b5f1-37a4b0093bb6","name":"Logon Activity by Source IP","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors authentication events and counts failed and successful logon attempts by source IP address.","A high number of failed logon attempts combined with a low number of successful logons and multiple distinct usernames can indicate a potential brute force or credential stuffing attack.","The thresholds for failed attempts, successful logons, and distinct usernames should be adjusted based on the environment's normal logon patterns."],"mitre":["T1110","T1078"],"references":[],"queries":[{"query":"from logs-system.auth-*\n| mv_expand event.category\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"authentication\" and event.action in (\"ssh_login\", \"user_login\") and\n  event.outcome in (\"failure\", \"success\") and source.ip is not null and\n  not CIDR_MATCH(source.ip, \"127.0.0.0/8\", \"169.254.0.0/16\", \"224.0.0.0/4\", \"::1\")\n| eval failed = case(event.outcome == \"failure\", source.ip, null), success = case(event.outcome == \"success\", source.ip, null)\n| stats count_failed = count(failed), count_success = count(success), count_user = count_distinct(user.name) by source.ip\n/* below threshold should be adjusted to your env logon patterns */\n| where count_failed >= 100 and count_user >= 20\n","indices":["logs-system.auth-*"],"cleaned_query":"from logs-system.auth-*\n| mv_expand event.category\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"authentication\" and event.action in (\"ssh_login\", \"user_login\") and\n  event.outcome in (\"failure\", \"success\") and source.ip is not null and\n  not CIDR_MATCH(source.ip, \"127.0.0.0/8\", \"169.254.0.0/16\", \"224.0.0.0/4\", \"::1\")\n| eval failed = case(event.outcome == \"failure\", source.ip, null), success = case(event.outcome == \"success\", source.ip, null)\n| stats count_failed = count(failed), count_success = count(success), count_user = count_distinct(user.name) by source.ip\n| where count_failed >= 100 and count_user >= 20"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"9TYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies potential system binary hijacking attempts on Linux systems. It monitors process execution events where common system binaries such as ls, cat, mkdir, touch, mv, and cp are the parent processes. These activities can indicate attempts to hijack system binaries for malicious purposes. The hunt lists detailed information for further analysis and investigation.\n","integration":["endpoint"],"uuid":"d22cbe8f-c84d-4811-aa6d-f1ee00c806b2","name":"Unusual System Binary Parent (Potential System Binary Hijacking Attempt)","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors process execution events where common system binaries such as ls, cat, mkdir, touch, mv, and cp are the parent processes.","Focuses on identifying unusual or suspicious child processes spawned by these common system binaries.","Uses stats to count occurrences and identify unusual activity by looking at the number of unique hosts and processes involved.","Requires additional data analysis and investigation into results to identify malicious or unauthorized use of system binaries."],"mitre":["T1546.004","T1059.004"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.action == \"exec\" and event.type == \"start\" and process.parent.name in (\"ls\", \"cat\", \"mkdir\", \"touch\", \"mv\", \"cp\")\n| stats cc = count(), host_count = count_distinct(host.name) by process.parent.executable, process.executable\n| where host_count <= 5\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.action == \"exec\" and event.type == \"start\" and process.parent.name in (\"ls\", \"cat\", \"mkdir\", \"touch\", \"mv\", \"cp\")\n| stats cc = count(), host_count = count_distinct(host.name) by process.parent.executable, process.executable\n| where host_count <= 5\n| sort cc asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"9jYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies segmentation faults (segfaults) and potential buffer overflow attacks on Linux systems by parsing syslog messages related to segfaults. It captures details about the crashing process, shared object file, and other relevant information to help identify and investigate potential exploitation attempts.\n","integration":["system"],"uuid":"3f3fd2b9-940c-4310-adb1-d8b7d726e281","name":"Segmentation Fault & Potential Buffer Overflow Hunting","language":["ES|QL"],"license":"Elastic License v2","notes":["Detects segfaults and parses syslog messages related to segfaults to identify the crashing process and shared object file along with additional crash details.","Uses GROK to extract relevant fields from syslog messages.","Counts occurrences of segfaults within a plain text message field to potentially detect buffer overflow attacks and unsuccessful process injection attempts.","Removes prepending spaces from syslog messages using EVAL to ensure consistent parsing.","Depending on the Syslog configuration, additional parsing may be required to extract the necessary fields from the message."],"mitre":["T1203","T1068"],"references":[],"queries":[{"query":"from logs-system.syslog*\n| where @timestamp > now() - 12 hour\n| where host.os.type == \"linux\" and process.name == \"kernel\" and message like \"*segfault*\"\n| grok message \"\\\\[%{NUMBER:timestamp}\\\\] %{WORD:process}\\\\[%{NUMBER:pid}\\\\]: segfault at %{BASE16NUM:segfault_address} ip %{BASE16NUM:instruction_pointer} sp %{BASE16NUM:stack_pointer} error %{NUMBER:error_code} in %{DATA:so_file}\\\\[%{BASE16NUM:so_base_address}\\\\+%{BASE16NUM:so_offset}\\\\]\"\n| keep timestamp, process, pid, so_file, segfault_address, instruction_pointer, stack_pointer, error_code, so_base_address, so_offset\n","indices":["logs-system.syslog*"],"cleaned_query":"from logs-system.syslog*\n| where @timestamp > now() - 12 hour\n| where host.os.type == \"linux\" and process.name == \"kernel\" and message like \"*segfault*\"\n| grok message \"\\\\[%{NUMBER:timestamp}\\\\] %{WORD:process}\\\\[%{NUMBER:pid}\\\\]: segfault at %{BASE16NUM:segfault_address} ip %{BASE16NUM:instruction_pointer} sp %{BASE16NUM:stack_pointer} error %{NUMBER:error_code} in %{DATA:so_file}\\\\[%{BASE16NUM:so_base_address}\\\\+%{BASE16NUM:so_offset}\\\\]\"\n| keep timestamp, process, pid, so_file, segfault_address, instruction_pointer, stack_pointer, error_code, so_base_address, so_offset"},{"query":"from logs-system.syslog*\n| where host.os.type == \"linux\" and process.name == \"kernel\" and message like \"*segfault*\"\n| where @timestamp > now() - 12 hour\n| grok message \"\\\\[%{DATA:timestamp}\\\\] %{WORD:process}\\\\[%{NUMBER:pid}\\\\]: segfault at %{BASE16NUM:segfault_address} ip %{BASE16NUM:instruction_pointer} sp %{BASE16NUM:stack_pointer} error %{NUMBER:error_code} in %{DATA:so_name}\\\\[%{BASE16NUM:so_base_address}\\\\+%{BASE16NUM:so_offset}\\\\] likely on CPU %{NUMBER:cpu} \\\\(core %{NUMBER:core}, socket %{NUMBER:socket}\\\\)\"\n| eval timestamp = REPLACE(timestamp, \"\\\\s+\", \"\")\n| keep timestamp, process, pid, segfault_address, instruction_pointer, stack_pointer, error_code, so_name, so_base_address, so_offset, cpu, core, socket\n| stats cc = count() by process, so_name\n// Alter this threshold to make sense for your environment\n| where cc > 100\n| limit 10\n","indices":["logs-system.syslog*"],"cleaned_query":"from logs-system.syslog*\n| where host.os.type == \"linux\" and process.name == \"kernel\" and message like \"*segfault*\"\n| where @timestamp > now() - 12 hour\n| grok message \"\\\\[%{DATA:timestamp}\\\\] %{WORD:process}\\\\[%{NUMBER:pid}\\\\]: segfault at %{BASE16NUM:segfault_address} ip %{BASE16NUM:instruction_pointer} sp %{BASE16NUM:stack_pointer} error %{NUMBER:error_code} in %{DATA:so_name}\\\\[%{BASE16NUM:so_base_address}\\\\+%{BASE16NUM:so_offset}\\\\] likely on CPU %{NUMBER:cpu} \\\\(core %{NUMBER:core}, socket %{NUMBER:socket}\\\\)\"\n| eval timestamp = REPLACE(timestamp, \"\\\\s+\", \"\")\n| keep timestamp, process, pid, segfault_address, instruction_pointer, stack_pointer, error_code, so_name, so_base_address, so_offset, cpu, core, socket\n| stats cc = count() by process, so_name\n| where cc > 100\n| limit 10"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"9zYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies potential defense evasion techniques via multi-dot process execution on Linux systems. It looks for processes with executables that contain three or more consecutive dots in their names. Such naming conventions can be used by malicious actors to evade detection and blend in with legitimate processes.\n","integration":["endpoint"],"uuid":"11810497-8ce3-4960-9777-9d0e97052682","name":"Potential Defense Evasion via Multi-Dot Process Execution","language":["ES|QL"],"license":"Elastic License v2","notes":["This query identifies processes with executables containing three or more consecutive dots in their names.","The process count threshold of <= 10 can be adjusted based on the environment's baseline activity."],"mitre":["T1036.004","T1070"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and process.executable rlike \"\"\".*\\.{3,}.*\"\"\"\n| stats cc = count() by process.executable\n// Alter this threshold to make sense for your environment\n| where cc <= 10\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and process.executable rlike \"\"\".*\\.{3,}.*\"\"\"\n| stats cc = count() by process.executable\n| where cc <= 10\n| sort cc asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"-DYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies unusual file download activities on Linux systems. It detects instances where commonly used download utilities such as curl and wget are executed with command lines that contain IP addresses, which can indicate potentially suspicious file downloads.\n","integration":["endpoint"],"uuid":"0d061fad-cf35-43a6-b9b7-986c348bf182","name":"Unusual File Downloads from Source Addresses","language":["ES|QL"],"license":"Elastic License v2","notes":["Detects instances where download utilities like curl and wget are used with IP addresses in their command lines.","Monitors for potentially suspicious file downloads, which are often seen in malicious activities.","Uses process command line counting in conjunction with host counting to minimize false positives caused by legitimate downloads.","The process command line count threshold is set to <= 10, and the host count threshold is set to <= 5 to balance detection and noise."],"mitre":["T1071.001","T1071.004"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and process.name in (\"curl\", \"wget\") and process.command_line rlike \"\"\".*[0-9]{1,3}(\\.[0-9]{1,3}){3}.*\"\"\"\n| stats cc = count(), host_count = count_distinct(host.id) by process.command_line, process.executable\n| where cc <= 10 and host_count <= 5\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and process.name in (\"curl\", \"wget\") and process.command_line rlike \"\"\".*[0-9]{1,3}(\\.[0-9]{1,3}){3}.*\"\"\"\n| stats cc = count(), host_count = count_distinct(host.id) by process.command_line, process.executable\n| where cc <= 10 and host_count <= 5\n| sort cc asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"-TYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies processes on Linux systems with specific capabilities set. It monitors process execution events where processes have effective or permitted capabilities, which can be indicative of elevated privileges. The hunt focuses on non-root users to detect potential privilege escalation attempts. The hunt lists detailed information for further analysis and investigation.\n","integration":["endpoint"],"uuid":"6f67704d-e5b1-4613-912c-e2965660fe17","name":"Process Capability Hunting","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors process execution events where processes have specific capabilities set, such as CAP_SYS_MODULE, CAP_SYS_PTRACE, and others.","Excludes certain processes and capabilities to reduce false positives, but these can be adjusted based on your environment.","Uses EVAL to tag potential privilege escalation events and counts occurrences to identify unusual activity.","Focuses on non-root users to detect potential privilege escalation attempts.","Requires additional data analysis and investigation into results to identify malicious or unauthorized use of process capabilities."],"mitre":["T1548.001","T1548.003"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.action == \"exec\" and event.type == \"start\" and (process.thread.capabilities.effective is not null or process.thread.capabilities.permitted is not null) and user.id != \"0\" and\nnot (\n  // Remove these if you expect persistence through capabilities\n  process.executable like \"/var/lib/docker/*\" or\n  process.name == \"gnome-keyring-daemon\" or\n  process.thread.capabilities.permitted == \"CAP_WAKE_ALARM\"\n)\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.thread.capabilities.effective, process.thread.capabilities.permitted\n| where host_count <= 3 and cc < 5\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.action == \"exec\" and event.type == \"start\" and (process.thread.capabilities.effective is not null or process.thread.capabilities.permitted is not null) and user.id != \"0\" and\nnot (\n  process.executable like \"/var/lib/docker/*\" or\n  process.name == \"gnome-keyring-daemon\" or\n  process.thread.capabilities.permitted == \"CAP_WAKE_ALARM\"\n)\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.thread.capabilities.effective, process.thread.capabilities.permitted\n| where host_count <= 3 and cc < 5\n| sort cc asc\n| limit 100"},{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.action == \"exec\" and event.type == \"start\" and (\n  process.thread.capabilities.effective in (\"CAP_SYS_MODULE\", \"CAP_SYS_PTRACE\", \"CAP_DAC_OVERRIDE\", \"CAP_DAC_READ_SEARCH\", \"CAP_SETUID\", \"CAP_SETGID\", \"CAP_SYS_ADMIN\") or\n  process.thread.capabilities.permitted in (\"CAP_SYS_MODULE\", \"CAP_SYS_PTRACE\", \"CAP_DAC_OVERRIDE\", \"CAP_DAC_READ_SEARCH\", \"CAP_SETUID\", \"CAP_SETGID\", \"CAP_SYS_ADMIN\")\n) and user.id != \"0\"\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.thread.capabilities.effective, process.thread.capabilities.permitted\n| where host_count <= 3 and cc < 5\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.action == \"exec\" and event.type == \"start\" and (\n  process.thread.capabilities.effective in (\"CAP_SYS_MODULE\", \"CAP_SYS_PTRACE\", \"CAP_DAC_OVERRIDE\", \"CAP_DAC_READ_SEARCH\", \"CAP_SETUID\", \"CAP_SETGID\", \"CAP_SYS_ADMIN\") or\n  process.thread.capabilities.permitted in (\"CAP_SYS_MODULE\", \"CAP_SYS_PTRACE\", \"CAP_DAC_OVERRIDE\", \"CAP_DAC_READ_SEARCH\", \"CAP_SETUID\", \"CAP_SETGID\", \"CAP_SYS_ADMIN\")\n) and user.id != \"0\"\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.thread.capabilities.effective, process.thread.capabilities.permitted\n| where host_count <= 3 and cc < 5\n| sort cc asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"-jYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies low volume process injection-related syscalls on Linux systems. It monitors audit logs for syscalls related to process injection, such as ptrace and memfd_create. The hunt focuses on processes that make these syscalls infrequently, which can indicate potential malicious activity.\n","integration":["endpoint"],"uuid":"c9931736-d5ec-4c89-b4d2-d71dcf5ca12a","name":"Low Volume Process Injection-Related Syscalls by Process Executable","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors for process injection-related syscalls such as ptrace and memfd_create.","Counts the occurrences of these syscalls by process executable to identify processes that make these syscalls infrequently.","Focuses on low volume occurrences to detect potential malicious activity related to process injection."],"mitre":["T1055.001","T1055.009"],"references":[],"queries":[{"query":"from logs-auditd_manager.auditd-*, logs-auditd.log-*, auditbeat-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and auditd.data.syscall in (\"ptrace\", \"memfd_create\")\n| stats cc = count(*) by process.executable, auditd.data.syscall\n| where cc <= 10\n| limit 100\n| sort cc asc\n","indices":["logs-auditd_manager.auditd-*","logs-auditd.log-*","auditbeat-*"],"cleaned_query":"from logs-auditd_manager.auditd-*, logs-auditd.log-*, auditbeat-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and auditd.data.syscall in (\"ptrace\", \"memfd_create\")\n| stats cc = count(*) by process.executable, auditd.data.syscall\n| where cc <= 10\n| limit 100\n| sort cc asc"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"-zYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies potential defense evasion techniques via capitalized process execution on Linux systems. It detects processes that have two or more consecutive capital letters within their names, which can indicate an attempt to evade detection. Such naming conventions are often used in malicious payloads to blend in with legitimate processes.\n","integration":["endpoint"],"uuid":"9d485892-1ca2-464b-9e4e-6b21ab379b9a","name":"Defense Evasion via Capitalized Process Execution","language":["ES|QL"],"license":"Elastic License v2","notes":["Detects processes that have two or more consecutive capital letters within their names, with optional digits.","This technique is often used in malicious payloads, such as Metasploit payloads, to evade detection.","Included a process count of <= 3 and a host count of <= 3 to eliminate common processes across different hosts."],"mitre":["T1036.004","T1070"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 10 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and (\n  (process.name rlike \"\"\"[A-Z]{2,}[a-z]{1,}[0-9]{0,}\"\"\") or\n  (process.name rlike \"\"\"[A-Z]{1,}[0-9]{0,}\"\"\")\n)\n| stats cc = count(), host_count = count_distinct(host.name) by process.name\n// Alter this threshold to make sense for your environment\n| where cc <= 3 and host_count <= 3\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 10 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and (\n  (process.name rlike \"\"\"[A-Z]{2,}[a-z]{1,}[0-9]{0,}\"\"\") or\n  (process.name rlike \"\"\"[A-Z]{1,}[0-9]{0,}\"\"\")\n)\n| stats cc = count(), host_count = count_distinct(host.name) by process.name\n| where cc <= 3 and host_count <= 3\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"_DYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies network connections with low occurrence frequency for unique agent IDs on Linux systems. It monitors network connection attempts and acceptances, focusing on those initiated by processes that are rarely seen in the environment. By accounting for known low-frequency legitimate binaries (LoLBins) and suspicious directories, this hunt aims to detect unusual network activity that may indicate malicious behavior.\n","integration":["endpoint"],"uuid":"ecd84bc7-32ae-474b-93a8-d1d9736c3464","name":"Network Connections with Low Occurrence Frequency for Unique Agent ID","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors for network connections initiated by processes that have low occurrence frequency, focusing on unique agent IDs.","Excludes common internal IP ranges to minimize false positives.","Accounts for known low-frequency legitimate binaries (LoLBins) to reduce noise.","Identifies suspicious directories where processes are executed from, which can indicate malicious activity."],"mitre":["T1071.001","T1071.004"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"connection_attempted\", \"connection_accepted\") and destination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.executable\n| where agent_count == 1 and cc > 0 and cc <= 3\n| limit 100\n| sort cc asc\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"connection_attempted\", \"connection_accepted\") and destination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.executable\n| where agent_count == 1 and cc > 0 and cc <= 3\n| limit 100\n| sort cc asc"},{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"connection_attempted\", \"connection_accepted\") and (\n    process.name in (\"bash\", \"dash\", \"sh\", \"tcsh\", \"csh\", \"zsh\", \"ksh\", \"fish\", \"socat\", \"java\", \"awk\", \"gawk\", \"mawk\", \"nawk\", \"openssl\", \"nc\", \"ncat\", \"netcat\", \"nc.openbsd\", \"telnet\") or\n    process.name like \"python*\" or\n    process.name like \"perl*\" or\n    process.name like \"ruby*\" or\n    process.name like \"lua*\" or\n    process.name like \"php*\"\n) and\ndestination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.name\n| where agent_count <= 3 and cc > 0 and cc <= 5\n| limit 100\n| sort cc asc\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"connection_attempted\", \"connection_accepted\") and (\n    process.name in (\"bash\", \"dash\", \"sh\", \"tcsh\", \"csh\", \"zsh\", \"ksh\", \"fish\", \"socat\", \"java\", \"awk\", \"gawk\", \"mawk\", \"nawk\", \"openssl\", \"nc\", \"ncat\", \"netcat\", \"nc.openbsd\", \"telnet\") or\n    process.name like \"python*\" or\n    process.name like \"perl*\" or\n    process.name like \"ruby*\" or\n    process.name like \"lua*\" or\n    process.name like \"php*\"\n) and\ndestination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.name\n| where agent_count <= 3 and cc > 0 and cc <= 5\n| limit 100\n| sort cc asc"},{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"connection_attempted\", \"connection_accepted\") and (\n    process.executable like \"./*\" or\n    process.executable like \"/dev/shm/*\" or\n    process.executable like \"/var/www/*\" or\n    process.executable like \"/boot/*\" or\n    process.executable like \"/srv/*\" or\n    process.executable rlike \"/tmp/[^/]+\" or\n    process.executable rlike \"/var/tmp/[^/]+\" or\n    process.executable rlike \"/run/[^/]+\" or\n    process.executable rlike \"/var/run/[^/]+\"\n) and\ndestination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"127.0.0.0/8\", \"169.254.0.0/16\", \"224.0.0.0/4\", \"::1\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.executable\n| where agent_count <= 3 and cc > 0 and cc <= 5\n| limit 100\n| sort cc asc\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"connection_attempted\", \"connection_accepted\") and (\n    process.executable like \"./*\" or\n    process.executable like \"/dev/shm/*\" or\n    process.executable like \"/var/www/*\" or\n    process.executable like \"/boot/*\" or\n    process.executable like \"/srv/*\" or\n    process.executable rlike \"/tmp/[^/]+\" or\n    process.executable rlike \"/var/tmp/[^/]+\" or\n    process.executable rlike \"/run/[^/]+\" or\n    process.executable rlike \"/var/run/[^/]+\"\n) and\ndestination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"127.0.0.0/8\", \"169.254.0.0/16\", \"224.0.0.0/4\", \"::1\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.executable\n| where agent_count <= 3 and cc > 0 and cc <= 5\n| limit 100\n| sort cc asc"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"_TYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies hidden process executions on Linux systems. It detects processes executed from hidden files, which are often used by malicious actors to conceal their activities. By focusing on hidden files rather than directories, this hunt aims to catch stealthy processes while minimizing noise.\n","integration":["endpoint"],"uuid":"00461198-9a2d-4823-b4cc-f3d1b5c17935","name":"Hidden Process Execution","language":["ES|QL"],"license":"Elastic License v2","notes":["Included only hidden files, excluding hidden directories, as hidden directories are common in Unix.","Included a process or parent process count of <= 3, and a host count of <= 3 to eliminate common processes across different hosts."],"mitre":["T1036.004","T1059"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and \n  process.executable rlike \"/[^/]+/\\\\.[^/]+\"\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.parent.executable, user.id\n// Alter this threshold to make sense for your environment\n| where cc <= 3 and host_count <= 3\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 30 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and \n  process.executable rlike \"/[^/]+/\\\\.[^/]+\"\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.parent.executable, user.id\n| where cc <= 3 and host_count <= 3\n| sort cc asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"_jYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies excessive SSH network activity to unique destinations on Linux systems. It monitors network connections over TCP to port 22 (SSH) and counts the number of unique destination IP addresses. A high number of unique destinations could indicate suspicious activity such as discovery or lateral movement.\n","integration":["endpoint"],"uuid":"223f812c-a962-4d58-961d-134d8f8b15da","name":"Excessive SSH Network Activity to Unique Destinations","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors network connections to port 22 (SSH) and counts the number of unique destination IP addresses per host and user.","A high number of unique destinations can indicate suspicious activity such as discovery or lateral movement.","The threshold of 10 unique destinations can be adjusted to suit the environment's baseline activity."],"mitre":["T1021.004","T1078.003"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"network\" and network.transport == \"tcp\" and destination.port == 22 and source.port >= 49152\n| keep destination.ip, host.id, user.name\n| stats count_unique_dst = count_distinct(destination.ip) by host.id, user.name\n// Alter this threshold to make sense for your environment\n| where count_unique_dst >= 10\n| limit 100\n| sort user.name asc\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"network\" and network.transport == \"tcp\" and destination.port == 22 and source.port >= 49152\n| keep destination.ip, host.id, user.name\n| stats count_unique_dst = count_distinct(destination.ip) by host.id, user.name\n| where count_unique_dst >= 10\n| limit 100\n| sort user.name asc"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"_zYGX5YBrgDVrAfHnIIG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies potential persistence mechanisms leveraging web shells on Linux systems. Web shells are malicious scripts or executables that attackers deploy to provide remote access, execute arbitrary commands, or maintain persistence on compromised systems. This hunt focuses on detecting suspicious file creation events and anomalous network activity associated with known web shell behaviors.\n","integration":["endpoint"],"uuid":"e2e4a1ad-5e03-4968-927c-9ef13c49a3b8","name":"Persistence via Web Shell","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors for the creation or renaming of files with extensions commonly associated with web shells, such as PHP, Python, Perl, Ruby, Lua, and JSP scripts.","Analyzes network disconnect events to identify anomalous connections initiated by scripting engines, indicating potential use of web shells for remote access.","Provides statistics and counts to detect rare or unusual activity related to file modifications or network events, helping prioritize investigation efforts."],"mitre":["T1505.003"],"references":[],"queries":[{"query":"from logs-endpoint.events.file-*\n| keep @timestamp, host.os.type, event.action, file.extension, process.name, agent.id, file.name, process.executable\n| where @timestamp > now() - 30 days\n| where host.os.type == \"linux\" and event.action in (\"rename\", \"creation\") and\nfile.extension in (\"php\", \"py\", \"pl\", \"rb\", \"rs\", \"lua\", \"jsp\") and not (\n  // Add your noisy exclusions here\n  process.name in (\"dnf\", \"dpkg\", \"pip3\", \"pip\", \"yum\", \"tar\", \"code\", \"vmtoolsd\")\n)\n| stats cc = count(), agent_count = count_distinct(agent.id) by file.name, process.executable\n| where agent_count <= 3\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.file-*"],"cleaned_query":"from logs-endpoint.events.file-*\n| keep @timestamp, host.os.type, event.action, file.extension, process.name, agent.id, file.name, process.executable\n| where @timestamp > now() - 30 days\n| where host.os.type == \"linux\" and event.action in (\"rename\", \"creation\") and\nfile.extension in (\"php\", \"py\", \"pl\", \"rb\", \"rs\", \"lua\", \"jsp\") and not (\n  process.name in (\"dnf\", \"dpkg\", \"pip3\", \"pip\", \"yum\", \"tar\", \"code\", \"vmtoolsd\")\n)\n| stats cc = count(), agent_count = count_distinct(agent.id) by file.name, process.executable\n| where agent_count <= 3\n| sort cc asc\n| limit 100"},{"query":"from logs-endpoint.events.network-*\n| keep @timestamp, host.os.type, event.type, event.action, process.name, source.ip, agent.id, process.executable, process.command_line\n| where @timestamp > now() - 30 days\n| where host.os.type == \"linux\" and event.type == \"end\" and event.action == \"disconnect_received\" and\n(\n  process.name like \"ruby*\" or\n  process.name like \"perl*\" or\n  process.name like \"python*\" or\n  process.name like \"php*\"\n) and source.ip IS NOT null and not CIDR_MATCH(source.ip, \"127.0.0.0/8\", \"169.254.0.0/16\", \"224.0.0.0/4\", \"::1\", \"172.18.0.0/16\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.executable, process.command_line, source.ip\n| where agent_count <= 3\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| keep @timestamp, host.os.type, event.type, event.action, process.name, source.ip, agent.id, process.executable, process.command_line\n| where @timestamp > now() - 30 days\n| where host.os.type == \"linux\" and event.type == \"end\" and event.action == \"disconnect_received\" and\n(\n  process.name like \"ruby*\" or\n  process.name like \"perl*\" or\n  process.name like \"python*\" or\n  process.name like \"php*\"\n) and source.ip IS NOT null and not CIDR_MATCH(source.ip, \"127.0.0.0/8\", \"169.254.0.0/16\", \"224.0.0.0/4\", \"::1\", \"172.18.0.0/16\")\n| stats cc = count(), agent_count = count_distinct(agent.id) by process.executable, process.command_line, source.ip\n| where agent_count <= 3\n| sort cc asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"ADYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies low volume external network connections initiated by processes on Linux systems. It focuses on connections attempted by processes that have been seen infrequently (five or fewer connections) and by unique agents. This can help identify potentially suspicious activity that might be missed due to low volume.\n","integration":["endpoint"],"uuid":"12526f14-5e35-4f5f-884c-96c6a353a544","name":"Low Volume External Network Connections from Process by Unique Agent","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors for network connections attempted by processes that have a low occurrence frequency (five or fewer connections) and are seen by a unique agent.","Excludes common internal IP ranges to minimize false positives.","A separate query is included to specifically monitor low volume network connections initiated by the root user, as these can be particularly indicative of malicious activity."],"mitre":["T1071.001","T1071.004"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"network\" and event.type == \"start\" and event.action == \"connection_attempted\" and not process.name is null and\n    not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats connection_count = count(*), unique_agent_count = count_distinct(agent.id) by process.name\n| where connection_count <= 5 and unique_agent_count == 1\n| limit 100\n| sort connection_count, unique_agent_count asc\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"network\" and event.type == \"start\" and event.action == \"connection_attempted\" and not process.name is null and\n    not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats connection_count = count(*), unique_agent_count = count_distinct(agent.id) by process.name\n| where connection_count <= 5 and unique_agent_count == 1\n| limit 100\n| sort connection_count, unique_agent_count asc"},{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"network\" and event.type == \"start\" and event.action == \"connection_attempted\" and user.id == \"0\" and not process.name is null and\n    not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats connection_count = count(*), unique_agent_count = count_distinct(agent.id) by process.name\n| where connection_count <= 5 and unique_agent_count == 1\n| limit 100\n| sort connection_count, unique_agent_count asc\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.category == \"network\" and event.type == \"start\" and event.action == \"connection_attempted\" and user.id == \"0\" and not process.name is null and\n    not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| stats connection_count = count(*), unique_agent_count = count_distinct(agent.id) by process.name\n| where connection_count <= 5 and unique_agent_count == 1\n| limit 100\n| sort connection_count, unique_agent_count asc"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"ATYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies low volume modifications to critical system binaries on Linux systems. It monitors file modification events in critical directories such as /bin, /usr/bin, /sbin, and /usr/sbin. The hunt focuses on modifications made by unique hosts, excluding expected update processes like package managers. This can help detect unauthorized or suspicious modifications to system binaries.\n","integration":["endpoint"],"uuid":"c7044817-d9a5-4755-abab-9059e50dab24","name":"Low Volume Modifications to Critical System Binaries by Unique Host","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors for file modifications in critical directories like /bin, /usr/bin, /sbin, and /usr/sbin.","Excludes modifications made by expected update processes such as package managers to reduce false positives.","Counts the number of unique files modified by each host and the number of modifications made.","Focuses on modifications made by unique hosts to detect unauthorized or suspicious changes."],"mitre":["T1070.004","T1569.002"],"references":[],"queries":[{"query":"from logs-endpoint.events.file-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and\n  (file.path like \"/bin/*\" or file.path like \"/usr/bin/*\" or file.path like \"/sbin/*\" or file.path like \"/usr/sbin/*\") and\n  not (\n\n  // Exclude expected update processes, e.g., package managers\n  process.executable in (\"/usr/bin/apt\", \"/usr/bin/dpkg\", \"/usr/bin/yum\", \"/usr/bin/rpm\", \"/usr/bin/pacman\",\n  \"/usr/bin/pamac-daemon\", \"/usr/bin/update-alternatives\", \"/usr/bin/dockerd\", \"/usr/bin/microdnf\", \"/sbin/apk\") or\n\n  // Exclude certain benign or expected modification patterns, if applicable\n  file.path like \"/usr/bin/gzip*\" // Example exclusion, adjust based on your environment\n)\n| stats modification_count = count(file.path), unique_files_modified = count_distinct(file.path), host_count = count_distinct(host.name) by process.executable\n| where modification_count >= 1 and host_count == 1\n| sort modification_count asc\n| limit 100\n","indices":["logs-endpoint.events.file-*"],"cleaned_query":"from logs-endpoint.events.file-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and\n  (file.path like \"/bin/*\" or file.path like \"/usr/bin/*\" or file.path like \"/sbin/*\" or file.path like \"/usr/sbin/*\") and\n  not (\n  process.executable in (\"/usr/bin/apt\", \"/usr/bin/dpkg\", \"/usr/bin/yum\", \"/usr/bin/rpm\", \"/usr/bin/pacman\",\n  \"/usr/bin/pamac-daemon\", \"/usr/bin/update-alternatives\", \"/usr/bin/dockerd\", \"/usr/bin/microdnf\", \"/sbin/apk\") or\n  file.path like \"/usr/bin/gzip*\" // Example exclusion, adjust based on your environment\n)\n| stats modification_count = count(file.path), unique_files_modified = count_distinct(file.path), host_count = count_distinct(host.name) by process.executable\n| where modification_count >= 1 and host_count == 1\n| sort modification_count asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"AjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies uncommon process executions from suspicious directories on Linux systems. It looks for processes executed from directories that are often associated with malicious activity, such as /dev/shm, /var/www, /boot, /srv, /tmp, /var/tmp, /run, and /var/run. The goal is to detect potentially malicious processes while excluding common, benign ones.\n","integration":["endpoint"],"uuid":"0ea47044-b161-4785-ba99-e11f46d6ac51","name":"Uncommon Process Execution from Suspicious Directory","language":["ES|QL"],"license":"Elastic License v2","notes":["Excluded /tmp, /var/tmp, /run, /var/run subdirectories to reduce noise.","Excluded /tmp, /var/tmp files starting or ending with digits to exclude real temporary files.","Included a process or parent process count of <= 3, and a host count of <= 3 to eliminate common processes across different hosts."],"mitre":["T1036.004","T1049","T1059","T1059.004"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and (\n// Add paths to monitor from your environment here\n  process.executable like \"/dev/shm/*\" or\n  process.executable like \"/var/www/*\" or\n  process.executable like \"/boot/*\" or\n  process.executable like \"/srv/*\" or\n  process.executable rlike \"/tmp/[^/]+\" or\n  process.executable rlike \"/var/tmp/[^/]+\" or\n  process.executable rlike \"/run/[^/]+\" or\n  process.executable rlike \"/var/run/[^/]+\"\n) and not (\n  // Exclude noisy (parent) processes, users or directories from your environment here\n  process.parent.executable in (\"/usr/sbin/dpkg-preconfigure\") or\n  // Exclude /tmp and /var/tmp instances starting or ending with digits (usually benign files)\n  process.executable rlike \"/tmp/[0-9].*\" or\n  process.executable rlike \"/tmp/.*[0-9]/?\" or\n  process.executable rlike \"/var/tmp/[0-9].*\" or\n  process.executable rlike \"/var/tmp/.*[0-9]/?\"\n)\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.parent.executable\n// Alter this threshold to make sense for your environment\n| where cc <= 3 and host_count <= 3\n| sort cc asc\n| limit 100\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and (\n  process.executable like \"/dev/shm/*\" or\n  process.executable like \"/var/www/*\" or\n  process.executable like \"/boot/*\" or\n  process.executable like \"/srv/*\" or\n  process.executable rlike \"/tmp/[^/]+\" or\n  process.executable rlike \"/var/tmp/[^/]+\" or\n  process.executable rlike \"/run/[^/]+\" or\n  process.executable rlike \"/var/run/[^/]+\"\n) and not (\n  process.parent.executable in (\"/usr/sbin/dpkg-preconfigure\") or\n  process.executable rlike \"/tmp/[0-9].*\" or\n  process.executable rlike \"/tmp/.*[0-9]/?\" or\n  process.executable rlike \"/var/tmp/[0-9].*\" or\n  process.executable rlike \"/var/tmp/.*[0-9]/?\"\n)\n| stats cc = count(), host_count = count_distinct(host.name) by process.executable, process.parent.executable\n| where cc <= 3 and host_count <= 3\n| sort cc asc\n| limit 100"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"AzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies low volume external network connections initiated by GTFOBins on Linux systems. GTFOBins are Unix binaries that can be exploited by attackers to bypass local security restrictions. The hunt focuses on network connections made by these binaries, excluding common internal IP ranges, to detect potentially malicious activity.\n","integration":["endpoint"],"uuid":"783d6091-b98d-45a8-a880-a07f112a8aa2","name":"Low Volume GTFOBins External Network Connections","language":["ES|QL"],"license":"Elastic License v2","notes":["Monitors for external network connections initiated by known GTFOBins such as bash, curl, nc, wget, and others.","Excludes common internal IP ranges to minimize false positives.","Counts the occurrences of these connections by process name and limits to those seen infrequently (five or fewer connections).","This can help identify potentially malicious activity involving the exploitation of GTFOBins."],"mitre":["T1219","T1071.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and process.name in (\n  \"ab\", \"aria2c\", \"bash\", \"cpan\", \"curl\", \"easy_install\", \"finger\", \"ftp\",\n  \"gdb\", \"gimp\", \"irb\", \"jjs\", \"jrunscript\", \"julia\", \"ksh\", \"lua\", \"lwp-download\",\n  \"nc\", \"nmap\", \"node\", \"openssl\", \"php\", \"pip\", \"python\", \"ruby\", \"rview\", \"rvim\",\n  \"scp\", \"sftp\", \"smbclient\", \"socat\", \"ssh\", \"tar\", \"tftp\", \"view\", \"vim\", \"vimdiff\",\n  \"wget\", \"whois\", \"yum\"\n) and\ndestination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep process.name, destination.port, destination.ip, user.name, host.name\n| stats cc = count(*) by destination.port, process.name\n| where cc <= 5\n| sort cc asc, destination.port\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.type == \"linux\" and event.type == \"start\" and process.name in (\n  \"ab\", \"aria2c\", \"bash\", \"cpan\", \"curl\", \"easy_install\", \"finger\", \"ftp\",\n  \"gdb\", \"gimp\", \"irb\", \"jjs\", \"jrunscript\", \"julia\", \"ksh\", \"lua\", \"lwp-download\",\n  \"nc\", \"nmap\", \"node\", \"openssl\", \"php\", \"pip\", \"python\", \"ruby\", \"rview\", \"rvim\",\n  \"scp\", \"sftp\", \"smbclient\", \"socat\", \"ssh\", \"tar\", \"tftp\", \"view\", \"vim\", \"vimdiff\",\n  \"wget\", \"whois\", \"yum\"\n) and\ndestination.ip IS NOT null and not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"224.0.0.0/4\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep process.name, destination.port, destination.ip, user.name, host.name\n| stats cc = count(*) by destination.port, process.name\n| where cc <= 5\n| sort cc asc, destination.port"}],"category":"linux","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"BDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies password spraying attacks in Okta where the same source IP attempts to authenticate to multiple accounts with invalid credentials. Adversaries may attempt to use a single source IP to avoid detection and bypass account lockout policies.\n","integration":["okta"],"uuid":"1c2d2b08-71ee-11ef-952e-f661ea17fbcc","name":"Password Spraying from Repeat Source","language":["ES|QL"],"license":"Elastic License v2","notes":["`okta.actor.alternate_id` are the targeted accounts.","Pivot for successful logins from the same source IP by searching for `event.action` equal to `user.session.start` or `user.authentication.verify` where the outcome is `SUCCESS`.","User agents can be used to identify anomalous behavior, such as a user agent that is not associated with a known application or user.","The `target_count` can be adjusted depending on the organization's account lockout policy or baselined behavior."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n\n// truncate the timestamp to daily intervals\n| eval target_time_window = DATE_TRUNC(1 days, @timestamp)\n| where\n\n// filter for invalid credential events\n    event.action == \"user.session.start\"\n    and okta.outcome.result == \"FAILURE\"\n    and okta.outcome.reason == \"INVALID_CREDENTIALS\"\n| stats\n    // count the distinct number of targeted accounts\n    target_count = count_distinct(okta.actor.alternate_id),\n\n    // count the number of invalid credential events for each source IP\n    source_count = count(*) by target_time_window, okta.client.ip\n\n// filter for source IPs with more than 5 invalid credential events\n| where target_count >= 10\n","indices":["logs-okta*"],"cleaned_query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n| eval target_time_window = DATE_TRUNC(1 days, @timestamp)\n| where\n    event.action == \"user.session.start\"\n    and okta.outcome.result == \"FAILURE\"\n    and okta.outcome.reason == \"INVALID_CREDENTIALS\"\n| stats\n    target_count = count_distinct(okta.actor.alternate_id),\n    source_count = count(*) by target_time_window, okta.client.ip\n| where target_count >= 10"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"BTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword","notes.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies rare occurrences of user authentication events for an Okta user whose registered user account email address has a domain that is not commonly seen in the organization. Adversaries may use compromised credentials or tokens to create a new user account with a domain that is not commonly seen in the organization because they do not have access to a valid email address within that domain.\n","integration":["okta"],"uuid":"f3bc68f4-71e9-11ef-952e-f661ea17fbcc","name":"Rare Occurrence of Domain with User Authentication Events","language":["ES|QL"],"license":"Elastic License v2","notes":["Pivot into potential compromised accounts by searching for the `okta.actor.alternate_id` in `okta.target` where `event.action` is `user.lifecycle.create`. This would identify when the user account was created. The `okta.actor.alternate_id` of this event will also be the potential compromised account."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n| where\n    // Filter for user authentication events\n    okta.actor.alternate_id is not null\n    and event.action LIKE \"user.authentication*\"\n\n// Extract the top-level domain (TLD) from the user's email address\n| dissect okta.actor.alternate_id \"%{}@%{tld}\"\n\n// Count the number of user authentication events for each TLD\n| stats tld_auth_counts = count(*) by tld\n\n// Filter for TLDs with less than or equal to 5 user authentication events\n| where tld_auth_counts <= 5\n\n// Sort the results by the number of user authentication events in ascending order\n| sort tld_auth_counts asc\n","indices":["logs-okta*"],"cleaned_query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n| where\n    okta.actor.alternate_id is not null\n    and event.action LIKE \"user.authentication*\"\n| dissect okta.actor.alternate_id \"%{}@%{tld}\"\n| stats tld_auth_counts = count(*) by tld\n| where tld_auth_counts <= 5\n| sort tld_auth_counts asc"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"BjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user denies multiple push notifications for multi-factor authentication (MFA) in rapid succession. Adversaries may attempt to deny push notifications to flood the target user's device with notifications, causing the user to ignore legitimate notifications or potentially disable MFA. This query identifies when a user denies more than 5 push notifications in a single hour.\n","integration":["okta"],"uuid":"7c51fe3e-6ae9-11ef-919d-f661ea17fbcc","name":"Multi-Factor Authentication (MFA) Push Notification Bombing","language":["ES|QL"],"license":"Elastic License v2","notes":["`okta.actor.alternate_id` would be target of the threat adversary","Pivoting into a potential compromise requires an additional search for `okta.outcome.result` being `SUCCESS` for any `user.authentication*` value for `okta.event_type`","For a smaller window (rapid denies), reduce from 1 hour to 30 minutes or lower"],"mitre":["T1556.006"],"references":[],"queries":[{"query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n\n// Filter for deny push notifications for multi-factor authentication\n| where event.dataset == \"okta.system\" and event.action == \"user.mfa.okta_verify.deny_push\"\n\n// Truncate the timestamp to hourly intervals\n| eval hourly_count = date_trunc(1 hour, event.ingested)\n\n// Count the number of deny push notifications for each user every hour\n| stats hourly_denies = count(*) by okta.actor.alternate_id, hourly_count\n\n// Filter for users who deny more than 5 push notifications in a single hour\n| where hourly_denies > 5\n","indices":["logs-okta.system*"],"cleaned_query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n| where event.dataset == \"okta.system\" and event.action == \"user.mfa.okta_verify.deny_push\"\n| eval hourly_count = date_trunc(1 hour, event.ingested)\n| stats hourly_denies = count(*) by okta.actor.alternate_id, hourly_count\n| where hourly_denies > 5"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"BzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies rapid reset password requests for different users in Okta. Adversaries may attempt to reset passwords for multiple users in rapid succession to gain unauthorized access to accounts or disrupt operations. This query identifies when the source user is different from the target user in reset password events and filters for users with more than 15 reset password attempts.\n","integration":["okta"],"uuid":"c784106e-6ae8-11ef-919d-f661ea17fbcc","name":"Rapid Reset Password Requests for Different Users","language":["ES|QL"],"license":"Elastic License v2","notes":["`okta.actor.alternate_id` is the potentially compromised account","An API access token may have been compromised, where okta.actor.alternate_id reflects the owner","To identify a list of tokens this user created, search for the `okta.actor.alternate_id` where `event.action` is `system.api_token*` which may require a larger time window"],"mitre":["T1098.001"],"references":[],"queries":[{"query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n\n// Filter for reset password events where the source user is different from the target user\n| where event.dataset == \"okta.system\" and event.action == \"user.account.reset_password\" and source.user.full_name != user.target.full_name\n\n// Extract relevant fields\n| keep @timestamp, okta.actor.alternate_id, okta.debug_context.debug_data.dt_hash, user.target.full_name, okta.outcome.result\n\n// Count the number of reset password attempts for each user\n| stats\n    user_count = count_distinct(user.target.full_name),\n    reset_counts = count(*) by okta.actor.alternate_id, source.user.full_name, okta.debug_context.debug_data.dt_hash\n\n// Filter for more than 10 unique users and more than 15 reset password attempts by the source\n| where user_count > 10 and reset_counts > 15\n","indices":["logs-okta.system*"],"cleaned_query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n| where event.dataset == \"okta.system\" and event.action == \"user.account.reset_password\" and source.user.full_name != user.target.full_name\n| keep @timestamp, okta.actor.alternate_id, okta.debug_context.debug_data.dt_hash, user.target.full_name, okta.outcome.result\n| stats\n    user_count = count_distinct(user.target.full_name),\n    reset_counts = count(*) by okta.actor.alternate_id, source.user.full_name, okta.debug_context.debug_data.dt_hash\n| where user_count > 10 and reset_counts > 15"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"CDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a public client app successfully retrieves an OAuth access token using client credentials from multiple client addresses. For public client applications in Okta that leverage OAuth, client credentials can be used to retrieve access tokens without user consent. Unsecured credentials may be compromised by an adversary who may use them to request an access token on behalf of the public client app.\n","integration":["okta"],"uuid":"38d82c2c-71d9-11ef-a9be-f661ea17fbcc","name":"OAuth Access Token Granted for Public Client App from Multiple Client Addresses","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `okta.debug_context.debug_data.flattened.grantType` to identify if the grant type is `client_credentials`","Ignore `okta.debug_context.debug_data.flattened.requestedScopes` values that indicate read-only access","Review `okta.actor.display_name` to identify the public client app that attempted to retrieve the access token. This may help identify the compromised client credentials.","Filter on the public client app and aggregate by `event.action` to determine what actions were taken by the public client app after the access token was granted."],"mitre":["T1550.001"],"references":[],"queries":[{"query":"from logs-okta.system*\n| where @timestamp > NOW() - 21 day\n\n// truncate the timestamp to 1 day\n| eval target_time_window = DATE_TRUNC(1 days, @timestamp)\n| where\n\n    // filter for successful OAuth access token grant requests\n    event.action == \"app.oauth2.as.token.grant.access_token\"\n    and event.outcome == \"success\"\n    and event.dataset == \"okta.system\"\n\n    // filter for public client apps\n    and okta.actor.type == \"PublicClientApp\"\n\n    // ignore Elastic Okta integration and DataDog actors\n    and not (okta.actor.display_name LIKE \"Okta*\" or okta.actor.display_name LIKE \"Datadog*\")\n\n// count the number of access tokens granted by the same public client app in a day\n| stats token_granted_count = count(*), unique_client_ip = count_distinct(okta.client.ip) by target_time_window, okta.actor.display_name\n\n// filter where access tokens were granted on the same day but client addresses are different\n| where unique_client_ip >= 2 and token_granted_count >= 2\n","indices":["logs-okta.system*"],"cleaned_query":"from logs-okta.system*\n| where @timestamp > NOW() - 21 day\n| eval target_time_window = DATE_TRUNC(1 days, @timestamp)\n| where\n    event.action == \"app.oauth2.as.token.grant.access_token\"\n    and event.outcome == \"success\"\n    and event.dataset == \"okta.system\"\n    and okta.actor.type == \"PublicClientApp\"\n    and not (okta.actor.display_name LIKE \"Okta*\" or okta.actor.display_name LIKE \"Datadog*\")\n| stats token_granted_count = count(*), unique_client_ip = count_distinct(okta.client.ip) by target_time_window, okta.actor.display_name\n| where unique_client_ip >= 2 and token_granted_count >= 2"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"CTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user authenticates to multiple applications using Single Sign-On (SSO) from the same source. Adversaries may attempt to authenticate to multiple applications using SSO to gain unauthorised access to sensitive data or resources. Adversaries also rely on refresh tokens to maintain access to applications and services. This query identifies when a source IP authenticates to more than 15 applications using SSO within a 5-minute window.\n","integration":["okta"],"uuid":"03bce3b0-6ded-11ef-9282-f661ea17fbcc","name":"Multiple Application SSO Authentication from the Same Source","language":["ES|QL"],"license":"Elastic License v2","notes":["`okta.debug_context.debug_data.dt_hash` field can be used to identify the device token hash used for authentication. This can be used to pivot for additional activity from the same device.","`okta.debug_context.debug_data.flattened` contains additional information such as request ID, trace ID, sign-on mode and more to review for anomalies in the authentication flow.","`okta.request.ip_chain` can be used to understand more about the source address, which is potentially useful for profiling.","If `okta.security_context.is_proxy` is `true`, then an adversary may be attempting to mask their true source behind a proxy or VPN."],"mitre":["T1550.001"],"references":[],"queries":[{"query":"from logs-okta*\n| eval target_time_window = DATE_TRUNC(5 minutes, @timestamp)\n\n// truncate the timestamp to a 5-minute window\n| where @timestamp > now() - 7 day\n\n// filter for SSO authentication events where the authentication step is 0\n// filter on request URI string '/app/' to identify applications for a user\n| where\n    event.action == \"user.authentication.sso\"\n    and okta.authentication_context.authentication_step == 0\n    and okta.debug_context.debug_data.request_uri RLIKE \"(.*)/app/(.*)\"\n\n// dissect the request URI to extract the target application\n| dissect okta.debug_context.debug_data.request_uri\"%{?}/app/%{target_application}/\"\n\n// count the number of unique applications per source IP and user in a 5-minute window\n| stats application_count = count_distinct(target_application), window_count = count(*) by target_time_window, source.ip, okta.actor.alternate_id\n\n// filter for at least 15 distinct applications authenticated from a single source IP\n| where application_count > 15\n","indices":["logs-okta*"],"cleaned_query":"from logs-okta*\n| eval target_time_window = DATE_TRUNC(5 minutes, @timestamp)\n| where @timestamp > now() - 7 day\n| where\n    event.action == \"user.authentication.sso\"\n    and okta.authentication_context.authentication_step == 0\n    and okta.debug_context.debug_data.request_uri RLIKE \"(.*)/app/(.*)\"\n| dissect okta.debug_context.debug_data.request_uri\"%{?}/app/%{target_application}/\"\n| stats application_count = count_distinct(target_application), window_count = count(*) by target_time_window, source.ip, okta.actor.alternate_id\n| where application_count > 15"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"CjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a public client app fails to retrieve an OAuth access token using client credentials because of an uauthorized scope. Adversaries may attempt to retrieve access tokens using client credentials to bypass user authentication and access resources. This query identifies when a public client app fails to retrieve an access token using client credentials and scopes that are not implicitly granted.\n","integration":["okta"],"uuid":"0b936024-71d9-11ef-a9be-f661ea17fbcc","name":"Failed OAuth Access Token Retrieval via Public Client App","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `okta.debug_context.debug_data.flattened.grantType` to identify if the grant type is `client_credentials`","Ignore `okta.debug_context.debug_data.flattened.requestedScopes` values that indicate read-only access","Review `okta.actor.display_name` to identify the public client app that attempted to retrieve the access token. This may help identify the compromised client credentials.","Pivot for successful access token retrieval by the same public client app by searching `event.action` equal to `app.oauth2.as.token.grant.access_token` where the display name is the same."],"mitre":["T1550.001"],"references":[],"queries":[{"query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n| where\n    event.dataset == \"okta.system\"\n\n    // filter on failed access token grant requests where source is a public client app\n    and event.action == \"app.oauth2.as.token.grant\"\n    and okta.actor.type == \"PublicClientApp\"\n    and okta.outcome.result == \"FAILURE\"\n\n    // filter out known Okta and Datadog actors\n    and not (\n        okta.actor.display_name LIKE \"Okta%\"\n        or okta.actor.display_name LIKE \"Datadog%\"\n    )\n\n    // filter for scopes that are not implicitly granted\n    and okta.outcome.reason == \"no_matching_scope\"\n\n| keep @timestamp, event.action, okta.actor.type, okta.outcome.result, okta.outcome.reason, okta.actor.display_name\n","indices":["logs-okta.system*"],"cleaned_query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n| where\n    event.dataset == \"okta.system\"\n    and event.action == \"app.oauth2.as.token.grant\"\n    and okta.actor.type == \"PublicClientApp\"\n    and okta.outcome.result == \"FAILURE\"\n    and not (\n        okta.actor.display_name LIKE \"Okta%\"\n        or okta.actor.display_name LIKE \"Datadog%\"\n    )\n    and okta.outcome.reason == \"no_matching_scope\"\n| keep @timestamp, event.action, okta.actor.type, okta.outcome.result, okta.outcome.reason, okta.actor.display_name"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"CzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user successfully signs on from more than one country in a 15 minute interval. Adversaries may compromise authentication credentials for users or clients and attempt to authenticate from a separate country that the user has not previously authenticated from.\n","integration":["okta"],"uuid":"31585786-71f4-11ef-9e99-f661ea17fbcc","name":"Successful Impossible Travel Sign-On Events","language":["ES|QL"],"license":"Elastic License v2","notes":["`okta.actor.alternate_id` would be target of the threat adversary","Pivoting into a potential compromise requires an additional search for `okta.outcome.result` being `SUCCESS` for any `user.authentication*` value for `okta.event_type`","Pivot to any additional Okta logs after authentication to determine if activity is still being reported by separate countries."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n| where event.dataset == \"okta.system\"\n\n    // filter on successful sign-on events only\n    and okta.event_type == \"policy.evaluate_sign_on\"\n    and okta.outcome.result in (\"ALLOW\", \"SUCCESS\")\n\n// Truncate the timestamp to 1 hour intervals\n| eval time_window = DATE_TRUNC(1 hours, @timestamp)\n\n// Count the number of successful sign-on events for each user every 15 minutes\n| stats country_count = count_distinct(client.geo.country_name) by okta.actor.alternate_id, time_window\n\n// Filter for users who sign on from more than one country in a 15 minute interval\n| where country_count >= 2\n","indices":["logs-okta.system*"],"cleaned_query":"from logs-okta.system*\n| where @timestamp > NOW() - 7 day\n| where event.dataset == \"okta.system\"\n    and okta.event_type == \"policy.evaluate_sign_on\"\n    and okta.outcome.result in (\"ALLOW\", \"SUCCESS\")\n| eval time_window = DATE_TRUNC(1 hours, @timestamp)\n| stats country_count = count_distinct(client.geo.country_name) by okta.actor.alternate_id, time_window\n| where country_count >= 2"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"DDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies MFA bombing attacks in Okta. Adversaries may attempt to flood a user with multiple MFA push notifications to disrupt operations or gain unauthorized access to accounts. This query identifies when a user has more than 5 MFA deny push notifications in a 10 minute window.\n","integration":["okta"],"uuid":"223451b0-6eca-11ef-a070-f661ea17fbcc","name":"Rapid MFA Deny Push Notifications (MFA Bombing)","language":["ES|QL"],"license":"Elastic License v2","notes":["`okta.actor.alternate_id` is the targeted user account.","Pivot and search for `event.action` is `user.authentication.auth_via_mfa` to determine if the target user accepted the MFA push notification.","If a MFA bombing attack is suspected, both username and password are required prior to MFA push notifications. Thus the credentials are likely compromised."],"mitre":["T1621"],"references":[],"queries":[{"query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n\n// Truncate the timestamp to 10 minute windows\n| eval target_time_window = DATE_TRUNC(10 minutes, @timestamp)\n\n// Filter for MFA deny push notifications\n| where event.action == \"user.mfa.okta_verify.deny_push\"\n\n// Count the number of MFA deny push notifications for each user in each 10 minute window\n| stats deny_push_count = count(*) by target_time_window, okta.actor.alternate_id\n\n// Filter for users with more than 5 MFA deny push notifications\n| where deny_push_count >= 5\n","indices":["logs-okta*"],"cleaned_query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n| eval target_time_window = DATE_TRUNC(10 minutes, @timestamp)\n| where event.action == \"user.mfa.okta_verify.deny_push\"\n| stats deny_push_count = count(*) by target_time_window, okta.actor.alternate_id\n| where deny_push_count >= 5"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"DTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies a rare occurrence of a public client app successfully retrieves an OAuth access token using client credentials as the grant type within the last 14 days. Public client applications in Okta that leverage OAuth, client credentials can be used to retrieve access tokens without user consent. Unsecured credentials may be compromised by an adversary whom may use them to request an access token on behalf of the public client app.\n","integration":["okta"],"uuid":"11666aa0-71d9-11ef-a9be-f661ea17fbcc","name":"Rare Occurrence of OAuth Access Token Granted to Public Client App","language":["ES|QL"],"license":"Elastic License v2","notes":["Review `okta.debug_context.debug_data.flattened.grantType` to identify if the grant type is `client_credentials`","Ignore `okta.debug_context.debug_data.flattened.requestedScopes` values that indicate read-only access","Review `okta.actor.display_name` to identify the public client app that attempted to retrieve the access token. This may help identify the compromised client credentials.","False-positives may exist if the public client app is new or has not been used in the last 14 days."],"mitre":["T1550.001"],"references":[],"queries":[{"query":"from logs-okta.system*\n| where @timestamp > NOW() - 14 day\n| where\n\n    // filter for successful OAuth access token grant requests\n    event.action == \"app.oauth2.as.token.grant.access_token\"\n    and event.outcome == \"success\"\n    and event.dataset == \"okta.system\"\n\n    // filter for public client apps\n    and okta.actor.type == \"PublicClientApp\"\n\n    // ignore Elastic Okta integration and DataDog actors\n    and not okta.client.user_agent.raw_user_agent == \"Okta-Integrations\"\n    and not (okta.actor.display_name LIKE \"Okta%\" or okta.actor.display_name LIKE \"Datadog%\")\n\n// count the number of access tokens granted by the same public client app\n| stats token_granted_count = count(*) by okta.actor.display_name\n\n// filter where the public client app has only been granted an access token once in the last 14 days\n| where token_granted_count == 1\n","indices":["logs-okta.system*"],"cleaned_query":"from logs-okta.system*\n| where @timestamp > NOW() - 14 day\n| where\n    event.action == \"app.oauth2.as.token.grant.access_token\"\n    and event.outcome == \"success\"\n    and event.dataset == \"okta.system\"\n    and okta.actor.type == \"PublicClientApp\"\n    and not okta.client.user_agent.raw_user_agent == \"Okta-Integrations\"\n    and not (okta.actor.display_name LIKE \"Okta%\" or okta.actor.display_name LIKE \"Datadog%\")\n| stats token_granted_count = count(*) by okta.actor.display_name\n| where token_granted_count == 1"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"DjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when the average number of failed daily authentication attempts is higher than normal in Okta. Adversaries may attempt to brute force user credentials to gain unauthorized access to accounts. This query calculates the average number of daily failed authentication attempts for each user and identifies when the average is higher than normal.\n","integration":["okta"],"uuid":"c8a35a26-71f1-11ef-9c4e-f661ea17fbcc","name":"Identify High Average of Failed Daily Authentication Attempts","language":["ES|QL"],"license":"Elastic License v2","notes":["Pivot to users by only keeping the first stats statement where `okta.actor.alternate_id` is the targeted accounts.","Pivot for successful logins from the same source IP by searching for `event.action` equal to `user.session.start` or `user.authentication.verify` where the outcome is `SUCCESS`.","User agents can be used to identify anomalous behavior, such as a user agent that is not associated with a known application or user.","Another `WHERE` count can be added to the query if activity has been baseline to filter out known behavior."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n\n// truncate the timestamp to daily intervals\n| eval target_time_window = DATE_TRUNC(1 days, @timestamp)\n| where\n\n    // filter for invalid credential authentication events\n    event.action == \"user.session.start\"\n    and okta.outcome.result == \"FAILURE\"\n    and okta.outcome.reason == \"INVALID_CREDENTIALS\"\n    and okta.actor.type == \"User\"\n\n| stats\n    // count the number of daily failed logins for each day and user\n    failed_daily_logins = count(*) by target_time_window, okta.actor.alternate_id\n\n| stats\n    // calculate the average number of daily failed logins for each day\n    avg_daily_logins = avg(failed_daily_logins) by target_time_window\n\n// sort the results by the average number of daily failed logins in descending order\n| sort avg_daily_logins desc\n","indices":["logs-okta*"],"cleaned_query":"from logs-okta*\n| where @timestamp > NOW() - 7 day\n| eval target_time_window = DATE_TRUNC(1 days, @timestamp)\n| where\n    event.action == \"user.session.start\"\n    and okta.outcome.result == \"FAILURE\"\n    and okta.outcome.reason == \"INVALID_CREDENTIALS\"\n    and okta.actor.type == \"User\"\n| stats\n    failed_daily_logins = count(*) by target_time_window, okta.actor.alternate_id\n| stats\n    avg_daily_logins = avg(failed_daily_logins) by target_time_window\n| sort avg_daily_logins desc"}],"category":"okta","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"DzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when an anonymous user, outside of the known AWS IP ranges, makes multiple `GetObject` requests to a public S3 bucket. Rapid access to objects in a public S3 bucket may indicate an adversary attempting to exfiltrate data or perform reconnaissance on the bucket contents.\n","integration":["aws.cloudtrail"],"uuid":"ef579900-75ef-11ef-b47f-f661ea17fbcc","name":"S3 Public Bucket Rapid Object Access Attempts","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `bucket_name` field to identify the public S3 bucket that the objects were accessed from","Use the `bucket_object` field to identify the objects that were accessed","Review bucket policies and access control lists (ACLs) to ensure that the bucket is not publicly accessible",""],"mitre":["T1530"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where event.provider == \"s3.amazonaws.com\" and event.action == \"GetObject\" and cloud.account.id == \"anonymous\"\n    and NOT CIDR_MATCH(source.ip,\n       \"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\",\n       \"100.64.0.0/10\", \"169.254.0.0/16\", \"127.0.0.0/8\",\n       \"52.95.0.0/16\",\"54.239.0.0/16\", \"18.0.0.0/8\",\n       \"3.0.0.0/8\", \"35.0.0.0/8\")\n| DISSECT aws.cloudtrail.request_parameters \"{%{?bucket_name_key}=%{bucket_name}, %{?host_key}=%{bucket_location}, %{?object_key}=%{bucket_object}}\"\n| STATS s3_bucket_access_count = COUNT(bucket_object) by bucket_name\n| WHERE s3_bucket_access_count >= 15\n","indices":["logs-aws.cloudtrail*"],"cleaned_query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where event.provider == \"s3.amazonaws.com\" and event.action == \"GetObject\" and cloud.account.id == \"anonymous\"\n    and NOT CIDR_MATCH(source.ip,\n       \"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\",\n       \"100.64.0.0/10\", \"169.254.0.0/16\", \"127.0.0.0/8\",\n       \"52.95.0.0/16\",\"54.239.0.0/16\", \"18.0.0.0/8\",\n       \"3.0.0.0/8\", \"35.0.0.0/8\")\n| DISSECT aws.cloudtrail.request_parameters \"{%{?bucket_name_key}=%{bucket_name}, %{?host_key}=%{bucket_location}, %{?object_key}=%{bucket_object}}\"\n| STATS s3_bucket_access_count = COUNT(bucket_object) by bucket_name\n| WHERE s3_bucket_access_count >= 15"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"EDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user makes multiple `GetPasswordData` requests for an EC2 instance. The `GetPasswordData` API call retrieves the encrypted administrator password for an instance running Windows. This API call typically only occurs during the initial launch of an instance or when the password is reset. Multiple requests for the same instance may indicate an adversary attempting to escalate privileges or move laterally within the EC2 environment.\n","integration":["aws.cloudtrail"],"uuid":"408ba5f6-5db7-11ef-a01c-f661ea17fbce","name":"EC2 Suspicious Get User Password Request","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `instance_id` field to identify the EC2 instance for which the `GetPasswordData` requests were made","Check for `RunInstances` API calls to determine if the instance was recently launched or if the password was reset","`aws.cloudtrail.error_code` can provide additional context if the `GetPasswordData` request failed or was denied","Review the `aws.cloudtrail.user_identity*` fields to identify the user making the requests and their role permissions","If a valid account compromise is suspected, review source.* fields for the IP address and geographical location of the request and compare with the user's typical behavior"],"mitre":["T1552.005"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where event.provider == \"ec2.amazonaws.com\" and event.action == \"GetPasswordData\"\n| dissect aws.cloudtrail.request_parameters \"{%{?instance_key}=%{instance_id}}\"\n| stats instance_count = count_distinct(instance_id) by aws.cloudtrail.user_identity.arn\n| where instance_count >= 2\n","indices":["logs-aws.cloudtrail*"],"cleaned_query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where event.provider == \"ec2.amazonaws.com\" and event.action == \"GetPasswordData\"\n| dissect aws.cloudtrail.request_parameters \"{%{?instance_key}=%{instance_id}}\"\n| stats instance_count = count_distinct(instance_id) by aws.cloudtrail.user_identity.arn\n| where instance_count >= 2"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"ETYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers data from AWS CloudTrail logs to identify unusual AWS access key usage for a user. By detecting instances where an access key is used infrequently for a specific AWS event, this query helps identify potential misuse or abuse of AWS access keys. Adversaries may use access keys to gain unauthorized access to AWS resources, exfiltrate data, or perform other malicious activities within the environment.\n","integration":["aws.cloudtrail"],"uuid":"18ce3dbc-b1b3-11ef-9e63-f661ea17fbce","name":"AWS IAM Unusual AWS Access Key Usage for User","language":["ES|QL"],"license":"Elastic License v2","notes":["Review the `aws.cloudtrail.user_identity.arn` and `aws.cloudtrail.user_identity.access_key_id` fields to identify the user and access key involved in the unusual access key usage.","Review the infrequente AWS events (`event.action`), associated with the access key to determine the potential impact of the unusual access key usage.","Within AWS, determine is the access key is temporary or permanent and if it is associated with a specific user or role.","If the access key is associated with a specific role, review the permissions and policies associated with the role to determine the potential impact of the unusual access key usage.","If the access key is associated with an assumed role, review the resources assigned to the role. Consider pivoting on EC2 or Lambda-based roles if identified and examine session metadata within the last 24-hours.","Consider reviewing the `source.address` field to identify the IP address of the actor responsible for the unusual access key usage.","If the access key is perminant and tied to a user or role, consider rotating the access key to prevent further unauthorized access."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"FROM logs-aws.cloudtrail*\n// Limit the search to the last 14 days\n| WHERE @timestamp > now() - 14 day\n| WHERE\n    // Filter for successful AWS CloudTrail events\n    event.dataset == \"aws.cloudtrail\"\n    and event.outcome == \"success\"\n\n    // Filter for AWS CloudTrail events with user identity and access key information\n    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL\n    and aws.cloudtrail.resources.arn IS NOT NULL\n\n    // Ignore GetObject events\n    and event.action NOT IN (\"GetObject\")\n\n    // Filter out known service roles; expand this as needed\n    and NOT aws.cloudtrail.user_identity.arn LIKE \"*AWSServiceRoleForConfig*\"\n    and NOT aws.cloudtrail.user_identity.arn LIKE \"*Elastic-Cloud-Security-Posture*\"\n    and NOT aws.cloudtrail.user_identity.arn LIKE \"*AmazonSSMRoleForInstancesQuickSetup*\"\n\n| STATS\n    // Count the number of events for each daily bucket, user identity, access key, resource, and action\n    api_counts = count(*) by aws.cloudtrail.user_identity.arn, aws.cloudtrail.user_identity.access_key_id, event.action\n\n// Filter for access keys with less than 2 API calls per day\n| WHERE api_counts < 2\n| SORT api_counts ASC\n","indices":["logs-aws.cloudtrail*"],"cleaned_query":"FROM logs-aws.cloudtrail*\n| WHERE @timestamp > now() - 14 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\"\n    and event.outcome == \"success\"\n    and aws.cloudtrail.user_identity.access_key_id IS NOT NULL\n    and aws.cloudtrail.resources.arn IS NOT NULL\n    and event.action NOT IN (\"GetObject\")\n    and NOT aws.cloudtrail.user_identity.arn LIKE \"*AWSServiceRoleForConfig*\"\n    and NOT aws.cloudtrail.user_identity.arn LIKE \"*Elastic-Cloud-Security-Posture*\"\n    and NOT aws.cloudtrail.user_identity.arn LIKE \"*AmazonSSMRoleForInstancesQuickSetup*\"\n| STATS\n    api_counts = count(*) by aws.cloudtrail.user_identity.arn, aws.cloudtrail.user_identity.access_key_id, event.action\n| WHERE api_counts < 2\n| SORT api_counts ASC"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"EjYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunting query gathers evidence of an SNS topic created by a user who does not typically perform this action. Adversaries may create SNS topics to stage capabilities for data exfiltration or other malicious activities.\n","integration":["aws.cloudtrail"],"uuid":"80955fb2-e952-11ef-b7cc-f661ea17fbce","name":"SNS Topic Created by Rare User","language":["ES|QL"],"license":"Elastic License v2","notes":["It is unusual for credentials from an assumed role for an EC2 instance to be creating SNS topics randomly.","If a user identity access key (`aws.cloudtrail.user_identity.access_key_id`) exists in the CloudTrail audit log, then this request was accomplished via the CLI or programmatically. These keys could be compromised and warrant further investigation.","Pivot into `Publish` API actions being called to this specific topic to identify which AWS resource is publishing messages. With access to the topic, you could further investigate the subscribers list to identify unauthorized subscribers."],"mitre":["T1608"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| WHERE @timestamp > now() - 7 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"CreateTopic\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n| DISSECT aws.cloudtrail.request_parameters \"{%{?topic_name_key}=%{topic_name}}\"\n| DISSECT aws.cloudtrail.user_identity.arn \"%{?}:assumed-role/%{assumed_role_name}/%{entity}\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| WHERE STARTS_WITH(entity, \"i-\")\n| KEEP cloud.account.id, entity, assumed_role_name, cloud.region, user_agent_name\n| STATS regional_topic_created_count = COUNT(*) by cloud.account.id, entity, assumed_role_name, cloud.region, user_agent_name\n| SORT regional_topic_created_count ASC\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| WHERE @timestamp > now() - 7 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"CreateTopic\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n| DISSECT aws.cloudtrail.request_parameters \"{%{?topic_name_key}=%{topic_name}}\"\n| DISSECT aws.cloudtrail.user_identity.arn \"%{?}:assumed-role/%{assumed_role_name}/%{entity}\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| WHERE STARTS_WITH(entity, \"i-\")\n| KEEP cloud.account.id, entity, assumed_role_name, cloud.region, user_agent_name\n| STATS regional_topic_created_count = COUNT(*) by cloud.account.id, entity, assumed_role_name, cloud.region, user_agent_name\n| SORT regional_topic_created_count ASC"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"EzYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"An attacker with compromised EC2 instance credentials, may use those credentials to attempt remote code execution against the EC2 instance from which the credentials were compromised via SSM SendCommand API.\n","integration":["aws.cloudtrail"],"uuid":"38454a64-5b55-11ef-b345-f661ea17fbce","name":"SSM SendCommand API Used by EC2 Instance","language":["ES|QL"],"license":"Elastic License v2","notes":["The indicator that this is an EC2 instance assuming a role and performing the action, is the use of the instance id beginning with -i as the session name.","Session name is attached to the end of the `user.id` field and the `aws.cloudtrail.user_identity.arn`."],"mitre":["T1651"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"ssm.amazonaws.com\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n    and event.action == \"SendCommand\"\n    and user.id like \"*:i-*\"\n| keep @timestamp, event.provider, event.action, aws.cloudtrail.user_identity.type, user.id, aws.cloudtrail.request_parameters\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"ssm.amazonaws.com\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n    and event.action == \"SendCommand\"\n    and user.id like \"*:i-*\"\n| keep @timestamp, event.provider, event.action, aws.cloudtrail.user_identity.type, user.id, aws.cloudtrail.request_parameters"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"FDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user signs in to the AWS Management Console using a federated session and single-factor authentication. Federated sessions are typically used by users who are not directly managed by AWS IAM or have temporary credentials. Single-factor authentication without MFA may indicate a security risk, as MFA adds an additional layer of security to the authentication process. This could also indicate the abuse of STS tokens to bypass MFA requirements.\n","integration":["aws.cloudtrail"],"uuid":"953b1252-5efd-11ef-a997-f661ea17fbce","name":"Signin Single Factor Console Login via Federated Session","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `aws.cloudtrail.user_identity.type` field to identify the user type making the request. Federated users are typically given temporary credentials to access AWS services.","`aws.cloudtrail.user_identity.session_context.session_issuer.arn` field represents the ARN of the IAM entity that created the federated session. This IAM entity could be compromised and used to create federated sessions."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"signin.amazonaws.com\"\n    and event.action == \"GetSigninToken\"\n    and aws.cloudtrail.event_type == \"AwsConsoleSignIn\"\n    and aws.cloudtrail.user_identity.type == \"FederatedUser\"\n| dissect aws.cloudtrail.additional_eventdata \"{%{?mobile_version_key}=%{mobile_version}, %{?mfa_used_key}=%{mfa_used}}\"\n| where mfa_used == \"No\"\n| keep @timestamp, event.provider, event.action, aws.cloudtrail.event_type, aws.cloudtrail.user_identity.type, aws.cloudtrail.additional_eventdata, mobile_version, mfa_used\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"signin.amazonaws.com\"\n    and event.action == \"GetSigninToken\"\n    and aws.cloudtrail.event_type == \"AwsConsoleSignIn\"\n    and aws.cloudtrail.user_identity.type == \"FederatedUser\"\n| dissect aws.cloudtrail.additional_eventdata \"{%{?mobile_version_key}=%{mobile_version}, %{?mfa_used_key}=%{mfa_used}}\"\n| where mfa_used == \"No\"\n| keep @timestamp, event.provider, event.action, aws.cloudtrail.event_type, aws.cloudtrail.user_identity.type, aws.cloudtrail.additional_eventdata, mobile_version, mfa_used"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"FTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword","notes.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies the deletion or stopping of multiple service logging actions within AWS. Service logging is a critical security control that provides visibility into the activities and changes within AWS services. Adversaries may attempt to disable or delete service logging to evade detection and cover their tracks. Monitoring for multiple service logging deletions or stops can help identify potential malicious activity and ensure that critical security controls remain intact.\n","integration":["aws.cloudtrail"],"uuid":"d74f8928-5e46-11ef-9488-f661ea17fbce","name":"Multiple Service Logging Deleted or Stopped","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `event.provider` field to identify the service logging action that was deleted or stopped","Use the `event.action` field to identify the specific action that was taken on the service logging","Review the `aws.cloudtrail.user_identity*` fields to identify the user making the requests and their role permissions","Review the `source.*` fields for the IP address and geographical location of the request and compare with the user's typical behavior","Check for `CreateFlowLogs`, `CreateResolverQueryLogConfig`, `CreateTrail`, and `StartLogging` API calls to determine if the service logging was recently enabled or started. This could help determine if the deletion was due to maintence or configuration changes","Use ES|QL `stats` function to aggregated on date to identify patterns of multiple service logging deletions or stops",""],"mitre":["T1562.008"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where\n    event.provider in (\"ec2.amazonaws.com\",\"route53resolver.amazonaws.com\",\"s3.amazonaws.com\", \"cloudtrail.amazonaws.com\")\n    and event.action in (\"DeleteFlowLogs\",\"DeleteResolverQueryLogConfig\", \"DeleteTrail\", \"StopLogging\")\n| eval date = DATE_FORMAT(\"YYYY-mm-dd\", @timestamp)\n| stats service_logging_delete_count = count(*) by event.provider, event.action, event.outcome, date, aws.cloudtrail.user_identity.arn\n","indices":["logs-aws.cloudtrail*"],"cleaned_query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where\n    event.provider in (\"ec2.amazonaws.com\",\"route53resolver.amazonaws.com\",\"s3.amazonaws.com\", \"cloudtrail.amazonaws.com\")\n    and event.action in (\"DeleteFlowLogs\",\"DeleteResolverQueryLogConfig\", \"DeleteTrail\", \"StopLogging\")\n| eval date = DATE_FORMAT(\"YYYY-mm-dd\", @timestamp)\n| stats service_logging_delete_count = count(*) by event.provider, event.action, event.outcome, date, aws.cloudtrail.user_identity.arn"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"FjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a high frequency of `GetSecretValue` API calls are made to the AWS Secrets Manager service programmatically. The `GetSecretValue` API call retrieves the secret value for a specified secret. High frequency of these calls may indicate an adversary attempting to access sensitive information stored in AWS Secrets Manager via a compromised account or automated tooling.\n","integration":["aws.cloudtrail"],"uuid":"ef244ca0-5e32-11ef-a8d3-f661ea17fbce","name":"Secrets Manager High Frequency of Programmatic GetSecretValue API Calls","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `secret_value` field to identify the secret value that was accessed by adding it to the `stats` statement","Review the `aws.cloudtrail.user_identity*` fields to identify the user making the requests and their role permissions","`user_agent.name` field can provide additional context on the tool or application making the API calls. If not `aws-sdk` or known application, investigate further.","Review the `source.*` fields for the IP address and geographical location of the request and compare with the user's typical behavior","The `aws.cloudtrail.user_identity.arn` field can provide additional context on the user making the request and their role permissions. Recent changes to role permissions or unusual logins may indicate a compromised account","`user_agent.name` field can provide additional context on the tool or application making the API calls. If not `aws-sdk` or known application, investigate further."],"mitre":["T1555.006"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"secretsmanager.amazonaws.com\"\n    and event.action == \"GetSecretValue\"\n    and user_agent.name not in (\"Chrome\",\"Firefox\",\"Safari\", \"Edge\", \"Brave\", \"Opera\")\n| dissect aws.cloudtrail.request_parameters \"%{}secret:%{secret_value}}\"\n| stats request_counts = count(*) by event.action, aws.cloudtrail.user_identity.arn, source.ip, user_agent.name\n| sort request_counts asc\n","indices":["logs-aws.cloudtrail*"],"cleaned_query":"from logs-aws.cloudtrail*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"secretsmanager.amazonaws.com\"\n    and event.action == \"GetSecretValue\"\n    and user_agent.name not in (\"Chrome\",\"Firefox\",\"Safari\", \"Edge\", \"Brave\", \"Opera\")\n| dissect aws.cloudtrail.request_parameters \"%{}secret:%{secret_value}}\"\n| stats request_counts = count(*) by event.action, aws.cloudtrail.user_identity.arn, source.ip, user_agent.name\n| sort request_counts asc"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"FzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a single AWS resource is making `GetServiceQuota` API calls for the EC2 service quota L-1216C47A in more than 10 regions within a 30-second window. Quota code L-1216C47A represents on-demand instances which are used by adversaries to deploy malware and mine cryptocurrency. This could indicate a potential threat actor attempting to discover the AWS infrastructure across multiple regions using compromised credentials or a compromised instance.\n","integration":["aws.cloudtrail"],"uuid":"7a083b24-6482-11ef-8a8f-f661ea17fbcc","name":"High Frequency of Service Quotas Multi-Region `GetServiceQuota` API Calls","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `aws.cloudtrail.user_identity.arn` field to identify the user making the requests and their role permissions","Use the `cloud.region` field to identify the regions where the `GetServiceQuota` API calls were made","Review Elastic Defend alerts for endpoint related activity to identify potential malware or cryptocurrency mining activity","If a valid account compromise is suspected, review source.* fields for the IP address and geographical location of the request and compare with the user's typical behavior","Query for `RunInstances` API calls to determine if new instances were launched using the on-demand instances","If new instances were launched, review the instance metadata and user data scripts for malicious content"],"mitre":["T1580"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n\n// filter for GetServiceQuota API calls\n| where event.dataset == \"aws.cloudtrail\" and event.provider = \"servicequotas.amazonaws.com\" and event.action == \"GetServiceQuota\"\n\n// truncate the timestamp to a 30-second window\n| eval target_time_window = DATE_TRUNC(30 seconds, @timestamp)\n\n// pre-process the request parameters to extract the service code and quota code\n| dissect aws.cloudtrail.request_parameters \"{%{?service_code_key}=%{service_code}, %{?quota_code_key}=%{quota_code}}\"\n\n// filter for EC2 service quota L-1216C47A (vCPU on-demand instances)\n| where service_code == \"ec2\" and quota_code == \"L-1216C47A\"\n\n// count the number of unique regions and total API calls within the 30-second window\n| stats region_count = count_distinct(cloud.region), window_count = count(*) by target_time_window, aws.cloudtrail.user_identity.arn\n\n// filter for resources making DescribeInstances API calls in more than 10 regions within the 30-second window\n| where region_count >= 10 and window_count >= 10\n\n// sort the results by time windows in descending order\n| sort target_time_window desc\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\" and event.provider = \"servicequotas.amazonaws.com\" and event.action == \"GetServiceQuota\"\n| eval target_time_window = DATE_TRUNC(30 seconds, @timestamp)\n| dissect aws.cloudtrail.request_parameters \"{%{?service_code_key}=%{service_code}, %{?quota_code_key}=%{quota_code}}\"\n| where service_code == \"ec2\" and quota_code == \"L-1216C47A\"\n| stats region_count = count_distinct(cloud.region), window_count = count(*) by target_time_window, aws.cloudtrail.user_identity.arn\n| where region_count >= 10 and window_count >= 10\n| sort target_time_window desc"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"GDYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunting query gathers evidence of an SNS topic message published by a user who does not typically perform this action. Adversaries may publish messages to SNS topics to stage capabilities for data exfiltration or other malicious activities.\n","integration":["aws.cloudtrail"],"uuid":"db405900-e955-11ef-8c29-f661ea17fbce","name":"SNS Topic Message Published by Rare User","language":["ES|QL"],"license":"Elastic License v2","notes":["If a user identity access key (`aws.cloudtrail.user_identity.access_key_id`) exists in the CloudTrail audit log, then this request was accomplished via the CLI or programmatically. These keys could be compromised and warrant further investigation.","If you notice Terraform, Pulumi, etc. it may be related to testing environments, maintenance or more.","Python SDKs that are not AWS, may indicate custom tooling or scripts being leveraged."],"mitre":["T1567","T1566.003"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"Publish\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n| DISSECT aws.cloudtrail.request_parameters \"{%{?message_key}=%{message}, %{?topic_key}=%{topic_arn}}\"\n| DISSECT aws.cloudtrail.user_identity.arn \"%{?}:assumed-role/%{assumed_role_name}/%{entity}\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| WHERE STARTS_WITH(entity, \"i-\")\n| KEEP cloud.account.id, entity, assumed_role_name, topic_arn, cloud.region, user_agent_name\n| STATS regional_topic_publish_count = COUNT(*) by cloud.account.id, entity, assumed_role_name, topic_arn, cloud.region, user_agent_name\n| SORT regional_topic_publish_count ASC\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"Publish\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n| DISSECT aws.cloudtrail.request_parameters \"{%{?message_key}=%{message}, %{?topic_key}=%{topic_arn}}\"\n| DISSECT aws.cloudtrail.user_identity.arn \"%{?}:assumed-role/%{assumed_role_name}/%{entity}\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| WHERE STARTS_WITH(entity, \"i-\")\n| KEEP cloud.account.id, entity, assumed_role_name, topic_arn, cloud.region, user_agent_name\n| STATS regional_topic_publish_count = COUNT(*) by cloud.account.id, entity, assumed_role_name, topic_arn, cloud.region, user_agent_name\n| SORT regional_topic_publish_count ASC"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"GTYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunting query gathers evidence of potential abuse of the SNS service to send direct-to-phone text messages. Adversaries may use this technique to send smishing messages or deliver other types of malicious content directly to users' phones.\n","integration":["aws.cloudtrail"],"uuid":"21e4d0ee-e955-11ef-8c29-f661ea17fbce","name":"SNS Direct-to-Phone Messaging Spike","language":["ES|QL"],"license":"Elastic License v2","notes":["AWS removes phone numbers in logs, so deeper analysis via CloudWatch logs may be necessary.","While investigating in CloudWatch, the message context is also sanitized. It would be ideal to investigate the message for any suspicious URL links being embedded in the text messages.","You can also review AWS SNS delivery logs (if enabled) for message metadata.","If messages are not using a topic-based subscription, it suggests direct targeting.","The source of these requests is important, if you notice them from an EC2 instance, that is rather odd or Lambda may be an expected serverless code","Review if `aws.cloudtrail.user_identity.access_key_id` exists in the CloudTrail audit log, then this request was accomplished via the CLI or programmatically. These keys could be compromised and warrant further investigation.","If direct SMS messages are common in your environment, you can adjust the threshold accordingly."],"mitre":["T1660"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| WHERE @timestamp > now() - 7 day\n| EVAL target_time_window = DATE_TRUNC(10 seconds, @timestamp)\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"Publish\" AND\n    event.outcome == \"success\" AND\n    aws.cloudtrail.request_parameters LIKE \"*phoneNumber*\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| KEEP target_time_window, cloud.account.id, aws.cloudtrail.user_identity.arn, cloud.region, source.address, user_agent_name\n| STATS sms_message_count = COUNT(*) by target_time_window, cloud.account.id, aws.cloudtrail.user_identity.arn, cloud.region, source.address, user_agent_name\n| WHERE sms_message_count > 30\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| WHERE @timestamp > now() - 7 day\n| EVAL target_time_window = DATE_TRUNC(10 seconds, @timestamp)\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"Publish\" AND\n    event.outcome == \"success\" AND\n    aws.cloudtrail.request_parameters LIKE \"*phoneNumber*\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| KEEP target_time_window, cloud.account.id, aws.cloudtrail.user_identity.arn, cloud.region, source.address, user_agent_name\n| STATS sms_message_count = COUNT(*) by target_time_window, cloud.account.id, aws.cloudtrail.user_identity.arn, cloud.region, source.address, user_agent_name\n| WHERE sms_message_count > 30"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"GjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers data for evidence of an adversary creating a user in AWS and then assigning administrative rights to that user. The `CreateUser` API call to IAM allows the adversary to create the user and then `AttachUserPolicy` where `policy/AdministratorAccess` is identified should match attempts to assign administrative privileges.\n","integration":["aws.cloudtrail"],"uuid":"696c3f40-5b54-11ef-b9df-f661ea17fbce","name":"User Creation with Administrator Policy Assigned","language":["ES|QL"],"license":"Elastic License v2","notes":["`aws.cloudtrail.request_parameters` contains the target user the policy is being attached to or the user being created","`count_distinct` ensures that the user was just created, but also had the administrative policy attached within the respective time window","There is a chance that timestamps could be out-of-order based on ingestion and event generation in AWS CloudTrail","The target user's IAM policies should be reviewed to ensure MFA is enabled","Reviewing the AWS ARN in the event should identify which user made these changes; this user ID should be used to pivot into potential valid account compromise"],"mitre":["T1098.003","T1136.003"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"iam.amazonaws.com\"\n    and event.outcome == \"success\"\n    and (event.action == \"CreateUser\" or\n        (event.action == \"AttachUserPolicy\" and aws.cloudtrail.request_parameters rlike \".*AdministratorAccess.*\"))\n| stats unique_action_count = count_distinct(event.action) by user.target.name\n| where unique_action_count == 2\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"iam.amazonaws.com\"\n    and event.outcome == \"success\"\n    and (event.action == \"CreateUser\" or\n        (event.action == \"AttachUserPolicy\" and aws.cloudtrail.request_parameters rlike \".*AdministratorAccess.*\"))\n| stats unique_action_count = count_distinct(event.action) by user.target.name\n| where unique_action_count == 2"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"GzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathered evidence of an SNS topic subscribed to by an email address of a user who does not typically perform this action. Adversaries may subscribe to SNS topics to collect sensitive information or exfiltrate data via an external email address.\n","integration":["aws.cloudtrail"],"uuid":"fb752e42-e952-11ef-85e7-f661ea17fbce","name":"SNS Topic Subscription with Email by Rare User","language":["ES|QL"],"license":"Elastic License v2","notes":["If a user identity access key (aws.cloudtrail.user_identity.access_key_id) exists in the CloudTrail audit log, then this request was accomplished via the CLI or programmatically. These keys could be compromised and warrant further investigation.","Ignoring the topic ARN during aggregation is important to identify first occurrence anomalies of subscribing to SNS topic with an email.","Another query may be required with the user identity arn as an inclusion filter to identify which topic they subscribed to."],"mitre":["T1567","T1530"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"Subscribe\"\n| DISSECT aws.cloudtrail.request_parameters \"%{?protocol_key}=%{protocol}, %{?endpoint_key}=%{redacted}, %{?return_arn}=%{return_bool}, %{?topic_arn_key}=%{topic_arn}}\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| WHERE protocol == \"email\"\n| KEEP cloud.region, source.address, aws.cloudtrail.user_identity.arn, user_agent_name\n| STATS regional_topic_subscription_count = COUNT(*) by aws.cloudtrail.user_identity.arn, cloud.region, source.address, user_agent_name\n| WHERE regional_topic_subscription_count == 1\n| SORT regional_topic_subscription_count ASC\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| WHERE\n    event.dataset == \"aws.cloudtrail\" AND\n    event.provider == \"sns.amazonaws.com\" AND\n    event.action == \"Subscribe\"\n| DISSECT aws.cloudtrail.request_parameters \"%{?protocol_key}=%{protocol}, %{?endpoint_key}=%{redacted}, %{?return_arn}=%{return_bool}, %{?topic_arn_key}=%{topic_arn}}\"\n| DISSECT user_agent.original \"%{user_agent_name} %{?user_agent_remainder}\"\n| WHERE protocol == \"email\"\n| KEEP cloud.region, source.address, aws.cloudtrail.user_identity.arn, user_agent_name\n| STATS regional_topic_subscription_count = COUNT(*) by aws.cloudtrail.user_identity.arn, cloud.region, source.address, user_agent_name\n| WHERE regional_topic_subscription_count == 1\n| SORT regional_topic_subscription_count ASC"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"HDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword","notes.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user requests temporary federated credentials with a duration greater than 24 hours or with the `AdministratorAccess` policy attached. Federated users are typically given temporary credentials to access AWS services. A duration greater than 24 hours or the `AdministratorAccess` policy attached may indicate an adversary attempting to maintain access to AWS services for an extended period of time or escalate privileges.\n","integration":["aws.cloudtrail"],"uuid":"3f8393b2-5f0b-11ef-8a25-f661ea17fbce","name":"STS Suspicious Federated Temporary Credential Request","language":["ES|QL"],"license":"Elastic License v2","notes":["If the `aws.cloudtrail.user_identity.arn` does not match the `user_name` field, this may indicate an adversary attempting to escalate privileges by requesting temporary credentials for a different user.","Review `event.outcome` field to identify if the request was successful or failed.","The `aws.cloudtrail.user_identity.session_context.session_issuer.arn` field represents the ARN of the IAM entity that created the federated session. This IAM entity could be compromised and used to create federated sessions. This could indicate the compromised credentials or role used to create the federated session.","An additional query for `event.provider` being `signin.amazonaws.com` and `event.action` being `GetSigninToken` can be used to identify if the temporary credentials are being exchanged for console access."],"mitre":["T1550.001"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"sts.amazonaws.com\"\n    and event.action == \"GetFederationToken\"\n| dissect aws.cloudtrail.request_parameters \"{%{}name=%{user_name},\"\n| dissect aws.cloudtrail.request_parameters \"{%{}durationSeconds=%{duration_requested},\"\n| dissect aws.cloudtrail.request_parameters \"{%{}policyArns=[%{policies_applied}]\"\n| eval duration_minutes = to_integer(duration_requested) / 60\n| where (duration_minutes > 1440) or (policies_applied RLIKE \".*AdministratorAccess.*\")\n| keep @timestamp, event.dataset, event.provider, event.action, aws.cloudtrail.request_parameters, user_name, duration_requested, duration_minutes, policies_applied\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"sts.amazonaws.com\"\n    and event.action == \"GetFederationToken\"\n| dissect aws.cloudtrail.request_parameters \"{%{}name=%{user_name},\"\n| dissect aws.cloudtrail.request_parameters \"{%{}durationSeconds=%{duration_requested},\"\n| dissect aws.cloudtrail.request_parameters \"{%{}policyArns=[%{policies_applied}]\"\n| eval duration_minutes = to_integer(duration_requested) / 60\n| where (duration_minutes > 1440) or (policies_applied RLIKE \".*AdministratorAccess.*\")\n| keep @timestamp, event.dataset, event.provider, event.action, aws.cloudtrail.request_parameters, user_name, duration_requested, duration_minutes, policies_applied"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"HTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user makes EC2 `RunInstances` API calls with a high instance deployment count within a 7-day window. The `RunInstances` API call launches one or more instances in a specified subnet. High instance deployment counts may indicate an adversary attempting to deploy a large number of instances for cryptomining or other malicious activities. This may also aid in identifying potential resource abuse or misconfigurations.\n","integration":["aws.cloudtrail"],"uuid":"c3d24ae8-655d-11ef-a990-f661ea17fbcc","name":"High EC2 Instance Deployment Count Attempts by Single User or Role","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `aws.cloudtrail.user_identity.arn` field to identify the user making the requests and their role permissions","Review `cloud.region` to identify the regions where the `RunInstances` API calls were made","`subnet_id` should be reviewed to identify the subnet where the instances are being deployed but can also help pivot and narrow down the scope of further queries","`instance_type` should be reviewed to identify the type of instances being deployed. Cryptomining campaigns often deploy specific instance types to maximize mining efficiency"],"mitre":["T1578.002"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"ec2.amazonaws.com\"\n    and event.action == \"RunInstances\"\n    and aws.cloudtrail.request_parameters RLIKE \".*minCount.*maxCount.*\"\n| eval date = DATE_FORMAT(\"YYYY-mm-dd\", @timestamp)\n| dissect aws.cloudtrail.request_parameters \"%{}subnetId=%{subnet_id},\"\n| dissect aws.cloudtrail.request_parameters \"%{}minCount=%{min_count},\"\n| dissect aws.cloudtrail.request_parameters \"%{}maxCount=%{max_count}}]},\"\n| dissect aws.cloudtrail.request_parameters \"%{}instanceType=%{instance_type},\"\n| stats\n    target_instance_count = sum(to_integer(max_count) - to_integer(min_count) + 1),\n    user_attempts = count(*) by user.name, date, subnet_id, instance_type, event.outcome\n| where target_instance_count >= 10\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"ec2.amazonaws.com\"\n    and event.action == \"RunInstances\"\n    and aws.cloudtrail.request_parameters RLIKE \".*minCount.*maxCount.*\"\n| eval date = DATE_FORMAT(\"YYYY-mm-dd\", @timestamp)\n| dissect aws.cloudtrail.request_parameters \"%{}subnetId=%{subnet_id},\"\n| dissect aws.cloudtrail.request_parameters \"%{}minCount=%{min_count},\"\n| dissect aws.cloudtrail.request_parameters \"%{}maxCount=%{max_count}}]},\"\n| dissect aws.cloudtrail.request_parameters \"%{}instanceType=%{instance_type},\"\n| stats\n    target_instance_count = sum(to_integer(max_count) - to_integer(min_count) + 1),\n    user_attempts = count(*) by user.name, date, subnet_id, instance_type, event.outcome\n| where target_instance_count >= 10"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"HjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies instances where customer-managed IAM policies are attached to existing roles, potentially indicating a privilege escalation attempt. By detecting unexpected actors attaching customer-managed policies with elevated permissions to roles, this query helps identify potential abuse or misuse within AWS. Adversaries may attach these policies to gain unauthorized permissions or enable lateral movement and persistence within the environment.\n","integration":["aws.cloudtrail"],"uuid":"418baaf2-9ae1-11ef-be63-f661ea17fbcd","name":"AWS IAM Customer-Managed Policy Attachment to Existing Roles","language":["ES|QL"],"license":"Elastic License v2","notes":["Review the `attached_policy_name` and `target_role_name` fields to identify the customer-managed policy and role involved in the attachment.","Review the permissions of the attached policy to determine the potential impact of the privilege escalation attempt.","Review all entities that `target_role_name` may be attached to as these entities may have been compromised or misused.","Consider reviewing the `aws.cloudtrail.user_identity.arn` field to identify the actor responsible for the privilege escalation attempt.","Review the user agent of the actor to determine the source of the privilege escalation attempt, such as an AWS CLI or SDK."],"mitre":["T1548.005"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail*\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"iam.amazonaws.com\"\n    and event.action == \"AttachRolePolicy\"\n    and event.outcome == \"success\"\n| dissect aws.cloudtrail.request_parameters \"{%{}::%{owner}:%{?policy_key}/%{attached_policy_name}, %{?role_name_key}=%{target_role_name}}\"\n| where owner != \"aws\"\n| stats\n    actor_attaching_role_count = count(*) by aws.cloudtrail.user_identity.arn, attached_policy_name, target_role_name\n","indices":["logs-aws.cloudtrail*"],"cleaned_query":"from logs-aws.cloudtrail*\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"iam.amazonaws.com\"\n    and event.action == \"AttachRolePolicy\"\n    and event.outcome == \"success\"\n| dissect aws.cloudtrail.request_parameters \"{%{}::%{owner}:%{?policy_key}/%{attached_policy_name}, %{?role_name_key}=%{target_role_name}}\"\n| where owner != \"aws\"\n| stats\n    actor_attaching_role_count = count(*) by aws.cloudtrail.user_identity.arn, attached_policy_name, target_role_name"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"HzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers data for evidence of an adversary adding permissions to a Lambda function that allows write actions. The `AddPermission` API call to Lambda allows the adversary to add permissions to a Lambda function. This query identifies when the `AddPermission` API call is used to add permissions that allow write actions to a Lambda function. Adversaries may use this technique to grant themselves additional permissions to write to a Lambda function, which could be used to execute malicious code or exfiltrate data.\n","integration":["aws.cloudtrail"],"uuid":"e3206d1c-64a9-11ef-a642-f661ea17fbcc","name":"Lambda Add Permissions for Write Actions to Function","language":["ES|QL"],"license":"Elastic License v2","notes":["Analyze the `principal_id` to identify the entity that the permission is being granted to. Adversaries may use this technique to grant themselves additional permissions.","Review the `function_name` to identify the Lambda function that the permission is being added to.","Identify the `action_value` to determine the type of action that the permission allows. Write actions may include `Invoke`, `Update`, or `Put`.",""],"mitre":["T1584.007"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"lambda.amazonaws.com\"\n    and event.action RLIKE \"AddPermission.*\"\n| dissect aws.cloudtrail.request_parameters \"{%{?principal_key}=%{principal_id}, %{?function_name_key}=%{function_name}, %{?statement_key}=%{statement_value}, %{?action_key}=lambda:%{action_value}}\"\n| eval write_action = (starts_with(action_value, \"Invoke\") or starts_with(\"Update\", action_value) or starts_with(\"Put\", action_value))\n| where write_action == true\n| keep @timestamp, principal_id, event.provider, event.action, aws.cloudtrail.request_parameters, principal_id, function_name, action_value, statement_value, write_action\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.dataset == \"aws.cloudtrail\"\n    and event.provider == \"lambda.amazonaws.com\"\n    and event.action RLIKE \"AddPermission.*\"\n| dissect aws.cloudtrail.request_parameters \"{%{?principal_key}=%{principal_id}, %{?function_name_key}=%{function_name}, %{?statement_key}=%{statement_value}, %{?action_key}=lambda:%{action_value}}\"\n| eval write_action = (starts_with(action_value, \"Invoke\") or starts_with(\"Update\", action_value) or starts_with(\"Put\", action_value))\n| where write_action == true\n| keep @timestamp, principal_id, event.provider, event.action, aws.cloudtrail.request_parameters, principal_id, function_name, action_value, statement_value, write_action"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"IDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers data for evidence of an IAM user activity with no MFA session. This query identifies IAM user activity where the user is not MFA authenticated. Adversaries often target IAM users with weak or no MFA protection to gain unauthorized access to AWS resources after compromising the user's credentials via phishing, third-party breaches, or brute-forcing.\n","integration":["aws.cloudtrail"],"uuid":"913a47be-649c-11ef-a693-f661ea17fbcc","name":"IAM User Activity with No MFA Session","language":["ES|QL"],"license":"Elastic License v2","notes":["Review the `user_identity.arn` field to identify if activity is sourcing from a browser or programmatically via the AWS CLI or SDK.","Review aggregated counts of API calls made for suspicious discovery or reconnaissance such as `List*`, `Describe*`, or `Get*` API calls."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\"\n    and aws.cloudtrail.user_identity.type == \"IAMUser\"\n    and aws.cloudtrail.user_identity.session_context.mfa_authenticated == \"false\"\n    and not user_agent.original in (\"cloudformation.amazonaws.com\", \"application-autoscaling.amazonaws.com\", \"AWS Internal\")\n    and (aws.cloudtrail.user_identity.access_key_id is null or aws.cloudtrail.user_identity.access_key_id == \"\")\n| stats activity_counts = count(*) by event.provider, event.action, aws.cloudtrail.user_identity.arn\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\"\n    and aws.cloudtrail.user_identity.type == \"IAMUser\"\n    and aws.cloudtrail.user_identity.session_context.mfa_authenticated == \"false\"\n    and not user_agent.original in (\"cloudformation.amazonaws.com\", \"application-autoscaling.amazonaws.com\", \"AWS Internal\")\n    and (aws.cloudtrail.user_identity.access_key_id is null or aws.cloudtrail.user_identity.access_key_id == \"\")\n| stats activity_counts = count(*) by event.provider, event.action, aws.cloudtrail.user_identity.arn"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"ITYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user starts a remote session to an EC2 instance using the AWS Systems Manager (SSM) service. The `StartSession` API call allows users to connect to an EC2 instance using the SSM service. Multiple `StartSession` requests to the same EC2 instance may indicate an adversary attempting to gain access to the instance for malicious purposes. By default on certain AMI types, the SSM agent is pre-installed and running, allowing for easy access to the instance without the need for SSH or RDP.\n","integration":["aws.cloudtrail"],"uuid":"f9eae44e-5e4d-11ef-878f-f661ea17fbce","name":"SSM Start Remote Session to EC2 Instance","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `target_instance` field to identify the EC2 instance that the user connected to using the SSM service","Review the `aws.cloudtrail.user_identity*` fields to identify the user making the requests and their role permissions","The `event.outcome` field can provide additional context on the success or failure of the `StartSession` request","Identify if the EC2 instance was recently launched by filtering `event.action` field for `RunInstances` API calls. If the instance was not recently launched, investigate further","Sessions started from IAM users may be benign, but sessions where the `aws.cloudtrail.user_identity.type` is `AssumedRole` are suspicious as they indicate instance to instance connections."],"mitre":["T1021.007"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.provider == \"ssm.amazonaws.com\" and event.action == \"StartSession\"\n| dissect aws.cloudtrail.request_parameters \"{%{target_key}=%{target_instance}}\"\n| stats user_instance_counts = count(*) by target_instance, aws.cloudtrail.user_identity.arn, aws.cloudtrail.user_identity.type, event.outcome\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.provider == \"ssm.amazonaws.com\" and event.action == \"StartSession\"\n| dissect aws.cloudtrail.request_parameters \"{%{target_key}=%{target_instance}}\"\n| stats user_instance_counts = count(*) by target_instance, aws.cloudtrail.user_identity.arn, aws.cloudtrail.user_identity.type, event.outcome"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"IjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user makes multiple `DescribeInstances` API calls in multiple regions within a 30-second window. The `DescribeInstances` API call retrieves information about one or more EC2 instances in a region. High frequency of `DescribeInstances` API calls across multiple regions may indicate an adversary attempting to discover the EC2 instances in the account or perform reconnaissance on the EC2 environment.\n","integration":["aws.cloudtrail"],"uuid":"e6e78858-6482-11ef-93bd-f661ea17fbcc","name":"High Frequency of EC2 Multi-Region `DescribeInstances` API Calls","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `aws.cloudtrail.user_identity.arn` field to identify the user making the requests and their role permissions","Use the `cloud.region` field to identify the regions where the `DescribeInstances` API calls were made","If leveraging SSM, query for `StartSession` API calls to determine if the user is attempting to establish a session with the EC2 instances","Filter for `event.provider` is `ec2.amazonaws.com` to pivot on unusual activity related to EC2 instances"],"mitre":["T1580"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n\n// filter for DescribeInstances API calls\n| where event.dataset == \"aws.cloudtrail\" and event.provider == \"ec2.amazonaws.com\" and event.action == \"DescribeInstances\"\n\n// truncate the timestamp to a 30-second window\n| eval target_time_window = DATE_TRUNC(30 seconds, @timestamp)\n\n// count the number of unique regions and total API calls within the 30-second window\n| stats region_count = count_distinct(cloud.region), window_count = count(*) by target_time_window, aws.cloudtrail.user_identity.arn\n\n// filter for resources making DescribeInstances API calls in more than 10 regions within the 30-second window\n| where region_count >= 10 and window_count >= 10\n\n// sort the results by time windows in descending order\n| sort target_time_window desc\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.dataset == \"aws.cloudtrail\" and event.provider == \"ec2.amazonaws.com\" and event.action == \"DescribeInstances\"\n| eval target_time_window = DATE_TRUNC(30 seconds, @timestamp)\n| stats region_count = count_distinct(cloud.region), window_count = count(*) by target_time_window, aws.cloudtrail.user_identity.arn\n| where region_count >= 10 and window_count >= 10\n| sort target_time_window desc"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"IzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query gathers data for evidence of an adversary creating an IAM role with an inline attached policy that allows the role to assume another role. This only identifies flags for AWS account IDs that are different from the account ID where the role is being created indicating a potential backdoor IAM role.\n","integration":["aws.cloudtrail"],"uuid":"429824b6-60b2-11ef-b0a4-f661ea17fbce","name":"IAM Assume Role Creation with Attached Policy","language":["ES|QL"],"license":"Elastic License v2","notes":["Review the `target_account_id` field to identify the account that the role is being created in. This could be another AWS account your organization owns.","Review `aws.cloudtrail.request_parameters` to identify the role being created and the policy being attached. If the inline policy includes overly permissive permissions such as `AdministratorAccess`, this could be a sign of malicious activity.","Pivot for `event.action` where the value is `AttachRolePolicy` to identify the policy being attached to the role."],"mitre":["T1098.003"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"iam.amazonaws.com\"\n    and event.action == \"CreateRole\"\n    and aws.cloudtrail.request_parameters RLIKE \".*Allow.*\"\n    and aws.cloudtrail.request_parameters RLIKE \".*sts:AssumeRole.*\"\n    and aws.cloudtrail.request_parameters RLIKE \".*assumeRolePolicyDocument.*\"\n    and aws.cloudtrail.request_parameters RLIKE \".*arn:aws:iam.*\"\n| dissect aws.cloudtrail.request_parameters \"%{}AWS\\\": \\\"arn:aws:iam::%{target_account_id}:\"\n| where cloud.account.id != target_account_id\n| keep @timestamp, event.provider, event.action, aws.cloudtrail.request_parameters, target_account_id, cloud.account.id\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"iam.amazonaws.com\"\n    and event.action == \"CreateRole\"\n    and aws.cloudtrail.request_parameters RLIKE \".*Allow.*\"\n    and aws.cloudtrail.request_parameters RLIKE \".*sts:AssumeRole.*\"\n    and aws.cloudtrail.request_parameters RLIKE \".*assumeRolePolicyDocument.*\"\n    and aws.cloudtrail.request_parameters RLIKE \".*arn:aws:iam.*\"\n| dissect aws.cloudtrail.request_parameters \"%{}AWS\\\": \\\"arn:aws:iam::%{target_account_id}:\"\n| where cloud.account.id != target_account_id\n| keep @timestamp, event.provider, event.action, aws.cloudtrail.request_parameters, target_account_id, cloud.account.id"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"JDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies unusual activity related to the default Aviatrix role in AWS CloudTrail logs. The Aviatrix role is a default role created by the Aviatrix Controller to manage AWS resources. Unusual activity may indicate unauthorized access or misuse of the Aviatrix role, potentially leading to data exfiltration, privilege escalation, or other security incidents.\n","integration":["aws.cloudtrail"],"uuid":"9fe48b6e-d83a-11ef-84a6-f661ea17fbcd","name":"IAM Unusual Default Aviatrix Role Activity","language":["ES|QL"],"license":"Elastic License v2","notes":["Review the `aws.cloudtrail.user_identity.arn` field to identify the Aviatrix role.","Review the `aws.cloudtrail.resources.arn` field to identify the EC2 instance associated with the activity.","Review security group and network ACL configurations for the EC2 instance to ensure they are not overly permissive or allow unauthorized access.","Using the EC2 instance, pivot into VPC Flow Logs to identify network traffic patterns and potential lateral movement.","Review if the controller was recently deployed or updated, as this may explain unusual activity related to the Aviatrix role.","If available, review endpoint logs for the Aviatrix Controller to identify any aviatrix processes that have made unusual requests or system calls."],"mitre":["T1078.004"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 14 day\n| where event.dataset == \"aws.cloudtrail\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n    and aws.cloudtrail.user_identity.arn like \"*aviatrix-role*\"\n| stats activity_counts = count(*) by event.provider, event.action, aws.cloudtrail.user_identity.arn\n| where activity_counts < 10\n| sort activity_counts asc\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 14 day\n| where event.dataset == \"aws.cloudtrail\"\n    and aws.cloudtrail.user_identity.type == \"AssumedRole\"\n    and aws.cloudtrail.user_identity.arn like \"*aviatrix-role*\"\n| stats activity_counts = count(*) by event.provider, event.action, aws.cloudtrail.user_identity.arn\n| where activity_counts < 10\n| sort activity_counts asc"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"JTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword","notes.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a single `SendCommand` API call is made by an EC2 instance to execute a command via the AWS Systems Manager (SSM) service within the last 7 days. The `SendCommand` API call allows users to remotely execute commands on EC2 instances. Default documents like `AWS-RunPowerShellScript` and `AWS-RunShellScript` are commonly used for this purpose. Adversaries may abuse this API to execute arbitrary commands on compromised EC2 instances.\n","integration":["aws.cloudtrail"],"uuid":"1844f2d6-5dc7-11ef-b76c-f661ea17fbce","name":"SSM Rare SendCommand Code Execution by EC2 Instance","language":["ES|QL"],"license":"Elastic License v2","notes":["With count 1, this rule will only trigger once for each unique value of the `instance_id` field that has not been seen making this API request within the last 7 days.","Use the `instance_id` field to identify the EC2 instance that executed the command. This instance ID can be used to search for all related activities, focusing on `event.action` and `aws.cloudtrail.request_parameters` fields.","The `parameter` field in the `aws.cloudtrail.request_parameters` contains the command executed by the EC2 instance, however is masked in the query to prevent sensitive data exposure by AWS. Reviewing commands executed on the instance can provide context on the adversary's actions."],"mitre":["T1651"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.provider == \"ssm.amazonaws.com\" and event.action == \"SendCommand\"\n| dissect aws.cloudtrail.request_parameters \"%{}documentName=%{document_name},%{}\"\n| dissect aws.cloudtrail.response_elements \"%{}instanceIds=[%{instance_id}],%{}\"\n| where document_name in (\"AWS-RunPowerShellScript\",\"AWS-RunShellScript\") and instance_id != \"*\"\n| stats user_command_counts = count(*) by instance_id\n| where user_command_counts == 1\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where event.provider == \"ssm.amazonaws.com\" and event.action == \"SendCommand\"\n| dissect aws.cloudtrail.request_parameters \"%{}documentName=%{document_name},%{}\"\n| dissect aws.cloudtrail.response_elements \"%{}instanceIds=[%{instance_id}],%{}\"\n| where document_name in (\"AWS-RunPowerShellScript\",\"AWS-RunShellScript\") and instance_id != \"*\"\n| stats user_command_counts = count(*) by instance_id\n| where user_command_counts == 1"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"JjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunting query identifies when a user modifies the user data attribute of an EC2 instance. The user data attribute is a script that runs when the instance is launched. Modifying the user data attribute could indicate an adversary attempting to gain persistence or execute malicious code on the instance.\n","integration":["aws.cloudtrail"],"uuid":"f11ac62c-5f42-11ef-9d72-f661ea17fbce","name":"EC2 Modify Instance Attribute User Data","language":["ES|QL"],"license":"Elastic License v2","notes":["Use the `instance_id` field to identify the EC2 instance for which the user data attribute was modified","Pivot into the EC2 instance if possible and examine the user data script ('/var/lib/cloud/instance/scripts/userdata.txt') for malicious content","To modify an EC2 instance's user data attribute, the instance must be stopped, therefore check for `StopInstances` API calls in `event.action` field to determine if the instance was stopped and started","AWS redacts the value of the `user_data` attribute in the CloudTrail logs, so the actual script content will not be visible in the logs"],"mitre":["T1059.009","T1037"],"references":[],"queries":[{"query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"ec2.amazonaws.com\"\n    and event.action == \"ModifyInstanceAttribute\"\n    and aws.cloudtrail.request_parameters RLIKE \".*attribute=userData.*\"\n| dissect aws.cloudtrail.request_parameters \"{%{instance_id_key}=%{instance_id}, %{attribute_key}=%{attribute}, %{value_key}=%{value}}\"\n| stats user_attribute_modify_count = count(*) by aws.cloudtrail.user_identity.arn, event.outcome\n","indices":["logs-aws.cloudtrail-*"],"cleaned_query":"from logs-aws.cloudtrail-*\n| where @timestamp > now() - 7 day\n| where\n    event.provider == \"ec2.amazonaws.com\"\n    and event.action == \"ModifyInstanceAttribute\"\n    and aws.cloudtrail.request_parameters RLIKE \".*attribute=userData.*\"\n| dissect aws.cloudtrail.request_parameters \"{%{instance_id_key}=%{instance_id}, %{attribute_key}=%{attribute}, %{value_key}=%{value}}\"\n| stats user_attribute_modify_count = count(*) by aws.cloudtrail.user_identity.arn, event.outcome"}],"category":"aws","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"JzYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt aggregates process execution and remote network logons by source address, account name and process hash. It then limits the results by unique host within a 7 day period. This may indicate lateral movement via remote services.\n","integration":["endpoint"],"uuid":"24108755-4d1f-4d7a-ad5f-04c2ca55e9a3","name":"Frequency of Process Execution via Network Logon by Source Address","language":["ES|QL"],"license":"Elastic License v2","notes":["The second query highest occurrence of source addresses/accounts performing remote process execution","`process.Ext.session_info.*` is populated for Elastic Defend versions 8.6.0+ and above.","Execution via legitimate Microsoft processes for PowerShell and cmd need to be further investigated via aggregation by `process.command_line`.","Aggregation can be also done by `process.executable`, normalizing process path by removing random patterns using the ES|QL REPLACE function."],"mitre":["T1021"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where  @timestamp > now() - 7 day and host.os.family == \"windows\" and\n  event.category == \"process\" and event.action == \"start\" and\n  /* network logon type and the execution is within 30 seconds of the logon time */\n  process.Ext.session_info.logon_type == \"Network\" and process.Ext.session_info.relative_logon_time <= 30\n| stats total = count(*) by process.Ext.session_info.client_address, user.name\n /* sort by top source.ip and account */\n| sort total desc\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where  @timestamp > now() - 7 day and host.os.family == \"windows\" and\n  event.category == \"process\" and event.action == \"start\" and\n  process.Ext.session_info.logon_type == \"Network\" and process.Ext.session_info.relative_logon_time <= 30\n| stats total = count(*) by process.Ext.session_info.client_address, user.name\n| sort total desc"},{"query":"from logs-endpoint.events.process-*\n| where  @timestamp > now() - 7 day and host.os.family == \"windows\" and\n  event.category == \"process\" and event.action == \"start\" and\n  /* network logon type and the execution is within 30 seconds of the logon time */\n  process.Ext.session_info.logon_type == \"Network\" and process.Ext.session_info.relative_logon_time <= 30\n| stats total = count(*), hosts = count_distinct(host.id) by process.hash.sha256, process.Ext.session_info.client_address, user.name, process.parent.name\n /* unique hash limited to one host and number of execution is 1 */\n| where  hosts == 1 and total == 1\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where  @timestamp > now() - 7 day and host.os.family == \"windows\" and\n  event.category == \"process\" and event.action == \"start\" and\n  process.Ext.session_info.logon_type == \"Network\" and process.Ext.session_info.relative_logon_time <= 30\n| stats total = count(*), hosts = count_distinct(host.id) by process.hash.sha256, process.Ext.session_info.client_address, user.name, process.parent.name\n| where  hosts == 1 and total == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"KDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies instances where a process attempts to open the Local Security Authority Subsystem Service (LSASS) memory and where the number of occurences is limited to one unique agent and a low number of attempts. This may indicate either a rare legitimate condition or a malicious process attempting to obtain credentials or inject code into the LSASS.\n","integration":["endpoint","windows"],"uuid":"d0aed6f5-f84c-4da8-bb2a-b5ca0fbb55e0","name":"Rare LSASS Process Access Attempts","language":["ES|QL"],"license":"Elastic License v2","notes":["Based on the process.executable and process.name you can pivot and investigate further for the matching instances.","Potential false-positives include rare legitimate conditions that may trigger this behavior due to third-party software or LSASS crashing."],"mitre":["T1003","T1003.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.api*\n| where  @timestamp > NOW() - 7 day\n| where event.category == \"api\" and host.os.family == \"windows\" and process.Ext.api.name in (\"OpenProcess\", \"OpenThread\", \"ReadProcessMemory\") and\n Target.process.name == \"lsass.exe\"\n| keep process.executable.caseless, host.id\n /* normalize process paths to reduce known random patterns in process.executable */\n| eval process = replace(process.executable.caseless, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats occurences = count(process), agents = count_distinct(host.id) by process\n| where agents == 1 and occurences <= 10\n","indices":["logs-endpoint.events.api*"],"cleaned_query":"from logs-endpoint.events.api*\n| where  @timestamp > NOW() - 7 day\n| where event.category == \"api\" and host.os.family == \"windows\" and process.Ext.api.name in (\"OpenProcess\", \"OpenThread\", \"ReadProcessMemory\") and\n Target.process.name == \"lsass.exe\"\n| keep process.executable.caseless, host.id\n| eval process = replace(process.executable.caseless, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats occurences = count(process), agents = count_distinct(host.id) by process\n| where agents == 1 and occurences <= 10"},{"query":"from logs-windows.sysmon_operational-*\n| where  @timestamp > NOW() - 7 day\n| where event.category == \"process\" and host.os.family == \"windows\" and event.action == \"ProcessAccess\" and\n  winlog.event_data.TargetImage in (\"C:\\\\Windows\\\\system32\\\\lsass.exe\", \"c:\\\\Windows\\\\system32\\\\lsass.exe\", \"c:\\\\Windows\\\\System32\\\\lsass.exe\")\n| keep process.executable, host.id\n /* normalize process paths to reduce known random patterns in process.executable */\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats occurences = count(process_path), agents = count_distinct(host.id) by process_path\n| where agents == 1 and occurences <= 10\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where  @timestamp > NOW() - 7 day\n| where event.category == \"process\" and host.os.family == \"windows\" and event.action == \"ProcessAccess\" and\n  winlog.event_data.TargetImage in (\"C:\\\\Windows\\\\system32\\\\lsass.exe\", \"c:\\\\Windows\\\\system32\\\\lsass.exe\", \"c:\\\\Windows\\\\System32\\\\lsass.exe\")\n| keep process.executable, host.id\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats occurences = count(process_path), agents = count_distinct(host.id) by process_path\n| where agents == 1 and occurences <= 10"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"KTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt returns the SHA256 hash and the `dll.path` of unsigned libraries loaded by svchost where the presence of unique path/hash is limited to a unique host. Adversaries may use Windows service DLLs to maintain persistence or run with System privileges.\n","integration":["endpoint","windows"],"uuid":"c00f1afe-4f25-4542-8cc9-277b23581121","name":"Libraries Loaded by svchost with Low Occurrence Frequency","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt includes two queries to cover both Sysmon and Elastic Defend data sources.","The hunt uses Elastic Defend library events for an extra optional condition `dll.Ext.relative_file_creation_time` to scope if for recently dropped DLLs.","The `count_dlls_per_folder` variable filter is used to avoid cases where multiple DLLs with different names are loaded from same directory (often observed in FPs loaded multiple dependencies from same dir).","Pay close attention unknown hashes and suspicious paths, usually ServiceDLLs are located in trusted directories like `%programfiles%` and `system32/syswow64`."],"mitre":["T1543","T1543.003"],"references":[],"queries":[{"query":"from logs-endpoint.events.library-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"library\" and event.action == \"load\" and\n  process.name == \"svchost.exe\" and (dll.code_signature.trusted == false or dll.code_signature.exists == false) and dll.hash.sha256 like \"?*\" and\n  (dll.Ext.relative_file_creation_time <= 900 or dll.Ext.relative_file_name_modify_time <= 900)\n| keep dll.name, dll.path, dll.hash.sha256, host.id\n| eval dll_folder = substring(dll.path, 1, length(dll.path) - (length(dll.name) + 1))\n /* paths normalization by removing random patterns */\n| eval dll_path = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"replaced\")\n| eval dll_path = replace(dll_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval dll_path = replace(dll_path, \"\"\"SoftwareDistribution\\\\Download\\\\[a-z0-9]+\"\"\", \"\"\"SoftwareDistribution\\\\Download\\\\\"\"\")\n| stats hosts = count_distinct(host.id), count_dlls_per_folder = count(dll_path) by dll_path, dll.name, dll.hash.sha256\n| where hosts == 1 and count_dlls_per_folder == 1\n","indices":["logs-endpoint.events.library-*"],"cleaned_query":"from logs-endpoint.events.library-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"library\" and event.action == \"load\" and\n  process.name == \"svchost.exe\" and (dll.code_signature.trusted == false or dll.code_signature.exists == false) and dll.hash.sha256 like \"?*\" and\n  (dll.Ext.relative_file_creation_time <= 900 or dll.Ext.relative_file_name_modify_time <= 900)\n| keep dll.name, dll.path, dll.hash.sha256, host.id\n| eval dll_folder = substring(dll.path, 1, length(dll.path) - (length(dll.name) + 1))\n| eval dll_path = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"replaced\")\n| eval dll_path = replace(dll_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval dll_path = replace(dll_path, \"\"\"SoftwareDistribution\\\\Download\\\\[a-z0-9]+\"\"\", \"\"\"SoftwareDistribution\\\\Download\\\\\"\"\")\n| stats hosts = count_distinct(host.id), count_dlls_per_folder = count(dll_path) by dll_path, dll.name, dll.hash.sha256\n| where hosts == 1 and count_dlls_per_folder == 1"},{"query":"from logs-windows.sysmon_operational-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"Image loaded\" and\n  process.name == \"svchost.exe\" and file.code_signature.status != \"Valid\" and file.hash.sha256 like \"?*\"\n| keep file.name, file.path, file.hash.sha256, host.id\n| eval dll_folder = substring(file.path, 1, length(file.path) - (length(file.name) + 1))\n/* paths normalization by removing random patterns */\n| eval dll_path = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"replaced\")\n| eval dll_path = replace(dll_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval dll_path = replace(dll_path, \"\"\"SoftwareDistribution\\\\Download\\\\[a-z0-9]+\"\"\", \"\"\"SoftwareDistribution\\\\Download\\\\\"\"\")\n| stats hosts = count_distinct(host.id), count_dlls_per_folder = count(dll_path) by dll_path, file.name, file.hash.sha256\n| where hosts == 1 and count_dlls_per_folder == 1\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"Image loaded\" and\n  process.name == \"svchost.exe\" and file.code_signature.status != \"Valid\" and file.hash.sha256 like \"?*\"\n| keep file.name, file.path, file.hash.sha256, host.id\n| eval dll_folder = substring(file.path, 1, length(file.path) - (length(file.name) + 1))\n| eval dll_path = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"replaced\")\n| eval dll_path = replace(dll_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval dll_path = replace(dll_path, \"\"\"SoftwareDistribution\\\\Download\\\\[a-z0-9]+\"\"\", \"\"\"SoftwareDistribution\\\\Download\\\\\"\"\")\n| stats hosts = count_distinct(host.id), count_dlls_per_folder = count(dll_path) by dll_path, file.name, file.hash.sha256\n| where hosts == 1 and count_dlls_per_folder == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"KjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt looks for a low occurrence of process execution via the Windows Services Control Manager by unique agent. The Services Control Manager is responsible for starting, stopping, and interacting with system services. This could be a sign of persistence as a Windows service.\n","integration":["endpoint","windows","system"],"uuid":"a0a84a86-115f-42f9-90a5-4cb7ceeef981","name":"Low Occurence of Process Execution via Windows Services with Unique Agent","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt contains two queries for Elastic Defend and Windows Security event 4688.","Windows security event 4688 lacks code signature and hash information, hence the use of `process.executable` for aggregation.","Unique `process.hash.sha256` and agent is not necessarily malicious, this help surface ones worth further investigation.","Suspicious `process.executable` paths and LOLBins should be reviewed further."],"mitre":["T1543","T1543.003"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\") and\n  process.parent.name == \"services.exe\" and process.code_signature.trusted != true\n| stats hosts = count_distinct(host.id) by process.hash.sha256, process.name\n /* unique hash observed in one unique agent */\n| where hosts == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\") and\n  process.parent.name == \"services.exe\" and process.code_signature.trusted != true\n| stats hosts = count_distinct(host.id) by process.hash.sha256, process.name\n| where hosts == 1"},{"query":"from logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.code == \"4688\" and\n  event.action == \"created-process\" and process.parent.name == \"services.exe\"\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats hosts = count_distinct(host.id) by process_path\n /* unique path observed in one unique agent */\n| where hosts == 1\n","indices":["logs-system.security-*"],"cleaned_query":"from logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.code == \"4688\" and\n  event.action == \"created-process\" and process.parent.name == \"services.exe\"\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats hosts = count_distinct(host.id) by process_path\n| where hosts == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"KzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies programs started shortly after user logon and presence limited to a unique host. Run registry key and Startup folder cause programs to run each time that a user logs on and are often abused by malwares to maintain persistence on an endpoint.\n","integration":["endpoint"],"uuid":"52a958e8-0368-4e74-bd4b-a64faf397bf4","name":"Startup Execution with Low Occurrence Frequency by Unique Host","language":["ES|QL"],"license":"Elastic License v2","notes":["Items set to persist via Startup such as Run keys and Startup folder will be executed by `Explorer.exe` shortly after user logon (`process.Ext.session_info.relative_logon_time` helps us to capture that time difference).","Special attention to unknown hashes, suspicious paths and LOLBins should be given."],"mitre":["T1547","T1547.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"start\" and\n  /* programs started shortly after user logon like startup items */\n  process.parent.executable.caseless == \"c:\\\\windows\\\\explorer.exe\" and process.Ext.session_info.relative_logon_time <= 100 and\n  not starts_with(process.executable, \"C:\\\\Program Files\") and not starts_with(process.executable, \"C:\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\\") and\n  /* this hunt is scoped to unsigned or untrusted code-sig or Microsoft signed binaries to not miss lolbins */\n  (process.code_signature.exists == false or process.code_signature.trusted == false or starts_with(process.code_signature.subject_name, \"Microsoft\"))\n| keep process.executable, host.id, process.hash.sha256\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~' ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats hosts = count_distinct(host.id) by process_path, process.hash.sha256\n| where hosts == 1\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"start\" and\n  process.parent.executable.caseless == \"c:\\\\windows\\\\explorer.exe\" and process.Ext.session_info.relative_logon_time <= 100 and\n  not starts_with(process.executable, \"C:\\\\Program Files\") and not starts_with(process.executable, \"C:\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\\") and\n  (process.code_signature.exists == false or process.code_signature.trusted == false or starts_with(process.code_signature.subject_name, \"Microsoft\"))\n| keep process.executable, host.id, process.hash.sha256\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~' ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats hosts = count_distinct(host.id) by process_path, process.hash.sha256\n| where hosts == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"LDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt detects processes named as legit Microsoft native binaries located in the system32 folder. Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. ","integration":["endpoint"],"uuid":"a2006c66-d6ab-43ee-871e-d650e38f7972","name":"Masquerading Attempts as Native Windows Binaries","language":["ES|QL"],"license":"Elastic License v2","notes":["Output of the query is the `process.name` and `host.id` where you can pivot by `host.id` and `process.name` (non Microsoft signed) to find the specific suspicious instances.","Potential false-positives include processes with missing code signature details due to enrichment bugs.","The queried index must capture process start events with code signature information (e.g. Windows event 4688 is not supported)."],"mitre":["T1036"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where  @timestamp > NOW() - 7 day\n| where event.type == \"start\" and event.action == \"start\" and host.os.name == \"Windows\" and not starts_with(process.executable, \"C:\\\\Program Files\\\\WindowsApps\\\\\") and not starts_with(process.executable, \"C:\\\\Windows\\\\System32\\\\DriverStore\\\\\") and process.name != \"setup.exe\"\n| keep process.name.caseless, process.executable.caseless, process.code_signature.subject_name, process.code_signature.trusted, process.code_signature.exists, host.id\n /* system_bin contain Microsoft signed and located in system32 folder process names */\n /* non_system_bin contain non Microsoft signed process names */\n| eval system_bin = case(starts_with(process.executable.caseless, \"c:\\\\windows\\\\system32\") and starts_with(process.code_signature.subject_name, \"Microsoft\") and process.code_signature.trusted == true, process.name.caseless, null), non_system_bin = case(process.code_signature.exists == false or process.code_signature.trusted != true or not starts_with(process.code_signature.subject_name, \"Microsoft\"), process.name.caseless, null)\n /* aggregate unique process name counts  by process.name and host.id */\n| stats count_system_bin = count(system_bin), count_non_system_bin = count(non_system_bin) by process.name.caseless, host.id\n /* filter where the same process.name is present in both system_bin and non_system_bin */\n| where count_system_bin >= 1 and count_non_system_bin >= 1\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where  @timestamp > NOW() - 7 day\n| where event.type == \"start\" and event.action == \"start\" and host.os.name == \"Windows\" and not starts_with(process.executable, \"C:\\\\Program Files\\\\WindowsApps\\\\\") and not starts_with(process.executable, \"C:\\\\Windows\\\\System32\\\\DriverStore\\\\\") and process.name != \"setup.exe\"\n| keep process.name.caseless, process.executable.caseless, process.code_signature.subject_name, process.code_signature.trusted, process.code_signature.exists, host.id\n| eval system_bin = case(starts_with(process.executable.caseless, \"c:\\\\windows\\\\system32\") and starts_with(process.code_signature.subject_name, \"Microsoft\") and process.code_signature.trusted == true, process.name.caseless, null), non_system_bin = case(process.code_signature.exists == false or process.code_signature.trusted != true or not starts_with(process.code_signature.subject_name, \"Microsoft\"), process.name.caseless, null)\n| stats count_system_bin = count(system_bin), count_non_system_bin = count(non_system_bin) by process.name.caseless, host.id\n| where count_system_bin >= 1 and count_non_system_bin >= 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"LTYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt identifies base64 encoded powershell commands in process start events and filters ones with suspicious keywords like downloaders and evasion related commands.\n","integration":["endpoint","windows","system"],"uuid":"2e583d3c-7ad6-4544-a0db-c685b2066493","name":"Suspicious Base64 Encoded Powershell Command","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt can be expanded to include more evasion techniques and downloaders.","Pivoting by `agent.id` can provide more context on the affected hosts."],"mitre":["T1059","T1059.001","T1027","T1027.010"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where host.os.type == \"windows\" and event.category == \"process\" and event.type == \"start\" and TO_LOWER(process.name) == \"powershell.exe\" and process.command_line rlike \".+ -(e|E).*\"\n| keep agent.id, process.command_line\n /* simplified regex to extract base64 encoded blob */\n| grok process.command_line \"\"\"(?<base64_data>([A-Za-z0-9+/]+={1,2}$|[A-Za-z0-9+/]{100,}))\"\"\"\n| where base64_data is not null\n /* base64 decode added in 8.14 */\n| eval decoded_base64_cmdline = replace(TO_LOWER(FROM_BASE64(base64_data)), \"\"\"\\u0000\"\"\", \"\")\n /* most common suspicious keywords, you can add more patterns here */\n| where decoded_base64_cmdline rlike \"\"\".*(http|webclient|download|mppreference|sockets|bxor|.replace|reflection|assembly|load|bits|start-proc|iwr|frombase64).*\"\"\"\n| keep agent.id, process.command_line, decoded_base64_cmdline\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*","logs-system.security-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where host.os.type == \"windows\" and event.category == \"process\" and event.type == \"start\" and TO_LOWER(process.name) == \"powershell.exe\" and process.command_line rlike \".+ -(e|E).*\"\n| keep agent.id, process.command_line\n| grok process.command_line \"\"\"(?<base64_data>([A-Za-z0-9+/]+={1,2}$|[A-Za-z0-9+/]{100,}))\"\"\"\n| where base64_data is not null\n| eval decoded_base64_cmdline = replace(TO_LOWER(FROM_BASE64(base64_data)), \"\"\"\\u0000\"\"\", \"\")\n| where decoded_base64_cmdline rlike \"\"\".*(http|webclient|download|mppreference|sockets|bxor|.replace|reflection|assembly|load|bits|start-proc|iwr|frombase64).*\"\"\"\n| keep agent.id, process.command_line, decoded_base64_cmdline"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"LjYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt helps identify drivers loaded once on a unique host and with a unique hash over a 15 day period of time. Advanced adversaries may leverage legit vulnerable driver to tamper with existing defences or execute code in Kernel mode.\n","integration":["endpoint","windows","system"],"uuid":"cebfbb4d-5b2a-44d8-b763-5512b654fb26","name":"Low Occurrence of Drivers Loaded on Unique Hosts","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt has three optional queries, one for Elastic Defend data, another for Sysmon data and the last one for Windows 7045 events.","Further investigation can be done pivoting by `dll.pe.imphash` or `dll.name.`","`dll.Ext.relative_file_creation_time` is used in the first query to limit the result to recently dropped drivers (populated in Elastic Defend).","Aggregation can also be done by `dll.hash.sha256` / `file.hash.sha256` but will return more results.","Bring Your Own Vulnerable Driver (BYOVD) are all signed and not malicious, further investigation should be done to check the surrounding events (service creation, process that dropped the driver etc.)."],"mitre":["T1068"],"references":[],"queries":[{"query":"from logs-endpoint.events.library-*\n| where @timestamp > now() - 15 day\n| where host.os.family == \"windows\" and event.category == \"driver\" and event.action == \"load\" and dll.Ext.relative_file_creation_time <= 900\n| stats host_count = count_distinct(host.id), total_count = count(*), hash_count = count_distinct(dll.hash.sha256) by dll.name, dll.pe.imphash\n| where host_count == 1 and total_count == 1 and hash_count == 1\n","indices":["logs-endpoint.events.library-*"],"cleaned_query":"from logs-endpoint.events.library-*\n| where @timestamp > now() - 15 day\n| where host.os.family == \"windows\" and event.category == \"driver\" and event.action == \"load\" and dll.Ext.relative_file_creation_time <= 900\n| stats host_count = count_distinct(host.id), total_count = count(*), hash_count = count_distinct(dll.hash.sha256) by dll.name, dll.pe.imphash\n| where host_count == 1 and total_count == 1 and hash_count == 1"},{"query":"from logs-windows.sysmon_operational-*\n| where @timestamp > now() - 15 day\n| where host.os.family == \"windows\" and event.category == \"driver\"\n| stats host_count = count_distinct(host.id), total_count = count(*), hash_count = count_distinct(file.hash.sha256) by file.name\n| where host_count == 1 and total_count == 1 and hash_count == 1\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where @timestamp > now() - 15 day\n| where host.os.family == \"windows\" and event.category == \"driver\"\n| stats host_count = count_distinct(host.id), total_count = count(*), hash_count = count_distinct(file.hash.sha256) by file.name\n| where host_count == 1 and total_count == 1 and hash_count == 1"},{"query":"from logs-system.system-*\n| where  @timestamp > now() - 15day\n| where host.os.family == \"windows\" and event.code == \"7045\" and\n  winlog.event_data.ServiceType == \"kernel mode driver\"\n| eval ServiceFileName = replace(winlog.event_data.ImagePath, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n| where hosts == 1 and cc == 1\n","indices":["logs-system.system-*"],"cleaned_query":"from logs-system.system-*\n| where  @timestamp > now() - 15day\n| where host.os.family == \"windows\" and event.code == \"7045\" and\n  winlog.event_data.ServiceType == \"kernel mode driver\"\n| eval ServiceFileName = replace(winlog.event_data.ImagePath, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n| where hosts == 1 and cc == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"LzYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt returns a summary of network logon activity by `source.ip` using Windows event IDs 4624 and 4625. The higher the number of failures, low success and multiple accounts the more suspicious the behavior is.\n","integration":["system"],"uuid":"441fba85-47a9-4f1f-aab4-569bbfdc548b","name":"Windows Logon Activity by Source IP","language":["ES|QL"],"license":"Elastic License v2","notes":["Pay close attention to IP address sources with a high number of failed connections associated with low success attempts and high number of user accounts."],"mitre":["T1110","T1110.001","T1110.003"],"references":[],"queries":[{"query":"from logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and\n  event.category == \"authentication\" and event.action in (\"logon-failed\", \"logged-in\") and winlog.logon.type == \"Network\" and\n  source.ip is not null and\n  /* noisy failure status codes often associated to authentication misconfiguration */\n  not (event.action == \"logon-failed\" and winlog.event_data.Status in (\"0xC000015B\", \"0XC000005E\", \"0XC0000133\", \"0XC0000192\"))\n| eval failed = case(event.action == \"logon-failed\", source.ip, null), success = case(event.action == \"logged-in\", source.ip, null)\n| stats count_failed = count(failed), count_success = count(success), count_user = count_distinct(winlog.event_data.TargetUserName) by source.ip\n /* below threshold should be adjusted to your env logon patterns */\n| where count_failed >= 100 and count_success <= 10 and count_user >= 20\n","indices":["logs-system.security-*"],"cleaned_query":"from logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and\n  event.category == \"authentication\" and event.action in (\"logon-failed\", \"logged-in\") and winlog.logon.type == \"Network\" and\n  source.ip is not null and\n  not (event.action == \"logon-failed\" and winlog.event_data.Status in (\"0xC000015B\", \"0XC000005E\", \"0XC0000133\", \"0XC0000192\"))\n| eval failed = case(event.action == \"logon-failed\", source.ip, null), success = case(event.action == \"logged-in\", source.ip, null)\n| stats count_failed = count(failed), count_success = count(success), count_user = count_distinct(winlog.event_data.TargetUserName) by source.ip\n| where count_failed >= 100 and count_success <= 10 and count_user >= 20"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"MDYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt identifies executable file creation by an unusual Microsoft native binary. This could be the result of\ncode injection or some other form of exploitation for defense evasion.\n","integration":["endpoint","windows"],"uuid":"b786bcd7-b119-4ff7-b839-3927c2ff7f1f","name":"Executable File Creation by an Unusual Microsoft Binary","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt includes two optional queries, one for Elastic Defend data and another for Sysmon data.","Sysmon file events don't populate file header and process code signature information thus we use `file.extension`.","Some exploits may result in the creation of an executable file by the exploited process.","Further investigation can be done by pivoting on `process.executable` and filtering for executable file creation."],"mitre":["T1211","T1055"],"references":[],"queries":[{"query":"from logs-endpoint.events.file-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action == \"creation\" and\n  starts_with(file.Ext.header_bytes, \"4d5a\") and process.code_signature.status == \"trusted\" and\n  starts_with(process.code_signature.subject_name, \"Microsoft\") and process.executable rlike \"\"\"[c-fC-F]:\\\\Windows\\\\(System32|SysWOW64)\\\\[a-zA-Z0-9_]+.exe\"\"\"\n| keep process.executable, host.id\n| stats occurences = count(*), agents = count_distinct(host.id) by process.executable\n| where agents == 1 and occurences <= 10\n","indices":["logs-endpoint.events.file-*"],"cleaned_query":"from logs-endpoint.events.file-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action == \"creation\" and\n  starts_with(file.Ext.header_bytes, \"4d5a\") and process.code_signature.status == \"trusted\" and\n  starts_with(process.code_signature.subject_name, \"Microsoft\") and process.executable rlike \"\"\"[c-fC-F]:\\\\Windows\\\\(System32|SysWOW64)\\\\[a-zA-Z0-9_]+.exe\"\"\"\n| keep process.executable, host.id\n| stats occurences = count(*), agents = count_distinct(host.id) by process.executable\n| where agents == 1 and occurences <= 10"},{"query":"from logs-windows.sysmon_operational-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action == \"FileCreate\" and\n file.extension in (\"exe\", \"dll\") and process.executable rlike \"\"\"[c-fC-F]:\\\\Windows\\\\(System32|SysWOW64)\\\\[a-zA-Z0-9_]+.exe\"\"\"\n| keep process.executable, host.id\n| stats occurences = count(*), agents = count_distinct(host.id) by process.executable\n| where agents == 1 and occurences <= 10\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action == \"FileCreate\" and\n file.extension in (\"exe\", \"dll\") and process.executable rlike \"\"\"[c-fC-F]:\\\\Windows\\\\(System32|SysWOW64)\\\\[a-zA-Z0-9_]+.exe\"\"\"\n| keep process.executable, host.id\n| stats occurences = count(*), agents = count_distinct(host.id) by process.executable\n| where agents == 1 and occurences <= 10"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"MTYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"Aggregating by paths/hash, this hunt identifies rare instances where a program executes as a child process of the Tasks Scheduler service. This could be the result of persistence as a Windows Scheduled Task.\n","integration":["endpoint","windows"],"uuid":"0d960760-8a40-49c1-bbdd-4deb32c7fd67","name":"Low Frequency of Process Execution via Windows Scheduled Task by Unique Agent","language":["ES|QL"],"license":"Elastic License v2","notes":["Windows security event 4688 lacks `process.parent.command_line` needed for this hunt to identify the Schedule `svchost` instance.","Unique `process.hash.sha256` and agent is not necessarily malicious, however this helps surface signals worth further investigation."],"mitre":["T1053","T1053.005"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now(-) - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and\n  event.action in (\"start\", \"Process creation\") and process.code_signature.trusted != true and\n  /* child process of the Tasks Schedule service */\n  process.parent.name == \"svchost.exe\" and ends_with(process.parent.command_line, \"Schedule\")\n| stats hosts = count_distinct(host.id) by process.hash.sha256, process.name\n /* unique hash observed in one unique agent */\n| where hosts == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now(-) - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and\n  event.action in (\"start\", \"Process creation\") and process.code_signature.trusted != true and\n  process.parent.name == \"svchost.exe\" and ends_with(process.parent.command_line, \"Schedule\")\n| stats hosts = count_distinct(host.id) by process.hash.sha256, process.name\n| where hosts == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"MjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt aggregates process execution via remote network logon by source address, account name and where the parent process is related to remote services such as WMI, WinRM, DCOM and remote PowerShell. This may indicate lateral movement via remote services.\n","integration":["endpoint"],"uuid":"5fd5da54-0515-4d6b-b8d7-30fd05f5be33","name":"Execution via Remote Services by Client Address","language":["ES|QL"],"license":"Elastic License v2","notes":["`process.Ext.session_info.*` is populated for Elastic Defend versions 8.6.0+."],"mitre":["T1021","T1021.003","T1021.006","T1047"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*\n| where  @timestamp > now() - 7 day and host.os.family == \"windows\" and\n  event.category == \"process\" and event.action == \"start\" and\n  /* network logon type */\n  process.Ext.session_info.logon_type == \"Network\" and\n  (process.parent.name .caseless in (\"wmiprvse.exe\", \"wsmprovhost.exe\", \"winrshost.exe\") or (process.parent.name == \"svchost.exe\" and process.parent.args == \"DcomLaunch\"))\n| stats total = count(*), hosts = count_distinct(host.id) by process.Ext.session_info.client_address, user.name, process.parent.name\n /* sort by top source.ip and account */\n| sort total desc\n","indices":["logs-endpoint.events.process-*"],"cleaned_query":"from logs-endpoint.events.process-*\n| where  @timestamp > now() - 7 day and host.os.family == \"windows\" and\n  event.category == \"process\" and event.action == \"start\" and\n  process.Ext.session_info.logon_type == \"Network\" and\n  (process.parent.name .caseless in (\"wmiprvse.exe\", \"wsmprovhost.exe\", \"winrshost.exe\") or (process.parent.name == \"svchost.exe\" and process.parent.args == \"DcomLaunch\"))\n| stats total = count(*), hosts = count_distinct(host.id) by process.Ext.session_info.client_address, user.name, process.parent.name\n| sort total desc"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"MzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt looks for unusual Microsoft native processes spawning `cmd.exe`, `powershell.exe` or `conhost.exe` and limited to a unique host. This could be normal rare behavior as well as an interactive shell activity from an injected parent process to execute system commands.\n","integration":["endpoint","windows","system"],"uuid":"aca4877f-d284-4bdb-8e18-b1414d3a7c20","name":"Windows Command and Scripting Interpreter from Unusual Parent Process","language":["ES|QL"],"license":"Elastic License v2","notes":["Further pivoting can be done via `process.parent.name`.","Certain Microsoft binaries like LSASS, winlogon, spoolsv and others should never spawn `cmd.exe`, `powershell.exe` or `conhost.exe`, if so it's highly likely malicious."],"mitre":["T1059","T1059.001","T1059.003"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.name) in (\"cmd.exe\", \"powershell.exe\", \"conhost.exe\") and\n  (starts_with(to_lower(process.parent.executable), \"c:\\\\windows\\\\system32\") or starts_with(to_lower(process.parent.executable), \"c:\\\\windows\\\\syswow64\"))\n| keep process.name, process.parent.name, host.id\n| stats hosts = count_distinct(host.id), cc = count(*) by process.parent.name\n| where cc <= 10 and hosts == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*","logs-system.security-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.name) in (\"cmd.exe\", \"powershell.exe\", \"conhost.exe\") and\n  (starts_with(to_lower(process.parent.executable), \"c:\\\\windows\\\\system32\") or starts_with(to_lower(process.parent.executable), \"c:\\\\windows\\\\syswow64\"))\n| keep process.name, process.parent.name, host.id\n| stats hosts = count_distinct(host.id), cc = count(*) by process.parent.name\n| where cc <= 10 and hosts == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"NDYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt looks for a high number of executable file transfers via the SMB protocol by the same user or agent to more than a defined maxium threshold of targets. This could be a sign of lateral movement via the Windows Admin Shares.\n","integration":["endpoint"],"uuid":"814894a4-c951-4f33-ab0b-09354e1cb957","name":"PE File Transfer via SMB_Admin Shares by Agent or User","language":["ES|QL"],"license":"Elastic License v2","notes":["Further investigation can done pivoting by `host.id` and `user.name`."],"mitre":["T1021","T1021.002"],"references":[],"queries":[{"query":"from logs-endpoint.events.file-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action != \"deletion\" and process.pid == 4 and\n  starts_with(file.Ext.header_bytes, \"4d5a*\") and (starts_with(user.id, \"S-1-5-21-\") or starts_with(user.id, \"S-1-12-1-\"))\n| stats agents = count_distinct(host.id), total = count(*) by user.name\n| where agents == 1 and total <= 3\n","indices":["logs-endpoint.events.file-*"],"cleaned_query":"from logs-endpoint.events.file-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action != \"deletion\" and process.pid == 4 and\n  starts_with(file.Ext.header_bytes, \"4d5a*\") and (starts_with(user.id, \"S-1-5-21-\") or starts_with(user.id, \"S-1-12-1-\"))\n| stats agents = count_distinct(host.id), total = count(*) by user.name\n| where agents == 1 and total <= 3"},{"query":"from logs-endpoint.events.file-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action != \"deletion\" and process.pid == 4 and\n  starts_with(file.Ext.header_bytes, \"4d5a*\") and (starts_with(user.id, \"S-1-5-21-\") or starts_with(user.id, \"S-1-12-1-\"))\n| stats agents = count_distinct(host.id), total = count(*) by user.name\n /* threshold set to 10 but can be adjusted to reduce normal baseline in your env */\n| where agents >= 10\n","indices":["logs-endpoint.events.file-*"],"cleaned_query":"from logs-endpoint.events.file-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action != \"deletion\" and process.pid == 4 and\n  starts_with(file.Ext.header_bytes, \"4d5a*\") and (starts_with(user.id, \"S-1-5-21-\") or starts_with(user.id, \"S-1-12-1-\"))\n| stats agents = count_distinct(host.id), total = count(*) by user.name\n| where agents >= 10"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"NTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt looks for Microsoft Office child processes with low occurrence frequency. This could be a normal rare behavior as well as potential execution via a malicious document. Adversaries may use Microsoft Office applications to execute malicious code, such as macros, scripts, or other payloads.\n","integration":["endpoint","windows","system"],"uuid":"f1b8519a-4dae-475f-965a-f53559233eab","name":"Microsoft Office Child Processes with Low Occurrence Frequency by Unique Agent","language":["ES|QL"],"license":"Elastic License v2","notes":["Certain processes like `WerFault.exe`, `dw20.exe` and `dwwin.exe` are often related to application crash.","Closer attention should be attributed to lolbins and unsigned executables (Windows 4688 is not capturing process code signature information)."],"mitre":["T1566","T1566.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where host.os.family == \"windows\" and @timestamp > NOW() - 15 day and\n  event.category == \"process\" and event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.parent.name) in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\") and not starts_with(process.executable, \"C:\\\\Program Files\")\n// normalize user home profile paths\n| eval process_path = replace(to_lower(process.executable), \"\"\"[c]:\\\\[u][s][e][r][s]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"c:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats occurrences = count(*), agents = count_distinct(agent.id) by process_path, process.parent.name\n| where occurrences == 1 and agents == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*","logs-system.security-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where host.os.family == \"windows\" and @timestamp > NOW() - 15 day and\n  event.category == \"process\" and event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.parent.name) in (\"winword.exe\", \"excel.exe\", \"powerpnt.exe\") and not starts_with(process.executable, \"C:\\\\Program Files\")\n| eval process_path = replace(to_lower(process.executable), \"\"\"[c]:\\\\[u][s][e][r][s]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"c:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats occurrences = count(*), agents = count_distinct(agent.id) by process_path, process.parent.name\n| where occurrences == 1 and agents == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"NjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt looks for a high occurrence of SMB connections from the same process by unique destination IP addresses. The number of unique destination IP addresses is compared to a defined threshold. This could be a sign of SMB scanning or lateral movement via remote services that depend on the SMB protocol.\n","integration":["endpoint","windows"],"uuid":"8a95f552-f149-4c71-888e-f2690f5add15","name":"Excessive SMB Network Activity by Process ID","language":["ES|QL"],"license":"Elastic License v2","notes":["Further investigation can done pivoting by `process.entity_id` and `host.id.`","Maximum number of unique `destination.ip` by process can be adjusted to your environment to reduce normal noisy hosts by process ID."],"mitre":["T1021","T1021.002"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"network\" and network.direction == \"egress\" and\n  network.transport == \"tcp\"and destination.port == 445 and source.port >= 49152 and process.pid == 4\n| keep destination.ip, process.entity_id, host.id\n| stats count_unique_dst = count_distinct(destination.ip) by process.entity_id, host.id\n /* threshold set to 20 but can be adjusted to reduce normal baseline in your env */\n| where count_unique_dst >= 20\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"network\" and network.direction == \"egress\" and\n  network.transport == \"tcp\"and destination.port == 445 and source.port >= 49152 and process.pid == 4\n| keep destination.ip, process.entity_id, host.id\n| stats count_unique_dst = count_distinct(destination.ip) by process.entity_id, host.id\n| where count_unique_dst >= 20"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"NzYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt aggregate Rundll32 execution by normalized `process.command_line` and returns instances that are unique by frequency. Rundll32 is one of the most abused binaries to proxy execution of malicious commands and modules.\n","integration":["endpoint","windows","system"],"uuid":"44e6adc6-e183-4bfa-b06d-db41669641fa","name":"Rundll32 Execution Aggregated by Command Line","language":["ES|QL"],"license":"Elastic License v2","notes":["Execution of DLLs from suspicious paths or with suspicious export function names or from suspicious parent should be further reviewed.","Parents such as svchost, `explorer.exe`, `wmiprvse.exe`, `winword.exe` and others should be carefully reviewed."],"mitre":["T1127","T1218","T1218.011"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.name) == \"rundll32.exe\" and\n  not process.command_line rlike \"\"\".*(zzzzInvokeManagedCustomActionOutOfProc|GeneralTel.dll,RunInUserCxt|ShOpenVerbApplication|davclnt.dll,DavSetCookie|FileProtocolHandler|EDGEHTML.dll|FirewallControlPanel.dll,ShowNotificationDialog|printui.dll,PrintUIEntryDPIAware|Program Files|SHCreateLocalServerRunDll|ImageView_Fullscreen|StatusMonitorEntryPoint|Control_RunDLL|HotPlugSafeRemovalDriveNotification|AppxDeploymentClient.dll|acproxy.dll,PerformAutochkOperations|CapabilityAccessManagerDoStoreMaintenance|dfshim.dll|display.dll,ShowAdapterSettings|ForceProxyDetectionOnNextRun|PfSvWsSwapAssessmentTask|acmigration.dll,ApplyMigrationShims|LenovoBatteryGaugePackage.dll|-localserver|DriverStore|CnmDxPEntryPoint|DeferredDelete|DeviceProperties_RunDLL|AppxDeploymentClient.dll|spool\\\\DRIVERS|printui.dll,PrintUIEntry|DfdGetDefaultPolicyAndSMART|cryptext.dll,CryptExt|WininetPlugin.dll|ClearMyTracksByProcess|SusRunTask|OpenURL|CleanupTemporaryState).*\"\"\"\n| keep process.parent.name, process.command_line, host.id\n| eval cmdline = replace(process.command_line, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval cmdline = replace(cmdline, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats hosts =count_distinct(host.id), total = count() by cmdline, process.parent.name\n| where hosts == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*","logs-system.security-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.name) == \"rundll32.exe\" and\n  not process.command_line rlike \"\"\".*(zzzzInvokeManagedCustomActionOutOfProc|GeneralTel.dll,RunInUserCxt|ShOpenVerbApplication|davclnt.dll,DavSetCookie|FileProtocolHandler|EDGEHTML.dll|FirewallControlPanel.dll,ShowNotificationDialog|printui.dll,PrintUIEntryDPIAware|Program Files|SHCreateLocalServerRunDll|ImageView_Fullscreen|StatusMonitorEntryPoint|Control_RunDLL|HotPlugSafeRemovalDriveNotification|AppxDeploymentClient.dll|acproxy.dll,PerformAutochkOperations|CapabilityAccessManagerDoStoreMaintenance|dfshim.dll|display.dll,ShowAdapterSettings|ForceProxyDetectionOnNextRun|PfSvWsSwapAssessmentTask|acmigration.dll,ApplyMigrationShims|LenovoBatteryGaugePackage.dll|-localserver|DriverStore|CnmDxPEntryPoint|DeferredDelete|DeviceProperties_RunDLL|AppxDeploymentClient.dll|spool\\\\DRIVERS|printui.dll,PrintUIEntry|DfdGetDefaultPolicyAndSMART|cryptext.dll,CryptExt|WininetPlugin.dll|ClearMyTracksByProcess|SusRunTask|OpenURL|CleanupTemporaryState).*\"\"\"\n| keep process.parent.name, process.command_line, host.id\n| eval cmdline = replace(process.command_line, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval cmdline = replace(cmdline, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats hosts =count_distinct(host.id), total = count() by cmdline, process.parent.name\n| where hosts == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"ODYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"Leveraging frequency based analysis and random values normalization, this hunt identifies instances where a program adds a persistence entry with rare values or are imited to unique hosts. Run registry key cause programs to run each time that a user logs on and are often abused by adversaries to maintain persistence on an endpoint.\n","integration":["endpoint","windows"],"uuid":"df4ee961-254d-4ad1-af15-c65c3b65abcd","name":"Persistence via Run Key with Low Occurrence Frequency","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt includes two queries to cover both Sysmon and Elastic Defend data sources.","Sysmon registry events do not populate process code signature information (hence the separation of the queries).","Suspicious paths and LOLBins in the `registry.data.strings` value should be reviewed further."],"mitre":["T1547","T1547.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.registry-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action == \"modification\" and\n  (process.code_signature.exists == false or starts_with(process.code_signature.subject_name, \"Microsoft\")) and\n  ends_with(registry.key,\"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\") and\n  not registry.data.strings rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.{1,2}[c-fC-F]:\\\\WINDOWS\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| keep registry.key, registry.data.strings, process.name, host.id\n /* Paths normalization in registry.data.strings to ease aggregation */\n| eval registry_data = replace(registry.data.strings, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval registry_data = replace(registry_data, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by process.name, registry_data\n| where hosts == 1 and cc == 1\n","indices":["logs-endpoint.events.registry-*"],"cleaned_query":"from logs-endpoint.events.registry-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action == \"modification\" and\n  (process.code_signature.exists == false or starts_with(process.code_signature.subject_name, \"Microsoft\")) and\n  ends_with(registry.key,\"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\") and\n  not registry.data.strings rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.{1,2}[c-fC-F]:\\\\WINDOWS\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| keep registry.key, registry.data.strings, process.name, host.id\n| eval registry_data = replace(registry.data.strings, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval registry_data = replace(registry_data, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by process.name, registry_data\n| where hosts == 1 and cc == 1"},{"query":"from logs-windows.sysmon_operational-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action == \"RegistryEvent (Value Set)\" and\n  ends_with(registry.key,\"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\") and\n  not registry.data.strings rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.{1,2}[c-fC-F]:\\\\WINDOWS\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| keep registry.key, registry.data.strings, process.name, host.id\n /* Paths normalization in registry.data.strings to ease aggregation */\n| eval registry_data = replace(registry.data.strings, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval registry_data = replace(registry_data, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by process.name, registry_data\n| where hosts == 1 and cc == 1\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where  @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action == \"RegistryEvent (Value Set)\" and\n  ends_with(registry.key,\"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\") and\n  not registry.data.strings rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.{1,2}[c-fC-F]:\\\\WINDOWS\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| keep registry.key, registry.data.strings, process.name, host.id\n| eval registry_data = replace(registry.data.strings, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval registry_data = replace(registry_data, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by process.name, registry_data\n| where hosts == 1 and cc == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"OTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies browser or svchost instances performing a considerable number of connections per hour over an extended period of hours to a specific destination address, limited to a unique host of the monitored agents. Browsers and svchost are both good targets for masquerading network traffic on the endpoint.\n","integration":["endpoint","windows"],"uuid":"5e5aa9c2-96a8-4d5b-bbca-ff2ec8fefa5b","name":"High Count of Network Connection Over Extended Period by Process","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt includes three queries for Elastic Defend and Sysmon data sources."],"mitre":["T1071"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  network.direction == \"egress\" and process.name in (\"chrome.exe\", \"msedge.exe\", \"iexplore.exe\", \"firefox.exe\", \"svchost.exe\") and\n /* excluding DNS */\n destination.port != 53 and\n /* excluding private IP ranges */\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp, host.id\n /* calc total duration and the number of connections per hour */\n| stats count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp), hosts= count_distinct(host.id), count_unique_pids = count_distinct(process.entity_id) by  destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.name, duration_hours, destination.address, hosts, count_unique_pids, count_connections, number_of_con_per_hour\n /* threshold is set to 120 connections per minute during 4 hours and limited to 1 agent and 1 pid, you can adjust this values to your hunting needs */\n| where number_of_con_per_hour >= 120 and duration_hours >= 4 and hosts == 1 and count_unique_pids == 1\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  network.direction == \"egress\" and process.name in (\"chrome.exe\", \"msedge.exe\", \"iexplore.exe\", \"firefox.exe\", \"svchost.exe\") and\n destination.port != 53 and\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp, host.id\n| stats count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp), hosts= count_distinct(host.id), count_unique_pids = count_distinct(process.entity_id) by  destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.name, duration_hours, destination.address, hosts, count_unique_pids, count_connections, number_of_con_per_hour\n| where number_of_con_per_hour >= 120 and duration_hours >= 4 and hosts == 1 and count_unique_pids == 1"},{"query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  network.direction == \"egress\" and\n(process.code_signature.exists == false or process.code_signature.trusted != true or starts_with(process.executable, \"C:\\\\Users\\\\Public\\\\\"))  and\n /* excluding private IP ranges */\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp\n /* calc total duration , total MB out and the number of connections per hour */\n| stats total_bytes_out = sum(source.bytes), count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), MB_out=TO_DOUBLE(total_bytes_out) / (1024*1024), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.entity_id, process.name, duration_hours, destination.address, MB_out, count_connections, number_of_con_per_hour\n /* threshold is set to 120 connections per minute , you can adjust it to your env/FP rate */\n| where duration_hours >= 1 and number_of_con_per_hour >= 120\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  network.direction == \"egress\" and\n(process.code_signature.exists == false or process.code_signature.trusted != true or starts_with(process.executable, \"C:\\\\Users\\\\Public\\\\\"))  and\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp\n| stats total_bytes_out = sum(source.bytes), count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), MB_out=TO_DOUBLE(total_bytes_out) / (1024*1024), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.entity_id, process.name, duration_hours, destination.address, MB_out, count_connections, number_of_con_per_hour\n| where duration_hours >= 1 and number_of_con_per_hour >= 120"},{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  network.direction == \"egress\" and (process.executable like \"C:\\\\\\\\Windows\\\\\\\\System32*\" or process.executable like \"C:\\\\\\\\Windows\\\\\\\\SysWOW64\\\\\\\\*\")  and not user.id in (\"S-1-5-19\", \"S-1-5-20\") and\n/* multiple Windows svchost services perform long term connection to MS ASN, can be covered in a dedicated hunt */\nnot (process.name == \"svchost.exe\" and user.id == \"S-1-5-18\") and\n/* excluding private IP ranges */\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp\n /* calc total duration , total MB out and the number of connections per hour */\n| stats total_bytes_out = sum(source.bytes), count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), MB_out=TO_DOUBLE(total_bytes_out) / (1024*1024), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.entity_id, process.name, duration_hours, destination.address, MB_out, count_connections, number_of_con_per_hour\n/* threshold is set to 120 connections per minute , you can adjust it to your env/FP rate */\n| where duration_hours >= 1 and number_of_con_per_hour >= 120\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  network.direction == \"egress\" and (process.executable like \"C:\\\\\\\\Windows\\\\\\\\System32*\" or process.executable like \"C:\\\\\\\\Windows\\\\\\\\SysWOW64\\\\\\\\*\")  and not user.id in (\"S-1-5-19\", \"S-1-5-20\") and\nnot (process.name == \"svchost.exe\" and user.id == \"S-1-5-18\") and\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, @timestamp\n| stats total_bytes_out = sum(source.bytes), count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, destination.address, process.name\n| eval dur = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(dur/3600000), MB_out=TO_DOUBLE(total_bytes_out) / (1024*1024), number_of_con_per_hour = (count_connections / duration_hours)\n| keep process.entity_id, process.name, duration_hours, destination.address, MB_out, count_connections, number_of_con_per_hour\n| where duration_hours >= 1 and number_of_con_per_hour >= 120"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"OjYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt attempts to identify remote process injection by aggregating Sysmon `CreateRemoteThread` events by source process and returns the ones that we observed in only one unique host.","integration":["windows"],"uuid":"4f878255-53b8-4914-9a7d-4b668bd2ea6a","name":"Low Occurrence Rate of CreateRemoteThread by Source Process","language":["ES|QL"],"license":"Elastic License v2","notes":["Adding `winlog.event_data.TargetImage` to the aggregation clause can be beneficial but may introduce more false-positives."],"mitre":["T1055"],"references":[],"queries":[{"query":"from logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"CreateRemoteThread\"\n| eval source_process = replace(process.executable, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by source_process\n /* unique source and target processes combined and observed in 1 host */\n| where hosts == 1 and cc == 1\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"CreateRemoteThread\"\n| eval source_process = replace(process.executable, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by source_process\n| where hosts == 1 and cc == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"OzYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies instances where a signed Windows process attempts to load an unsigned DLL from the same process folder. Matches are limited to a unique host with low library load occurrence. Adversaries may execute their own malicious payloads by side-loading malicious DLLs.","integration":["endpoint","windows"],"uuid":"34a7aadb-fb0f-45ea-9260-830f39c3343b","name":"Rare DLL Side-Loading by Occurrence","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt has two optional queries, one for Elastic Defend data and another for Sysmon data.","Based on the returned results you can further investigate suspicious DLLs by sha256 and library path.","Paths like `C:\\\\Users\\\\Public` and `C:\\\\ProgramData\\\\` are often observed in malware employing DLL side-loading.","Elastic Defned DLL Events include `dll.Ext.relative_file_creation_time` which help us limit the hunt to recently dropped DLLs."],"mitre":["T1574","T1574.002"],"references":[],"queries":[{"query":"from logs-endpoint.events.library-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.action == \"load\" and process.code_signature.status == \"trusted\" and dll.code_signature.status != \"trusted\" and dll.Ext.relative_file_creation_time <= 86400\n| eval dll_folder = substring(dll.path, 1, length(dll.path) - (length(dll.name) + 1))\n| eval process_folder = substring(process.executable, 1, length(process.executable) - (length(process.name) + 1))\n| where process_folder is not null and dll_folder is not null and process_folder == dll_folder and process.name != dll.name\n| eval dll_folder = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"), process_folder = replace(process_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval dll_folder = replace(dll_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\"), process_folder = replace(process_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats host_count = count_distinct(host.id), total_count = count(*) by dll_folder, dll.name, process.name, dll.hash.sha256\n/* total_count can be adjusted to higher or lower values depending on env */\n| where host_count == 1 and total_count <= 10 | keep total_count, host_count, dll_folder, dll.name, process.name, dll.hash.sha256\n","indices":["logs-endpoint.events.library-*"],"cleaned_query":"from logs-endpoint.events.library-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.action == \"load\" and process.code_signature.status == \"trusted\" and dll.code_signature.status != \"trusted\" and dll.Ext.relative_file_creation_time <= 86400\n| eval dll_folder = substring(dll.path, 1, length(dll.path) - (length(dll.name) + 1))\n| eval process_folder = substring(process.executable, 1, length(process.executable) - (length(process.name) + 1))\n| where process_folder is not null and dll_folder is not null and process_folder == dll_folder and process.name != dll.name\n| eval dll_folder = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"), process_folder = replace(process_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval dll_folder = replace(dll_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\"), process_folder = replace(process_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats host_count = count_distinct(host.id), total_count = count(*) by dll_folder, dll.name, process.name, dll.hash.sha256\n| where host_count == 1 and total_count <= 10 | keep total_count, host_count, dll_folder, dll.name, process.name, dll.hash.sha256"},{"query":"from logs-windows.sysmon_operational-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"Image loaded\" and file.code_signature.status != \"Valid\" and\n  not file.path rlike \"\"\"[c-fC-F]:\\\\(Windows|windows|WINDOWS)\\\\(System32|SysWOW64|system32|syswow64)\\\\[a-zA-Z0-9_]+.dll\"\"\"\n| eval dll_folder = substring(file.path, 1, length(file.path) - (length(file.name) + 1))\n| eval process_folder = substring(process.executable, 1, length(process.executable) - (length(process.name) + 1))\n| where process_folder is not null and dll_folder is not null and process_folder == dll_folder and file.name != process.name\n/* paths normalization by removing random patterns */\n| eval dll_folder = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"), process_folder = replace(process_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"), dll_folder = replace(dll_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\"), process_folder = replace(process_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats host_count = count_distinct(host.id), total_count = count(*) by dll_folder, file.name, process.name, file.hash.sha256\n/* total_count can be adjusted to higher or lower values depending on env */\n| where host_count == 1 and total_count <= 10\n| keep total_count, host_count, dll_folder, file.name, process.name, file.hash.sha256\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.category == \"process\" and event.action == \"Image loaded\" and file.code_signature.status != \"Valid\" and\n  not file.path rlike \"\"\"[c-fC-F]:\\\\(Windows|windows|WINDOWS)\\\\(System32|SysWOW64|system32|syswow64)\\\\[a-zA-Z0-9_]+.dll\"\"\"\n| eval dll_folder = substring(file.path, 1, length(file.path) - (length(file.name) + 1))\n| eval process_folder = substring(process.executable, 1, length(process.executable) - (length(process.name) + 1))\n| where process_folder is not null and dll_folder is not null and process_folder == dll_folder and file.name != process.name\n| eval dll_folder = replace(dll_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"), process_folder = replace(process_folder, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"), dll_folder = replace(dll_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\"), process_folder = replace(process_folder, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats host_count = count_distinct(host.id), total_count = count(*) by dll_folder, file.name, process.name, file.hash.sha256\n| where host_count == 1 and total_count <= 10\n| keep total_count, host_count, dll_folder, file.name, process.name, file.hash.sha256"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"PDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt looks for a high occurrence of remote desktop connections from the same host and user. The number of unique destination IP addresses is compared to a defined threshold. This could be a sign of discovery or lateral movement via the Remote Desktop Protocol (RDP).\n","integration":["endpoint","windows"],"uuid":"f7d2054f-b571-4cd0-b39e-a779576e9398","name":"Excessive RDP Network Activity by Host and User","language":["ES|QL"],"license":"Elastic License v2","notes":["Further investigation can done pivoting by `host.id` and `user.name`.","Depending on normal SysAdmin RDP activity, the threshold of 10 can be adjusted to reduce normal noisy activity.","The second query uses Windows Security log event ID 4624 to summarize numbers of RDP connections by `source.ip` and `user.name` and duration."],"mitre":["T1021","T1021.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and network.direction == \"egress\" and\n  network.transport == \"tcp\"and destination.port == 3389 and source.port >= 49152\n| keep destination.ip, host.id, user.name\n| stats count_unique_dst = count_distinct(destination.ip) by host.id, user.name\n /* threshold set to 10 but can be adjusted to reduce normal baseline in your env */\n| where count_unique_dst >= 10\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and network.direction == \"egress\" and\n  network.transport == \"tcp\"and destination.port == 3389 and source.port >= 49152\n| keep destination.ip, host.id, user.name\n| stats count_unique_dst = count_distinct(destination.ip) by host.id, user.name\n| where count_unique_dst >= 10"},{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and process.name == \"svchost.exe\" and network.direction == \"ingress\" and\n  network.transport == \"tcp\"and destination.port == 3389 and source.port >= 49152\n| stats agents = count_distinct(host.id) by source.ip\n| where agents >= 10\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and process.name == \"svchost.exe\" and network.direction == \"ingress\" and\n  network.transport == \"tcp\"and destination.port == 3389 and source.port >= 49152\n| stats agents = count_distinct(host.id) by source.ip\n| where agents >= 10"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"PTYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt identifies when a process loads a DLL normally located in `System32` or `SysWOW64` folders from an unusual path. Adversaries may execute their own malicious payloads by side-loading malicious DLLs. The host count also should help exclude false-positives by looking at low occurrences when this abnormal behavior is limited to unique agents.","integration":["endpoint","windows"],"uuid":"d06bc067-6174-412f-b1c9-bf8f15149519","name":"DLL Hijack via Masquerading as Microsoft Native Libraries","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt has two optional queries, one for Elastic Defend data and another for Sysmon data.","This hunt requires the creation of an [enrichment policy](https://www.elastic.co/guide/en/elasticsearch/reference/current/esql-enrich-data.html) to use with the ES|QL (ENRICH command).","The `dll.hash.sha256` field can be used to pivot and further investigate the DLL origin and purpose.","Paths like `C:\\Users\\Public and C:\\ProgramData\\` are often observed in malware employing DLL side-loading."],"mitre":["T1574","T1574.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.library-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.action == \"load\" and process.code_signature.status == \"trusted\" and dll.code_signature.status != \"trusted\" and\n not dll.path rlike \"\"\"[c-fC-F]:\\\\(Windows|windows|WINDOWS)\\\\(System32|SysWOW64|system32|syswow64)\\\\[a-zA-Z0-9_]+.dll\"\"\"\n| keep dll.name, dll.path, dll.hash.sha256, process.executable, host.id\n /* steps how to create DL enrichment policy https://gist.github.com/Samirbous/9f9c3237a0ada745e71cc2ba3425311c  */\n| ENRICH libs-policy-defend\n /* if the DLL is normally located is system32 or syswow64 folders, native tag will be equal to yes */\n| where native == \"yes\" and not starts_with(dll.path, \"C:\\\\Windows\\\\assembly\\\\NativeImages\")\n /* normalize paths by removing random patterns */\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"),\n  dll_path = replace(dll.path, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats host_count = count_distinct(host.id) by dll.name, dll_path, process_path, dll.hash.sha256\n| sort host_count asc\n","indices":["logs-endpoint.events.library-*"],"cleaned_query":"from logs-endpoint.events.library-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and event.action == \"load\" and process.code_signature.status == \"trusted\" and dll.code_signature.status != \"trusted\" and\n not dll.path rlike \"\"\"[c-fC-F]:\\\\(Windows|windows|WINDOWS)\\\\(System32|SysWOW64|system32|syswow64)\\\\[a-zA-Z0-9_]+.dll\"\"\"\n| keep dll.name, dll.path, dll.hash.sha256, process.executable, host.id\n| ENRICH libs-policy-defend\n| where native == \"yes\" and not starts_with(dll.path, \"C:\\\\Windows\\\\assembly\\\\NativeImages\")\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"),\n  dll_path = replace(dll.path, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats host_count = count_distinct(host.id) by dll.name, dll_path, process_path, dll.hash.sha256\n| sort host_count asc"},{"query":"from logs-windows.sysmon_operational-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and  event.category == \"process\" and event.action == \"Image loaded\" and file.code_signature.status != \"Valid\" and\n not file.path rlike \"\"\"[c-fC-F]:\\\\(Windows|windows|WINDOWS)\\\\(System32|SysWOW64|system32|syswow64)\\\\[a-zA-Z0-9_]+.dll\"\"\"\n| keep file.name, file.path, file.hash.sha256, process.executable, host.id\n /* steps to create DL enrichment policy https://gist.github.com/Samirbous/9f9c3237a0ada745e71cc2ba3425311c - just replace dll by file */\n| ENRICH libs-policy-sysmon\n /* if the DLL is normally located is system32 or syswow64 folders, native tag will be equal to yes */\n| where native == \"yes\" and not starts_with(file.path, \"C:\\\\Windows\\\\assembly\\\\NativeImages\")\n /* normalize paths by removing random patterns */\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"),\n  dll_path = replace(file.path, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats host_count = count_distinct(host.id) by file.name, dll_path, process_path, file.hash.sha256\n| sort host_count asc\n","indices":["logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-windows.sysmon_operational-*\n| where @timestamp > NOW() - 7 day\n| where host.os.family == \"windows\" and  event.category == \"process\" and event.action == \"Image loaded\" and file.code_signature.status != \"Valid\" and\n not file.path rlike \"\"\"[c-fC-F]:\\\\(Windows|windows|WINDOWS)\\\\(System32|SysWOW64|system32|syswow64)\\\\[a-zA-Z0-9_]+.dll\"\"\"\n| keep file.name, file.path, file.hash.sha256, process.executable, host.id\n| ENRICH libs-policy-sysmon\n| where native == \"yes\" and not starts_with(file.path, \"C:\\\\Windows\\\\assembly\\\\NativeImages\")\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\"),\n  dll_path = replace(file.path, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats host_count = count_distinct(host.id) by file.name, dll_path, process_path, file.hash.sha256\n| sort host_count asc"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"PjYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"Using aggregation and strings extraction, this hunt identifies instances where a scheduled task is created and set to run a command unique to a specific host. This could be the result of persistence as a Windows Scheduled Task.\n","integration":["system"],"uuid":"44223fd6-8241-4c21-9d54-21201fa15b12","name":"Scheduled Tasks Creation for Unique Hosts by Task Command","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt returns the aggregation of created tasks by task name, command to execute and number of hosts where this task is present.","Close attention should be paid to suspicious paths like `C:\\Users\\Public and C:\\ProgramData\\` as well as LOLBins."],"mitre":["T1053","T1053.005"],"references":[],"queries":[{"query":"from logs-system.security-default-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.code == \"4698\" and event.action == \"scheduled-task-created\"\n /* parsing unstructured data from winlog message to extract a scheduled task Exec command */\n| grok message \"(?<Command><Command>.+</Command>)\" | eval Command = replace(Command, \"(<Command>|</Command>)\", \"\")\n| where Command is not null\n /* normalise task name by removing usersid and uuid string patterns */\n| eval TaskName = replace(winlog.event_data.TaskName, \"\"\"((-S-1-5-.*)|\\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\})\"\"\", \"\")\n /* normalise task name by removing random patterns in a file path */\n| eval Task_Command = replace(Command, \"\"\"(ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n /* normalize user home profile path */\n| eval Task_Command = replace(Task_Command, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| where Task_Command like \"?*\" and not starts_with(Task_Command, \"C:\\\\Program Files\") and not starts_with(Task_Command, \"\\\"C:\\\\Program Files\")\n| stats tasks_count = count(*), hosts_count = count_distinct(host.id) by Task_Command, TaskName\n| where hosts_count == 1\n","indices":["logs-system.security-default-*"],"cleaned_query":"from logs-system.security-default-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.code == \"4698\" and event.action == \"scheduled-task-created\"\n| grok message \"(?<Command><Command>.+</Command>)\" | eval Command = replace(Command, \"(<Command>|</Command>)\", \"\")\n| where Command is not null\n| eval TaskName = replace(winlog.event_data.TaskName, \"\"\"((-S-1-5-.*)|\\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\})\"\"\", \"\")\n| eval Task_Command = replace(Command, \"\"\"(ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval Task_Command = replace(Task_Command, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| where Task_Command like \"?*\" and not starts_with(Task_Command, \"C:\\\\Program Files\") and not starts_with(Task_Command, \"\\\"C:\\\\Program Files\")\n| stats tasks_count = count(*), hosts_count = count_distinct(host.id) by Task_Command, TaskName\n| where hosts_count == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"PzYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"Using aggregation and the ES|QL `SUM` function, this hunt identifies processes that performed egress connections with total bytes greater or equal to a defined maximum threshold. This may indicate exfiltration or long term command and control activity.\n","integration":["endpoint"],"uuid":"24925575-defd-4581-bfda-a8753dcfb46e","name":"Egress Network Connections with Total Bytes Greater than Threshold","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt is not compatible with Sysmon event 3 (Network connection) and Windows security event 5156 as both don't log `source.bytes`.","The use of `host.os.family` is to optimise the query and avoid timeout. You can duplicate the same query for other platforms (linux, macos etc.)","Based on limited testing it's recommended to set the query time window to 8 hours.","Pivoting by `process.entity_id` will allow further investigation (parent process, hash, child processes, other network events etc.)."],"mitre":["T1071"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*\n| where  @timestamp > now() - 8 hour\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  event.action == \"disconnect_received\" and\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.executable, process.entity_id\n| stats total_bytes_out = sum(source.bytes) by process.entity_id, destination.address, process.executable\n /* more than 1GB out by same process.pid in 8 hours */\n| where total_bytes_out >= 1073741824\n","indices":["logs-endpoint.events.network-*"],"cleaned_query":"from logs-endpoint.events.network-*\n| where  @timestamp > now() - 8 hour\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  event.action == \"disconnect_received\" and\n  not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.executable, process.entity_id\n| stats total_bytes_out = sum(source.bytes) by process.entity_id, destination.address, process.executable\n| where total_bytes_out >= 1073741824"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"QDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt looks for scheduled tasks creation by action using registry events. Scheduled tasks actions are saved under the TaskCache registry key in base64 encoded blob. Malware often abuse LOLBins to proxy execution or run executables from unusual paths, you can add more patterns to the query.\n","integration":["endpoint"],"uuid":"df50f65e-e820-47f4-a039-671611582f51","name":"Scheduled tasks Creation by Action via Registry","language":["ES|QL"],"license":"Elastic License v2","notes":["Malware often abuse LOLBins to proxy execution or run executables from unusual paths, you can add more patterns to the query."],"mitre":["T1053","T1053.005"],"references":[],"queries":[{"query":"from logs-endpoint.events.registry-*\n| where  @timestamp > now() - 7 day\n| where host.os.type == \"windows\" and event.category == \"registry\" and event.action == \"modification\" and\n  registry.path like \"\"\"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tasks\\\\*Actions*\"\"\"\n /* scheduled task actions are saved under the TaskCache registry key in base64 encoded blob */\n| eval scheduled_task_action = replace(TO_LOWER(FROM_BASE64(registry.data.bytes)), \"\"\"\\u0000\"\"\", \"\")\n /* commonly abused lolbin set to run as a scheduled task */\n| where scheduled_task_action rlike \"\"\".*(users\\\\public\\\\|\\\\appdata\\\\roaming|programdata|powershell.exe|rundll32.exe|regsvr32.exe|mshta.exe|cscript.exe|wscript.exe|cmd.exe|forfiles|msiexec.exe|wmic.exe|msbuild.exe|http|cmstp.exe|msxsl.exe|ie4uinit.exe).*\"\"\" and not scheduled_task_action like \"localsystem*\"\n| keep scheduled_task_action, registry.path, agent.id\n| stats count_agents = count_distinct(agent.id) by scheduled_task_action\n /* helps reduce result to instances limited to one agent */\n| where count_agents == 1\n","indices":["logs-endpoint.events.registry-*"],"cleaned_query":"from logs-endpoint.events.registry-*\n| where  @timestamp > now() - 7 day\n| where host.os.type == \"windows\" and event.category == \"registry\" and event.action == \"modification\" and\n  registry.path like \"\"\"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tasks\\\\*Actions*\"\"\"\n| eval scheduled_task_action = replace(TO_LOWER(FROM_BASE64(registry.data.bytes)), \"\"\"\\u0000\"\"\", \"\")\n| where scheduled_task_action rlike \"\"\".*(users\\\\public\\\\|\\\\appdata\\\\roaming|programdata|powershell.exe|rundll32.exe|regsvr32.exe|mshta.exe|cscript.exe|wscript.exe|cmd.exe|forfiles|msiexec.exe|wmic.exe|msbuild.exe|http|cmstp.exe|msxsl.exe|ie4uinit.exe).*\"\"\" and not scheduled_task_action like \"localsystem*\"\n| keep scheduled_task_action, registry.path, agent.id\n| stats count_agents = count_distinct(agent.id) by scheduled_task_action\n| where count_agents == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"QTYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt looks for unique process execution via Windows Management Instrumentation (WMI) by removing random patterns from `process.command_line` and aggregating execution by count of agents with the same command line to limit results to unique ones.\n","integration":["endpoint","windows","system"],"uuid":"a95e69af-22ad-4ab7-919e-794501f10c95","name":"Low Frequency of Process Execution via WMI by Unique Agent","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt contains three queries for Elastic Defend, Sysmon, and Windows Security event 4688."],"mitre":["T1047"],"references":[],"queries":[{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\") and\n  to_lower(process.parent.name) == \"wmiprvse.exe\" and starts_with(process.code_signature.subject_name, \"Microsoft\")\n| keep process.hash.sha256, host.id, process.name\n| stats agents = count_distinct(host.id) by process.name\n| where agents == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\") and\n  to_lower(process.parent.name) == \"wmiprvse.exe\" and starts_with(process.code_signature.subject_name, \"Microsoft\")\n| keep process.hash.sha256, host.id, process.name\n| stats agents = count_distinct(host.id) by process.name\n| where agents == 1"},{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where  @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"process\" and\n  event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.parent.name) == \"wmiprvse.exe\"\n| keep process.command_line, host.id\n| eval cmdline = replace(process.command_line, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval cmdline = replace(cmdline, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats agents = count_distinct(host.id) by cmdline\n| where agents == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*","logs-system.security-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*, logs-system.security-*\n| where  @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"process\" and\n  event.action in (\"start\", \"Process creation\", \"created-process\") and\n  to_lower(process.parent.name) == \"wmiprvse.exe\"\n| keep process.command_line, host.id\n| eval cmdline = replace(process.command_line, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| eval cmdline = replace(cmdline, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| stats agents = count_distinct(host.id) by cmdline\n| where agents == 1"},{"query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\") and\n  to_lower(process.parent.name) == \"wmiprvse.exe\" and (process.code_signature.exists == false or process.code_signature.trusted == false)\n| keep process.hash.sha256, host.id, process.name\n| stats agents = count_distinct(host.id) by process.hash.sha256\n| where agents == 1\n","indices":["logs-endpoint.events.process-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.process-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and\n  host.os.family == \"windows\" and event.category == \"process\" and event.action in (\"start\", \"Process creation\") and\n  to_lower(process.parent.name) == \"wmiprvse.exe\" and (process.code_signature.exists == false or process.code_signature.trusted == false)\n| keep process.hash.sha256, host.id, process.name\n| stats agents = count_distinct(host.id) by process.hash.sha256\n| where agents == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"QjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt looks for DNS queries performed by commonly abused Microsoft binaries that perform remote file transfer or binary proxy execution. Aggregations for the number of occurrences is limited to one host to reduce the number of potentially legitimate hits.\n","integration":["endpoint","windows"],"uuid":"1c7be6db-12eb-4281-878d-b6abe0454f36","name":"DNS Queries via LOLBins with Low Occurence Frequency","language":["ES|QL"],"license":"Elastic License v2","notes":["Utilities like curl and SSL verification for web services are noisy, while others are rare such as scripting utilities and are worth further investigation.","Connection to legit domains like Github, Discord, Telegram and many other legit web services by LOLBins is still suspicious and require further investigation."],"mitre":["T1071"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and host.os.family == \"windows\" and event.category == \"network\" and\n  event.action in (\"lookup_requested\", \"DNSEvent (DNS query)\") and\n  process.name in (\"powershell.exe\", \"rundll32.exe\", \"certutil.exe\", \"curl.exe\", \"wget.exe\", \"CertReq.exe\", \"bitsadmin.exe\", \"mshta.exe\", \"pwsh.exe\", \"wmic.exe\", \"wscript.exe\", \"cscript.exe\", \"msbuild.exe\", \"regsvr32.exe\", \"MSBuild.exe\", \"InstallUtil.exe\", \"RegAsm.exe\", \"RegSvcs.exe\",  \"msxsl.exe\", \"CONTROL.EXE\", \"Microsoft.Workflow.Compiler.exe\", \"msiexec.exe\") and dns.question.name rlike \"\"\".+\\.[a-z-A-Z]{2,3}\"\"\"\n| keep process.name,  dns.question.name, host.id\n| stats occurrences = count(*), hosts = count_distinct(host.id) by process.name, dns.question.name\n| where hosts == 1\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day and host.os.family == \"windows\" and event.category == \"network\" and\n  event.action in (\"lookup_requested\", \"DNSEvent (DNS query)\") and\n  process.name in (\"powershell.exe\", \"rundll32.exe\", \"certutil.exe\", \"curl.exe\", \"wget.exe\", \"CertReq.exe\", \"bitsadmin.exe\", \"mshta.exe\", \"pwsh.exe\", \"wmic.exe\", \"wscript.exe\", \"cscript.exe\", \"msbuild.exe\", \"regsvr32.exe\", \"MSBuild.exe\", \"InstallUtil.exe\", \"RegAsm.exe\", \"RegSvcs.exe\",  \"msxsl.exe\", \"CONTROL.EXE\", \"Microsoft.Workflow.Compiler.exe\", \"msiexec.exe\") and dns.question.name rlike \"\"\".+\\.[a-z-A-Z]{2,3}\"\"\"\n| keep process.name,  dns.question.name, host.id\n| stats occurrences = count(*), hosts = count_distinct(host.id) by process.name, dns.question.name\n| where hosts == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"QzYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"This hunt looks for either processes connecting to multiple sensitive TCP ports (SMB, RDP, LDAP, Kerberos and ADWS), a high number of SMB/RDP connections to unique destinations or the same process connecting to both RDP and SMB (should be rare).\n","integration":["endpoint","windows"],"uuid":"386f9cec-bb44-4dd2-8368-45e6fa0a425b","name":"Network Discovery via Sensitive Ports by Unusual Process","language":["ES|QL"],"license":"Elastic License v2","notes":["The query thresholds for SMB or RDP need to be adjusted to your environment.","You can add more sensitive ports to the list like FTP, SSH and others.","Elastic Network events include process code signature information, this can be added to filter out signed third party false positives."],"mitre":["T1021","T1021.002","T1021.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and network.direction == \"egress\" and\n  network.transport == \"tcp\"and destination.port in (3389, 445, 389, 9389, 88, 5985, 5986, 22) and source.port >= 49152 and\n  process.pid != 4\n| keep process.executable, destination.port, destination.ip, process.entity_id\n /* network events with SMB or RDP as a target */\n| eval smb_dip = case(destination.port == 445, destination.ip, null), rdp_dip = case(destination.port == 389, destination.ip, null)\n /* unique count by destination.port, number of distinct SMB and RDP destinations */\n| stats count_unique_ports = count_distinct(destination.port), count_smb_dst =  count_distinct(smb_dip), count_rdp_dst =  count_distinct(rdp_dip) by process.entity_id, process.executable\n| where count_unique_ports >= 3 or count_rdp_dst >= 10 or count_smb_dst >= 10 or (count_rdp_dst >= 1 and count_rdp_dst >= 1)\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"network\" and network.direction == \"egress\" and\n  network.transport == \"tcp\"and destination.port in (3389, 445, 389, 9389, 88, 5985, 5986, 22) and source.port >= 49152 and\n  process.pid != 4\n| keep process.executable, destination.port, destination.ip, process.entity_id\n| eval smb_dip = case(destination.port == 445, destination.ip, null), rdp_dip = case(destination.port == 389, destination.ip, null)\n| stats count_unique_ports = count_distinct(destination.port), count_smb_dst =  count_distinct(smb_dip), count_rdp_dst =  count_distinct(rdp_dip) by process.entity_id, process.executable\n| where count_unique_ports >= 3 or count_rdp_dst >= 10 or count_smb_dst >= 10 or (count_rdp_dst >= 1 and count_rdp_dst >= 1)"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"RDYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"This hunt aggregates created Windows services by service file name and distribution limited to unique hosts. Using the ES|QL `Replace` command we can also further remove random patterns to reduce results to interesting events. More investigation can be conducted on instance that looks suspicious based on service file path, names and LOLBins.\n","integration":["endpoint","windows","system"],"uuid":"48b75e53-3c73-40bd-873d-569dd8d7d925","name":"Unique Windows Services Creation by Service File Name","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt also identifies services registry modification by unusual process based on number of hosts and occurrences history.","Windows event IDs 4697 and 7045 are used to identify service creation and modification."],"mitre":["T1543","T1543.003"],"references":[],"queries":[{"query":"from logs-endpoint.events.registry-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action in (\"modification\",  \"RegistryEvent (Value Set)\") and\n  registry.value in (\"ServiceDLL\", \"ImagePath\") and starts_with(registry.path, \"HKLM\\\\SYSTEM\\\\\") and\n  process.executable != \"C:\\\\Windows\\\\System32\\\\services.exe\"\n| eval process_path = replace(process.executable, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats hosts = count_distinct(host.id), occurrences = count(*) by process_path\n/* unique process.executable found in one agent */\n| where hosts == 1 and occurrences == 1\n","indices":["logs-endpoint.events.registry-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.registry-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action in (\"modification\",  \"RegistryEvent (Value Set)\") and\n  registry.value in (\"ServiceDLL\", \"ImagePath\") and starts_with(registry.path, \"HKLM\\\\SYSTEM\\\\\") and\n  process.executable != \"C:\\\\Windows\\\\System32\\\\services.exe\"\n| eval process_path = replace(process.executable, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats hosts = count_distinct(host.id), occurrences = count(*) by process_path\n| where hosts == 1 and occurrences == 1"},{"query":"from logs-endpoint.events.registry-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action in (\"modification\",  \"RegistryEvent (Value Set)\") and\n  registry.value in (\"ServiceDLL\", \"ImagePath\") and starts_with(registry.path, \"HKLM\\\\SYSTEM\\\\\") and\n  not registry.data.strings rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.*\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| eval ServiceFileName = replace(registry.data.strings, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n /* unique ServiceFileName observed in 1 host*/\n| where hosts == 1 and cc == 1\n","indices":["logs-endpoint.events.registry-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.registry-*, logs-windows.sysmon_operational-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"registry\" and event.action in (\"modification\",  \"RegistryEvent (Value Set)\") and\n  registry.value in (\"ServiceDLL\", \"ImagePath\") and starts_with(registry.path, \"HKLM\\\\SYSTEM\\\\\") and\n  not registry.data.strings rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.*\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| eval ServiceFileName = replace(registry.data.strings, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n| where hosts == 1 and cc == 1"},{"query":"from logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"configuration\" and event.code == \"4697\" and\n  not winlog.event_data.ServiceFileName rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.*\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| eval ServiceFileName = replace(winlog.event_data.ServiceFileName, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n| where hosts == 1 and cc == 1\n","indices":["logs-system.security-*"],"cleaned_query":"from logs-system.security-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"configuration\" and event.code == \"4697\" and\n  not winlog.event_data.ServiceFileName rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.*\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| eval ServiceFileName = replace(winlog.event_data.ServiceFileName, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n| where hosts == 1 and cc == 1"},{"query":"from logs-system.system-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.code == \"7045\" and\n  not winlog.event_data.ImagePath rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.*\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| eval ServiceFileName = replace(winlog.event_data.ImagePath, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n| where hosts == 1 and cc == 1\n","indices":["logs-system.system-*"],"cleaned_query":"from logs-system.system-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.code == \"7045\" and\n  not winlog.event_data.ImagePath rlike \"\"\"(.{1,2}[c-fC-F]:\\\\Program Files.+)|([c-fC-F]:\\\\Program Files.+)|(.*\\\\System32\\\\DriverStore\\\\FileRepository\\\\.+)\"\"\"\n| eval ServiceFileName = replace(winlog.event_data.ImagePath, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\".inf_amd[a-z0-9]{5,}\\\\\"\"\", \"_replaced_\")\n| eval ServiceFileName = replace(ServiceFileName, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9ñ\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats cc = count(*), hosts = count_distinct(host.id) by ServiceFileName\n| where hosts == 1 and cc == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"RTYGX5YBrgDVrAfHnIMG","_score":1,"_source":{"author":"Elastic","description":"Leveraging aggregation by process executable entities, this hunt identifies identifies a high number of DNS TXT record queries from same process.\nAdversaries may leverage DNS TXT queries to stage malicious content or exfiltrate data.\n","integration":["endpoint","windows"],"uuid":"7a2c8397-d219-47ad-a8e2-93562e568d08","name":"Suspicious DNS TXT Record Lookups by Process","language":["ES|QL"],"license":"Elastic License v2","notes":["This hunt returns a list of processes unique pids and executable paths that performs a high number of DNS TXT lookups.","Pivoting by `process.entity_id` will allow further investigation (parent process, hash, child processes, other network events etc.)."],"mitre":["T1071","T1071.004"],"references":[],"queries":[{"query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  event.action in (\"lookup_requested\", \"DNSEvent (DNS query)\") and\n  (dns.question.type == \"TXT\" or dns.answers.type == \"TXT\") and process.executable != \"C:\\\\Windows\\\\system32\\\\svchost.exe\"\n| keep process.executable,  process.entity_id\n| stats occurrences = count(*) by process.entity_id, process.executable\n /* threshold can be adjusted to your env */\n| where occurrences >= 50\n","indices":["logs-endpoint.events.network-*","logs-windows.sysmon_operational-*"],"cleaned_query":"from logs-endpoint.events.network-*, logs-windows.sysmon_operational-*\n| where host.os.family == \"windows\" and event.category == \"network\" and\n  event.action in (\"lookup_requested\", \"DNSEvent (DNS query)\") and\n  (dns.question.type == \"TXT\" or dns.answers.type == \"TXT\") and process.executable != \"C:\\\\Windows\\\\system32\\\\svchost.exe\"\n| keep process.executable,  process.entity_id\n| stats occurrences = count(*) by process.entity_id, process.executable\n| where occurrences >= 50"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
{"_index":"threat-hunting-queries","_id":"RjYGX5YBrgDVrAfHnIMG","_score":1,"_ignored":["description.keyword"],"_source":{"author":"Elastic","description":"Leveraging frequency based analysis and path normalization, this hunt identifies rare instances where a program adds a Startup persistence via file creation. Startup entries cause programs to run each time that a user logs on and are often abused by adversaries to maintain persistence on an endpoint.","integration":["endpoint","windows"],"uuid":"ea950361-33e4-4045-96a5-d36ca28fbc91","name":"Persistence via Startup with Low Occurrence Frequency by Unique Host","language":["ES|QL"],"license":"Elastic License v2","notes":["Elastic Defend file event captures the `process.code_signature` information, this can be added to the hunt to limit to unsigned and Microsoft signed programs.","Unique `file.name` and limited to one agent is not necessarily malicious, however helps surface ones worth further investigation.","Suspicious `process.executable` paths and LOLBins should be reviewed further."],"mitre":["T1547","T1547.001"],"references":[],"queries":[{"query":"from logs-endpoint.events.file-*, logs-windows.sysmon_operational-default-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action in (\"creation\", \"FileCreate\") and\n  file.path rlike \"\"\"(C:\\\\Users\\\\.+\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\.+*|C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp\\\\.+)\"\"\"\n| keep process.executable, host.id, file.name\n /* Paths normalization in registry.data.strings to ease aggregation */\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats number_hosts = count_distinct(host.id) by process_path, file.name\n| where number_hosts == 1\n","indices":["logs-endpoint.events.file-*","logs-windows.sysmon_operational-default-*"],"cleaned_query":"from logs-endpoint.events.file-*, logs-windows.sysmon_operational-default-*\n| where  @timestamp > now() - 7 day\n| where host.os.family == \"windows\" and event.category == \"file\" and event.action in (\"creation\", \"FileCreate\") and\n  file.path rlike \"\"\"(C:\\\\Users\\\\.+\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\.+*|C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp\\\\.+)\"\"\"\n| keep process.executable, host.id, file.name\n| eval process_path = replace(process.executable, \"\"\"([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|ns[a-z][A-Z0-9]{3,4}\\.tmp|DX[A-Z0-9]{3,4}\\.tmp|7z[A-Z0-9]{3,5}\\.tmp|[0-9\\.\\-\\_]{3,})\"\"\", \"\")\n| eval process_path = replace(process_path, \"\"\"[cC]:\\\\[uU][sS][eE][rR][sS]\\\\[a-zA-Z0-9\\.\\-\\_\\$~ ]+\\\\\"\"\", \"C:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats number_hosts = count_distinct(host.id) by process_path, file.name\n| where number_hosts == 1"}],"category":"windows","@timestamp":"2025-04-22T20:38:17.705Z"}}
